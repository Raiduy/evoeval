{"eval": {"EvoEval/44": [{"task_id": "EvoEval/44", "solution": "\n\ndef change_base(x: int, base: int) -> int:\n    \"\"\"Change numerical base of input number x to base.\n    return integer representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    22\n    >>> change_base(8, 2)\n    1000\n    >>> change_base(7, 2)\n    111\n    \"\"\"\n    if x == 0:\n        return 0\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return int(''.join(map(str, digits[::-1])))", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/35": [{"task_id": "EvoEval/35", "solution": "\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/89": [{"task_id": "EvoEval/89", "solution": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift up by two multiplied to two places.\n    For example:\n    encrypt('lm') returns 'hi'\n    encrypt('ewhjklnop') returns 'asdfghjkl'\n    encrypt('kj') returns 'gf'\n    encrypt('ix') returns 'et'\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            ascii_val = ord(char)\n            if char.isupper():\n                result += chr((ascii_val - 65 - 2 * 2) % 26 + 65)\n            else:\n                result += chr((ascii_val - 97 - 2 * 2) % 26 + 97)\n        else:\n            result += char\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/94": [{"task_id": "EvoEval/94", "solution": "\n", "base_status": "fail", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/55": [{"task_id": "EvoEval/55", "solution": "\ndef fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[10]], "plus_fail_tests": []}], "EvoEval/16": [{"task_id": "EvoEval/16", "solution": "\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (case-sensitive) does it consist of.\n    >>> count_distinct_characters('xyzXYZ')\n    6\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/57": [{"task_id": "EvoEval/57", "solution": "\n\ndef monotonic(l: list):\n    if len(l) < 2:\n        return False\n    else:\n        diff = l[1] - l[0]\n        for index in range(2, len(l)):\n            if (l[index] - l[index - 1]) * diff < 0:\n                return False\n        return True", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[1, 1, 1, 2, 1, 1, 1]]], "plus_fail_tests": []}], "EvoEval/19": [{"task_id": "EvoEval/19", "solution": "\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    >>> sort_numbers('three one five')\n    'five three one'\n    \"\"\"\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x], reverse=True)\n    return ' '.join(num_list)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/40": [{"task_id": "EvoEval/40", "solution": "\ndef triples_sum_to_ten(l: list):\n    if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/24": [{"task_id": "EvoEval/24", "solution": "\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, larger than 1 \"\"\"\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/31": [{"task_id": "EvoEval/31", "solution": "\n\ndef is_prime(n):\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/92": [{"task_id": "EvoEval/92", "solution": "\ndef any_int(x, y, z):\n    if all((isinstance(i, int) for i in [x, y, z])):\n        if x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y):\n            return True\n    return False", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/65": [{"task_id": "EvoEval/65", "solution": "\ndef circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[shift:] + x_str[:shift]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/82": [{"task_id": "EvoEval/82", "solution": "\ndef prime_length(string):\n    string = string.replace(' ', '')\n    length = len(string)\n    if length < 2:\n        return False\n    if length == 2:\n        return True\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/81": [{"task_id": "EvoEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[4.0, 3, 1.7, 2, 3.5]]], "plus_fail_tests": []}], "EvoEval/25": [{"task_id": "EvoEval/25", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "base_status": "fail", "plus_status": null, "base_fail_tests": [[57]], "plus_fail_tests": []}], "EvoEval/83": [{"task_id": "EvoEval/83", "solution": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start with 1 or end with 2.\n    \"\"\"\n    if n == 1:\n        return 2\n    else:\n        return 10 ** (n - 1) * 2 + 10 ** (n - 2) * 8", "base_status": "fail", "plus_status": null, "base_fail_tests": [[2]], "plus_fail_tests": []}], "EvoEval/75": [{"task_id": "EvoEval/75", "solution": "\ndef is_multiply_prime(a):\n    if a < 100:\n        primes = [i for i in range(2, a) if is_prime(i)]\n        count = 0\n        for prime in primes:\n            if a % prime == 0:\n                a /= prime\n                count += 1\n        if count == 4:\n            return True\n    return False", "base_status": "fail", "plus_status": null, "base_fail_tests": [[5]], "plus_fail_tests": []}], "EvoEval/91": [{"task_id": "EvoEval/91", "solution": "\ndef is_bored(S):\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I') and sentence.strip().endswith('boredom'):\n            count += 1\n    return count", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Hello world"]], "plus_fail_tests": []}], "EvoEval/32": [{"task_id": "EvoEval/32", "solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial xs[0] + xs[1] * x^1 + xs[2] * x^3 + .... xs[n] * x^(2*n-1)\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having at least two coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-2, -3, 1]), 2) # (x + 1) (x + 1) (x - 2) = -2 - 3x + x^3\n    -1.0\n    \"\"\"\n    (a, b) = (-abs(xs[-1]), abs(xs[-1]))\n    while abs(b - a) > 1e-06:\n        mid = (a + b) / 2\n        if poly(xs, mid) > 0:\n            b = mid\n        else:\n            a = mid\n    return (a + b) / 2", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[-10, -2]]], "plus_fail_tests": []}], "EvoEval/10": [{"task_id": "EvoEval/10", "solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that ends with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest prefix of supplied string that is a palindrome.\n    - Append to the start of the string reverse of a string suffix that comes after the palindromic prefix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'tacat'\n    >>> make_palindrome('cata')\n    'atacata'\n    \"\"\"\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]", "base_status": "fail", "plus_status": null, "base_fail_tests": [["xyz"]], "plus_fail_tests": []}], "EvoEval/22": [{"task_id": "EvoEval/22", "solution": "\nfrom typing import List, Any\n\n\ndef filter_even_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[true, false, null, 0, -10, "test", [], {}, 3.14]]], "plus_fail_tests": []}], "EvoEval/70": [{"task_id": "EvoEval/70", "solution": "\ndef strange_sort_list(lst):\n    result = []\n    while lst:\n        max_val = max(lst)\n        lst.remove(max_val)\n        result.append(max_val)\n        if lst:\n            min_val = min(lst)\n            lst.remove(min_val)\n            result.append(min_val)\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/26": [{"task_id": "EvoEval/26", "solution": "\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Return the list in the reverse order of the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [4, 3, 1]\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n        else:\n            unique_numbers.remove(number)\n    return unique_numbers[::-1]", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4]]], "plus_fail_tests": []}], "EvoEval/50": [{"task_id": "EvoEval/50", "solution": "\ndef encode_shift(s: str, shift: int = 5):\n    \"\"\"\n    returns encoded string by shifting every character by 'shift' in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str, shift: int=5) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string by reversing the shift.\n    \"\"\"\n    return ''.join([chr((ord(ch) - ord('a') - shift) % 26 + ord('a')) for ch in s])", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/62": [{"task_id": "EvoEval/62", "solution": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form, but in descending order of the power of x.\n    >>> derivative([3, 1, 2, 4, 5])\n    [20, 12, 4, 1]\n    >>> derivative([1, 2, 3])\n    [6, 2]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[3, 1, 2, 4, 5]]], "plus_fail_tests": []}], "EvoEval/59": [{"task_id": "EvoEval/59", "solution": "\ndef smallest_prime_factor(n: int):\n    \"\"\"Return the smallest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/61": [{"task_id": "EvoEval/61", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"[\" and \"]\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"[\")\n    False\n    >>> correct_bracketing(\"[]\")\n    True\n    >>> correct_bracketing(\"[[][]]\")\n    True\n    >>> correct_bracketing(\"][][\")\n    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if bracket == '[':\n            count += 1\n        elif bracket == ']':\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/38": [{"task_id": "EvoEval/38", "solution": "\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of four characters.\n    \"\"\"\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[1:] + group[0]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    n = 4\n    groups = [s[n * i:min(n * i + n, len(s))] for i in range((len(s) + n - 1) // n)]\n    groups = [group[-1] + group[:-1] if len(group) == n else group for group in groups]\n    return ''.join(groups)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/71": [{"task_id": "EvoEval/71", "solution": "\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 3)\n    else:\n        return -1", "base_status": "fail", "plus_status": null, "base_fail_tests": [[3, 4, 5]], "plus_fail_tests": []}], "EvoEval/88": [{"task_id": "EvoEval/88", "solution": "\ndef sort_array(array):\n    if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(list(set(array)), reverse=True)\n    else:\n        return sorted(list(set(array)))", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/78": [{"task_id": "EvoEval/78", "solution": "\ndef hex_key(num):\n    non_prime_hex = ['0', '1', '4', '6', '8', '9', 'A', 'C', 'E']\n    count = sum((1 for digit in num if digit in non_prime_hex))\n    return count", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/85": [{"task_id": "EvoEval/85", "solution": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the odd elements that are at even indices.\"\"\"\n    return sum((val for (idx, val) in enumerate(lst) if idx % 2 == 0 and val % 2 != 0))", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/2": [{"task_id": "EvoEval/2", "solution": "\ndef truncate_number(number: float) -> tuple:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer and decimal part of the number.\n    >>> truncate_number(3.5)\n    (3, 0.5)\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return (integer_part, decimal_part)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/52": [{"task_id": "EvoEval/52", "solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below or equal to threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 20)\n    False\n    \"\"\"\n    for num in l:\n        if num > t:\n            return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/47": [{"task_id": "EvoEval/47", "solution": "\ndef median(l: list):\n    \"\"\"Return median of elements in the list l, but if the list is empty, return 0 instead.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    >>> median([])\n    0\n    \"\"\"\n    if not l:\n        return 0\n    else:\n        l.sort()\n        n = len(l)\n        m = n - 1\n        return (l[n // 2] + l[m // 2]) / 2", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[3, 1, 2, 4, 5]]], "plus_fail_tests": []}], "EvoEval/13": [{"task_id": "EvoEval/13", "solution": "\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    return abs(a * b) // math.gcd(a, b)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[3, 7]], "plus_fail_tests": []}], "EvoEval/63": [{"task_id": "EvoEval/63", "solution": "\ndef fibfib(n: int, memo={0: 0, 1: 0, 2: 1}):\n    if n not in memo:\n        memo[n] = fibfib(n - 3, memo) + fibfib(n - 2, memo) - fibfib(n - 1, memo)\n    return memo[n]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/98": [{"task_id": "EvoEval/98", "solution": "\ndef count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in 'AEIOU':\n            count += 1\n    return count", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/74": [{"task_id": "EvoEval/74", "solution": "\ndef total_match(lst1, lst2):\n    total_chars_lst1 = sum((len(s) for s in lst1))\n    total_chars_lst2 = sum((len(s) for s in lst2))\n    if total_chars_lst1 > total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/14": [{"task_id": "EvoEval/14", "solution": "\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(len(string), 0, -1)]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/34": [{"task_id": "EvoEval/34", "solution": "\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list in descending order\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [123, 9, 5, 3, 2, 0]\n    \"\"\"\n    return sorted(list(set(l)), reverse=True)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/67": [{"task_id": "EvoEval/67", "solution": "def fruit_distribution(s, n):\n    words = s.split()\n    apples = int(words[0])\n    oranges = int(words[2])\n    mangoes = n - apples - oranges - 1\n    return mangoes", "base_status": "fail", "plus_status": null, "base_fail_tests": [["100 apples, 1 oranges", 120]], "plus_fail_tests": []}], "EvoEval/90": [{"task_id": "EvoEval/90", "solution": "\ndef next_largest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        lst = list(set(lst))\n        lst.sort()\n        return lst[-2]", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[1, 1]]], "plus_fail_tests": []}], "EvoEval/33": [{"task_id": "EvoEval/33", "solution": "\ndef sort_third(l: list):\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    divisible_by_three.sort(reverse=True)\n    new_list = [divisible_by_three.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]\n    return new_list", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/20": [{"task_id": "EvoEval/20", "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair if closest_pair[0] > closest_pair[1] else (closest_pair[1], closest_pair[0])", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/42": [{"task_id": "EvoEval/42", "solution": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 2.\"\"\"\n    return [i + 2 for i in l]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/84": [{"task_id": "EvoEval/84", "solution": "\ndef solve(N):\n    sum_of_digits = sum((int(digit) for digit in str(N)))\n    return hex(sum_of_digits)[2:]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/96": [{"task_id": "EvoEval/96", "solution": "\ndef count_up_to(n):\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = [i for i in range(n, 0, -1) if is_prime(i)]\n    return primes", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/97": [{"task_id": "EvoEval/97", "solution": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the sum of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 10.\n    multiply(19, 28) should return 17.\n    multiply(2020, 1851) should return 1.\n    multiply(14,-15) should return 9.\n    \"\"\"\n    a_last_digit = abs(a) % 10\n    b_last_digit = abs(b) % 10\n    return a_last_digit + b_last_digit", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/37": [{"task_id": "EvoEval/37", "solution": "\n\ndef sort_even(l: list):\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort(reverse=True)\n    for i in range(0, len(l), 2):\n        l[i] = even_indices[i // 2]\n    return l", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/30": [{"task_id": "EvoEval/30", "solution": "\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list in ascending order.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [1, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n    return sorted([i for i in l if i > 0])", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/46": [{"task_id": "EvoEval/46", "solution": "\ndef fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4])\n    return str(fib[n])", "base_status": "fail", "plus_status": null, "base_fail_tests": [[1]], "plus_fail_tests": []}], "EvoEval/3": [{"task_id": "EvoEval/3", "solution": "\nfrom typing import List\n\n\ndef below_one(operations: List[int]) -> bool:\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/21": [{"task_id": "EvoEval/21", "solution": "\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    rescaled_numbers = [(num - min_val) / range_val for num in numbers]\n    return sorted(rescaled_numbers, reverse=True)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/68": [{"task_id": "EvoEval/68", "solution": "\ndef pluck(arr):\n    min_odd = float('inf')\n    min_index = float('inf')\n    for (i, num) in enumerate(arr):\n        if num % 2 != 0 and num < min_odd:\n            min_odd = num\n            min_index = i\n    if min_odd == float('inf'):\n        return []\n    else:\n        return [min_index, min_odd]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/27": [{"task_id": "EvoEval/27", "solution": "\ndef flip_case(string: str, exclusive_case: str='lower') -> str:\n    result = ''\n    for char in string:\n        if exclusive_case == 'lower' and char.isupper():\n            result += char.lower()\n        elif exclusive_case == 'upper' and char.islower():\n            result += char.upper()\n        else:\n            result += char.swapcase()\n    return result", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Hello!", "lower"]], "plus_fail_tests": []}], "EvoEval/23": [{"task_id": "EvoEval/23", "solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string plus 1\n    >>> strlen('')\n    1\n    >>> strlen('abc')\n    4\n    \"\"\"\n    return len(string) + 1", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/11": [{"task_id": "EvoEval/11", "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    xor_result = int(a, 2) ^ int(b, 2)\n    binary_result = bin(xor_result)[2:]\n    return binary_result[::-1]", "base_status": "fail", "plus_status": null, "base_fail_tests": [["111000", "101010"]], "plus_fail_tests": []}], "EvoEval/1": [{"task_id": "EvoEval/1", "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            group = ''\n            while stack[-1] != '(':\n                group = stack.pop() + group\n            stack[-1] = '(' + group + ')'\n            groups.append(stack.pop())\n    return sorted(groups)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["(()()) ((())) () ((())()())"]], "plus_fail_tests": []}], "EvoEval/99": [{"task_id": "EvoEval/99", "solution": "\ndef closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it towards zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding towards zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    closest to zero. For example closest_integer(\"14.5\") should\n    return 14 and closest_integer(\"-14.5\") should return -14.\n    \"\"\"\n    value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["14.5"]], "plus_fail_tests": []}], "EvoEval/95": [{"task_id": "EvoEval/95", "solution": "\ndef check_dict_case(dict):\n    if len(dict) < 3:\n        return False\n    case = None\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if case is None:\n            case = key.islower()\n        elif key.islower() and (not case) or (not key.islower() and case):\n            return False\n    return True", "base_status": "fail", "plus_status": null, "base_fail_tests": [[{"Name": "John", "Age": "36", "City": "Houston"}]], "plus_fail_tests": []}], "EvoEval/8": [{"task_id": "EvoEval/8", "solution": "\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the non-negative integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        sum_num = 0\n        product_num = 1\n        for num in numbers:\n            if num >= 0:\n                sum_num += num\n                product_num *= num\n        return (sum_num, product_num)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/6": [{"task_id": "EvoEval/6", "solution": "\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n\n    def count_depth(s: str) -> int:\n        max_depth = current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n    return sorted([count_depth(group) for group in paren_string.split()], reverse=True)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/39": [{"task_id": "EvoEval/39", "solution": "\ndef prime_fib(n):\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        fib_num = fib(i)\n        if fib_num % 2 != 0 and is_prime(fib_num):\n            count += 1\n    return fib_num", "base_status": "fail", "plus_status": null, "base_fail_tests": [[1]], "plus_fail_tests": []}], "EvoEval/93": [{"task_id": "EvoEval/93", "solution": "\n\ndef encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                index = vowels.index(char)\n                encoded_char = vowels[(index + 3) % len(vowels)]\n                if char.isupper():\n                    encoded_char = encoded_char.upper()\n                encoded_message += encoded_char\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message", "base_status": "fail", "plus_status": null, "base_fail_tests": [["TEST"]], "plus_fail_tests": []}], "EvoEval/41": [{"task_id": "EvoEval/41", "solution": "\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of 2*n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return 0", "base_status": "fail", "plus_status": null, "base_fail_tests": [[2]], "plus_fail_tests": []}], "EvoEval/56": [{"task_id": "EvoEval/56", "solution": "\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        elif bracket == ')':\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/49": [{"task_id": "EvoEval/49", "solution": "\ndef modp(n: int, p: int, q: int) -> int:\n    \"\"\"Return 2^(n+q) modulo p (be aware of numerics).\"\"\"\n    return pow(2, n + q, p)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/9": [{"task_id": "EvoEval/9", "solution": "\nfrom typing import List, Tuple\n\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 1, 1, 1, 1, 1, 1]\n    \"\"\"\n    min_numbers = []\n    current_min = numbers[0]\n    for num in numbers:\n        if num < current_min:\n            current_min = num\n        min_numbers.append(current_min)\n    return min_numbers", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[]]], "plus_fail_tests": []}], "EvoEval/43": [{"task_id": "EvoEval/43", "solution": "\ndef pairs_sum_to_one(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/54": [{"task_id": "EvoEval/54", "solution": "\ndef same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters and the same length.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    False\n    >>> same_chars('aaaaaaabcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    False\n    >>> same_chars('eabcd', 'ddabc')\n    False\n    \"\"\"\n    return sorted(s0) == sorted(s1)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["aaaaaaabcd", "dddddddabc"]], "plus_fail_tests": []}], "EvoEval/77": [{"task_id": "EvoEval/77", "solution": "\ndef iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some positive integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> False\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    if a < 0:\n        return False\n    elif a == 0 or a == 1:\n        return True\n    else:\n        return round(a ** (1.0 / 3)) ** 3 == a", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/7": [{"task_id": "EvoEval/7", "solution": "\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring not in s]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/29": [{"task_id": "EvoEval/29", "solution": "\nfrom typing import List\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    return [s for s in strings if s.endswith(suffix)]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/64": [{"task_id": "EvoEval/64", "solution": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Alone"]], "plus_fail_tests": []}], "EvoEval/87": [{"task_id": "EvoEval/87", "solution": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: (x[0], -x[1]), reverse=True)\n    return coordinates", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/17": [{"task_id": "EvoEval/17", "solution": "\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_lengths = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    note_lengths_set = set(map(note_lengths.get, notes))\n    note_lengths_list = sorted(list(note_lengths_set), reverse=True)\n    return note_lengths_list", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/5": [{"task_id": "EvoEval/5", "solution": "\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    if numbers:\n        result.pop()\n    result.append(delimeter)\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/73": [{"task_id": "EvoEval/73", "solution": "\ndef smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/51": [{"task_id": "EvoEval/51", "solution": "\ndef remove_consonants(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels or char.isspace()])", "base_status": "fail", "plus_status": null, "base_fail_tests": [["This is a Test!"]], "plus_fail_tests": []}], "EvoEval/28": [{"task_id": "EvoEval/28", "solution": "\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string, separated by a comma.\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'a,b,c'\n    \"\"\"\n    return ','.join(strings)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/66": [{"task_id": "EvoEval/66", "solution": "\ndef digitSum(s):\n    return sum((ord(c) for c in s if c.islower()))", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/79": [{"task_id": "EvoEval/79", "solution": "\ndef decimal_to_binary(decimal):\n    binary = bin(decimal).replace('0b', '')\n    return 'db' + binary + 'bd'", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/69": [{"task_id": "EvoEval/69", "solution": "\ndef search(lst):\n    from collections import Counter\n    counter = Counter(lst)\n    for (num, freq) in sorted(counter.items()):\n        if num == freq:\n            return num\n        elif num < freq:\n            return -1\n    return -1", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[4, 1, 4, 1, 4, 4]]], "plus_fail_tests": []}], "EvoEval/86": [{"task_id": "EvoEval/86", "solution": "\ndef anti_shuffle(s):\n    words = s.split(' ')\n    new_words = []\n    for word in words:\n        new_word = ''.join(sorted(word, reverse=True))\n        new_words.append(new_word)\n    return ' '.join(new_words)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/72": [{"task_id": "EvoEval/72", "solution": "\ndef will_it_fly(q, w):\n    if q != q[::-1]:\n        return False\n    if sum(q) % 2 != 0 or sum(q) > w:\n        return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/4": [{"task_id": "EvoEval/4", "solution": "\nfrom typing import List\n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    median = np.median(numbers)\n    absolute_differences = [abs(num - median) for num in numbers]\n    mad = np.median(absolute_differences)\n    return mad", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[1.0, 2.0, 3.0]]], "plus_fail_tests": []}], "EvoEval/45": [{"task_id": "EvoEval/45", "solution": "\n\ndef triangle_perimeter(a, b, c):\n    \"\"\"Given length of three sides return perimeter for a triangle.\n    >>> triangle_perimeter(5, 3, 3)\n    11\n    \"\"\"\n    return a + b + c", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/48": [{"task_id": "EvoEval/48", "solution": "\n\ndef is_palindrome(text: str, case_sensitive: bool=True):\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/58": [{"task_id": "EvoEval/58", "solution": "\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists in descending order.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [653, 5, 1]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [3, 2]\n    \"\"\"\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1 & set2\n    return sorted(list(common_elements), reverse=True)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/18": [{"task_id": "EvoEval/18", "solution": "\ndef how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + len(substring)\n        else:\n            break\n    return count", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/53": [{"task_id": "EvoEval/53", "solution": "\ndef add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y and return the result increased by 1\n    >>> add(2, 3)\n    6\n    >>> add(5, 7)\n    13\n    \"\"\"\n    return x + y + 1", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/60": [{"task_id": "EvoEval/60", "solution": "\ndef sum_to_n(n: int, m: int=1):\n    \"\"\"sum_to_n is a function that sums numbers from m to n.\"\"\"\n    return sum(range(m, n + 1))", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/12": [{"task_id": "EvoEval/12", "solution": "\nfrom typing import List, Optional\n\n\ndef shortest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the shortest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> shortest([])\n\n    >>> shortest(['a', 'b', 'c'])\n    'a'\n    >>> shortest(['a', 'bb', 'ccc'])\n    'a'\n    \"\"\"\n    if not strings:\n        return None\n    return min(strings, key=len)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/80": [{"task_id": "EvoEval/80", "solution": "\ndef is_happy(s):\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i + 4])) != 4:\n            return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/0": [{"task_id": "EvoEval/0", "solution": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/76": [{"task_id": "EvoEval/76", "solution": "\ndef is_simple_power(x, n):\n    if x == 1:\n        return (True, 0)\n    power = 1\n    while n ** power < x:\n        power += 1\n    if n ** power == x:\n        return (True, power)\n    else:\n        return (False, None)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[2, -1]], "plus_fail_tests": []}], "EvoEval/36": [{"task_id": "EvoEval/36", "solution": "\ndef fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if i != 8:\n                count += str(i).count('8')\n    return count", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/15": [{"task_id": "EvoEval/15", "solution": "\ndef string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(1, n + 1)))", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}]}}