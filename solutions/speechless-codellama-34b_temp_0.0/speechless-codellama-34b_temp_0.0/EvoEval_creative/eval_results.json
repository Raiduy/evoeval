{"eval": {"EvoEval/92": [{"task_id": "EvoEval/92", "solution": "def paint_fountain(n):\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    layers = []\n    for i in range(n):\n        layer = ''\n        width = 2 * i + 1\n        for j in range(width):\n            if j == width // 2:\n                layer += 'A'\n            else:\n                layer += alphabet[(i + j) % 26]\n        layers.append(layer.center(width))\n    return '\\n'.join(layers)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[3]], "plus_fail_tests": []}], "EvoEval/14": [{"task_id": "EvoEval/14", "solution": "def create_alias(name: str) -> str:\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                alias += vowels[(index + 1) % len(vowels)].upper() if char.isupper() else vowels[(index + 1) % len(vowels)].lower()\n            else:\n                index = consonants.index(char.lower())\n                alias += consonants[(index + 1) % len(consonants)].upper() if char.isupper() else consonants[(index + 1) % len(consonants)].lower()\n    return alias", "base_status": "fail", "plus_status": null, "base_fail_tests": [["John Doe"]], "plus_fail_tests": []}], "EvoEval/2": [{"task_id": "EvoEval/2", "solution": "from typing import List, Union\n\ndef encrypt_message(words: List[str], key: Union[str, int]) -> List[Union[str, int]]:\n    result = []\n    for word in words:\n        new_word = ''\n        for char in word:\n            if char.isalpha():\n                shifted_char = chr((ord(char.lower()) - 96 + key) % 26 + 97)\n                new_word += shifted_char\n            else:\n                new_word += char\n        result.append(new_word)\n    return result", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["nkrru", "cuxrj"], 3]], "plus_fail_tests": []}], "EvoEval/50": [{"task_id": "EvoEval/50", "solution": "def text_to_morse(text):\n    morse_code = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': '  '}\n    morse_text = ''\n    for char in text:\n        morse_text += morse_code[char.upper()] + ' '\n    return morse_text.strip()", "base_status": "fail", "plus_status": null, "base_fail_tests": [["HELLO WORLD"]], "plus_fail_tests": []}], "EvoEval/10": [{"task_id": "EvoEval/10", "solution": "from typing import List\n\ndef count_animals(animal_string: str) -> List[int]:\n    animals = {'C': 0, 'D': 0, 'B': 0}\n    sounds = {'C': 0, 'D': 0, 'B': 0}\n    result = []\n    for animal_sound in animal_string.split():\n        animal = animal_sound[0]\n        sound_count = len(animal_sound) - 1\n        if animal in animals and animals[animal] < 2 and (sounds[animal] + sound_count <= 5):\n            sounds[animal] += sound_count\n            animals[animal] += 1\n            result.append(sound_count)\n    return result", "base_status": "fail", "plus_status": null, "base_fail_tests": [["C||| D|| B| C| K||| B|||"]], "plus_fail_tests": []}], "EvoEval/65": [{"task_id": "EvoEval/65", "solution": "def food_order(menu, order):\n    if not order:\n        return menu\n    for (food, customization) in order.items():\n        if food not in menu:\n            continue\n        ingredients = menu[food]\n        if 'remove' in customization:\n            ingredients = [ingredient for ingredient in ingredients if ingredient not in customization['remove']]\n        if 'add' in customization:\n            ingredients.extend(customization['add'])\n        menu[food] = ingredients\n    return menu", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/78": [{"task_id": "EvoEval/78", "solution": "def find_pattern(mat):\n    n = len(mat)\n    result = []\n    for i in range(n):\n        result.append(mat[i][i])\n        result.append(mat[i][n - i - 1])\n    return result", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]], "plus_fail_tests": []}], "EvoEval/32": [{"task_id": "EvoEval/32", "solution": "def playlist_shuffle(playlist: list, seed: int):\n    playlist_length = len(playlist)\n    for i in range(playlist_length):\n        if 'Rock' in playlist[i]:\n            continue\n        swap_index = seed % playlist_length\n        (playlist[i], playlist[swap_index]) = (playlist[swap_index], playlist[i])\n        seed = seed * 16807 % 2147483647\n    return playlist", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["Stairway to Heaven", "Whole Lotta Love", "Kashmir", "Rock and Roll", "D'yer Mak'er", "Immigrant Song", "When the Levee Breaks", "Black Dog", "Good Times Bad Times", "Heartbreaker"], 17]], "plus_fail_tests": []}], "EvoEval/81": [{"task_id": "EvoEval/81", "solution": "def alien_language(word_list, alien_dictionary):\n    if not word_list:\n        return 'CORRECT'\n    alien_dict = {char: i for (i, char) in enumerate(alien_dictionary)}\n    for i in range(len(word_list) - 1):\n        if sum((alien_dict[c1] > alien_dict[c2] for (c1, c2) in zip(word_list[i], word_list[i + 1]))) > 0:\n            return 'INCORRECT'\n    return 'CORRECT'", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["cat", "dog", "elephant"], "abcdefghijklmnopqrstuvwxyz"]], "plus_fail_tests": []}], "EvoEval/38": [{"task_id": "EvoEval/38", "solution": "def translate_emoticons(sentence):\n    emoticons = {':)': '\ud83d\ude0a', ':(': '\u2639\ufe0f', ':D': '\ud83d\ude00', ';)': '\ud83d\ude09'}\n    for (emoticon, emoji) in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/76": [{"task_id": "EvoEval/76", "solution": "def create_pyramid(lst):\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(len(lst)):\n        level = ''.join(['#' for _ in range(sum(lst[:i + 1]))])\n        pyramid.append(level)\n    return pyramid", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[3, 2, 1]]], "plus_fail_tests": []}], "EvoEval/91": [{"task_id": "EvoEval/91", "solution": "def spaceship_trajectory(spaceship_data):\n    status = 'On Ground'\n    for (action, distance) in spaceship_data:\n        if action == 'Launch' and status == 'On Ground':\n            status = 'In Space'\n        elif action == 'Move' and status == 'In Space':\n            pass\n        elif action == 'Land' and status == 'In Space':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/47": [{"task_id": "EvoEval/47", "solution": "def recipe_ingredients(recipe, available):\n    for (ingredient, quantity) in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/85": [{"task_id": "EvoEval/85", "solution": "def princess_rescue(coord, grid):\n    min_moves = float('inf')\n\n    def dfs(row, col, moves):\n        if row < 0 or col < 0 or row >= len(grid) or (col >= len(grid[0])) or (grid[row][col] == 1):\n            return\n        if (row, col) == coord:\n            nonlocal min_moves\n            min_moves = min(min_moves, moves)\n            return\n        dfs(row - 1, col, moves + 1)\n        dfs(row, col - 1, moves + 1)\n    dfs(0, 0, 0)\n    return min_moves if min_moves != float('inf') else -1", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[2, 2], [[0, 0, 0], [0, 1, 0], [0, 0, 0]]]], "plus_fail_tests": []}], "EvoEval/44": [{"task_id": "EvoEval/44", "solution": "def fairy_tale_transport(q, w, e):\n    total_weight = sum(q)\n    unicorn_capacity = w\n    dragon_griffin_capacity = e\n    if total_weight <= unicorn_capacity + dragon_griffin_capacity:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/74": [{"task_id": "EvoEval/74", "solution": "def cipher_mapping(s, cipher):\n    new_s = ''\n    for char in s:\n        if char in cipher:\n            new_s += cipher[char]\n        else:\n            new_s += char\n    return new_s", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/19": [{"task_id": "EvoEval/19", "solution": "def vampires_in_matrix(m: list):\n    num_vampires = 0\n    num_humans = 0\n    for row in m:\n        for cell in row:\n            if cell == 2:\n                num_vampires += 1\n            elif cell == 1:\n                num_humans += 1\n    if num_vampires == 0:\n        return 0\n    else:\n        return num_humans", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[[1], [2, 1], [1, 1]]]], "plus_fail_tests": []}], "EvoEval/63": [{"task_id": "EvoEval/63", "solution": "def create_pyramid(p):\n    layers = [p]\n    while p > 0:\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        layers.append(p)\n    return layers[::-1]", "base_status": "fail", "plus_status": null, "base_fail_tests": [[10]], "plus_fail_tests": []}], "EvoEval/88": [{"task_id": "EvoEval/88", "solution": "def planet_population(dict_of_planets):\n    result = {}\n    for (planet, data) in dict_of_planets.items():\n        if len(data) == 2 and data[0] is not None and (data[1] is not None):\n            result[planet] = round(data[0] / data[1], 2)\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/59": [{"task_id": "EvoEval/59", "solution": "def cooking_challenge(ingredient_dict):\n    if not ingredient_dict:\n        return []\n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_ingredients", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/89": [{"task_id": "EvoEval/89", "solution": "def space_invaders(aliens, ray):\n    remaining_aliens = []\n    for i in range(len(aliens)):\n        if aliens[i] % 2 == 0 and aliens[i] != ray:\n            remaining_aliens.append(aliens[i])\n        elif aliens[i] == ray:\n            remaining_aliens.remove(aliens[i])\n            if i > 0 and aliens[i - 1] % 2 == 0:\n                remaining_aliens.remove(aliens[i - 1])\n            if i < len(aliens) - 1 and aliens[i + 1] % 2 == 0:\n                remaining_aliens.remove(aliens[i + 1])\n    return remaining_aliens", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[1, 2, 3, 4, 5], 3]], "plus_fail_tests": []}], "EvoEval/75": [{"task_id": "EvoEval/75", "solution": "def magical_string_transformer(input_str):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    digits = '0123456789'\n    punctuation = '!@#$%^&*()-_=+[]{}|;:,.<>/?`~'\n    transformed_str = ''\n    for (i, char) in enumerate(input_str):\n        if char.lower() in vowels:\n            transformed_str += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            transformed_str += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        elif char in digits:\n            transformed_str += str((int(char) + 1) % 10)\n        elif char in punctuation:\n            if i % 2 == 0:\n                transformed_str += char\n            else:\n                transformed_str += '!' if char == '?' else '?'\n        else:\n            transformed_str += char\n    return transformed_str", "base_status": "fail", "plus_status": null, "base_fail_tests": [["?!AEIOUaeiou"]], "plus_fail_tests": []}], "EvoEval/26": [{"task_id": "EvoEval/26", "solution": "def pathfinder(maze, start, end):\n    directions = []\n    if start == end:\n        return []\n    elif maze[start[0]][start[1]] == 1:\n        return []\n    elif start[0] < end[0]:\n        directions.append('down')\n        start = (start[0] + 1, start[1])\n    elif start[0] > end[0]:\n        directions.append('up')\n        start = (start[0] - 1, start[1])\n    elif start[1] < end[1]:\n        directions.append('right')\n        start = (start[0], start[1] + 1)\n    elif start[1] > end[1]:\n        directions.append('left')\n        start = (start[0], start[1] - 1)\n    else:\n        return []\n    return directions + pathfinder(maze, start, end)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[[0, 0, 0], [1, 1, 0], [1, 1, 0]], [0, 0], [2, 2]]], "plus_fail_tests": []}], "EvoEval/55": [{"task_id": "EvoEval/55", "solution": "def treasure_map(message, shift):\n    result = ''\n    for (i, char) in enumerate(message):\n        if char.isalpha():\n            shift_amount = shift + i\n            if char.islower():\n                result += chr((ord(char) - 97 + shift_amount) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + shift_amount) % 26 + 65)\n        else:\n            result += char\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/70": [{"task_id": "EvoEval/70", "solution": "def planet_path(planets, path):\n    if not path or not planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i + 1] not in planets[path[i]]:\n            return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/98": [{"task_id": "EvoEval/98", "solution": "def nature_sequence_generator(n, a, b):\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i - 1] + sequence[i - 2] + 1\n        sequence.append(next_num)\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n    return sequence", "base_status": "fail", "plus_status": null, "base_fail_tests": [[5, 1, 2]], "plus_fail_tests": []}], "EvoEval/22": [{"task_id": "EvoEval/22", "solution": "def galactic_travel(t, v):\n    \"\"\"Given the time (t) in years and average velocity (v) in km/s, calculate the distance traveled in light years in a galaxy far, far away.\n    Assume that 1 light year is approximately 9.461 x 10^12 km.\n\n    >>> galactic_travel(1, 300000)\n    0.9999788605855617\n    \"\"\"\n    distance_km = t * v * 3600 * 24 * 365.25\n    distance_ly = distance_km / 9461000000000.0\n    return distance_ly", "base_status": "fail", "plus_status": null, "base_fail_tests": [[1, 300000]], "plus_fail_tests": []}], "EvoEval/57": [{"task_id": "EvoEval/57", "solution": "def magical_cafe(menu, magic_spell):\n    new_menu = {}\n    for (dish, price) in menu.items():\n        new_dish = ''\n        for i in range(len(dish)):\n            new_dish += magic_spell[i % len(magic_spell)]\n        new_menu[new_dish] = price\n    return new_menu", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/83": [{"task_id": "EvoEval/83", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    vowel_list = [c for c in s if c in vowels]\n    vowel_list.reverse()\n    result = ''\n    vowel_index = 0\n    for c in s:\n        if c in vowels:\n            result += vowel_list[vowel_index]\n            vowel_index += 1\n        else:\n            result += c\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/82": [{"task_id": "EvoEval/82", "solution": "def zodiac_element(birthdays):\n    if not birthdays:\n        return None\n    zodiac_signs = {'Aries': 'Fire', 'Taurus': 'Earth', 'Gemini': 'Air', 'Cancer': 'Water', 'Leo': 'Fire', 'Virgo': 'Earth', 'Libra': 'Air', 'Scorpio': 'Water', 'Sagittarius': 'Fire', 'Capricorn': 'Earth', 'Aquarius': 'Air', 'Pisces': 'Water'}\n    element_count = {'Fire': 0, 'Water': 0, 'Air': 0, 'Earth': 0}\n    for birthday in birthdays:\n        month = int(birthday.split('-')[1])\n        day = int(birthday.split('-')[2])\n        if month == 3 and day >= 21 or (month == 4 and day <= 19):\n            element_count[zodiac_signs['Aries']] += 1\n        elif month == 4 and day >= 20 or (month == 5 and day <= 20):\n            element_count[zodiac_signs['Taurus']] += 1\n        elif month == 5 and day >= 21 or (month == 6 and day <= 20):\n            element_count[zodiac_signs['Gemini']] += 1\n        elif month == 6 and day >= 21 or (month == 7 and day <= 22):\n            element_count[zodiac_signs['Cancer']] += 1\n        elif month == 7 and day >= 23 or (month == 8 and day <= 22):\n            element_count[zodiac_signs['Leo']] += 1", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["2000-03-21", "2001-05-21", "2002-08-23", "2003-02-19"]]], "plus_fail_tests": []}], "EvoEval/96": [{"task_id": "EvoEval/96", "solution": "def get_magic_indices(lst):\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and prod_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[0, 7, -6, 12, -20, 5, -7]]], "plus_fail_tests": []}], "EvoEval/94": [{"task_id": "EvoEval/94", "solution": "def spell_casting(strings):\n    result = []\n    for spell in strings:\n        words = spell.split()\n        words.sort(key=len)\n        result.append(' '.join(words))\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/25": [{"task_id": "EvoEval/25", "solution": "def word_frequency_analysis(text: str, word: str):\n    sentences = text.split('. ')\n    word_count = 0\n    max_count = 0\n    max_sentence = ''\n    for sentence in sentences:\n        if word in sentence:\n            count = sentence.count(word)\n            word_count += count\n            if count > max_count:\n                max_count = count\n                max_sentence = sentence\n    return (word_count, max_sentence)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Hello world. I love this world.", ""]], "plus_fail_tests": []}], "EvoEval/24": [{"task_id": "EvoEval/24", "solution": "def alien_language_translator(english_word: str) -> str:\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    return ''.join((alien_dict[char] for char in english_word))", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/62": [{"task_id": "EvoEval/62", "solution": "def recipe_converter(recipe, conversion_factor):\n    \"\"\"\n    Write a function that takes a dictionary representing a recipe as input \n    where the keys are the ingredients and the values are the quantities \n    needed for one serving. The function should also take a conversion factor \n    which represents the number of servings required. The function should \n    return a new dictionary where the quantities of each ingredient are \n    multiplied by the conversion factor.\n\n    The quantities in the recipe are integers and the conversion factor is a \n    positive integer. \n\n    Examples:\n    >>> recipe_converter({\"flour\": 500, \"sugar\": 200, \"eggs\": 3}, 2)\n    {'flour': 1000, 'sugar': 400, 'eggs': 6}\n    >>> recipe_converter({\"milk\": 250, \"chocolate\": 75, \"butter\": 50}, 3)\n    {'milk': 750, 'chocolate': 225, 'butter': 150}\n    \"\"\"\n    new_recipe = {}\n    for (ingredient, quantity) in recipe.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/52": [{"task_id": "EvoEval/52", "solution": "def magic_cookie_baker(n, m, orders):\n    orders.sort(reverse=True)\n    count = 0\n    for order in orders:\n        if order <= n * m:\n            count += 1\n            m -= 1\n        else:\n            break\n    return count", "base_status": "fail", "plus_status": null, "base_fail_tests": [[5, 3, [7, 9, 11, 13, 15]]], "plus_fail_tests": []}], "EvoEval/34": [{"task_id": "EvoEval/34", "solution": "def werewolf_transformation(n: int, m: int) -> list:\n    transformation_percentages = [0] * n\n    for i in range(1, n):\n        if i == m:\n            transformation_percentages[i] = min(100, transformation_percentages[i - 1] * 2)\n        elif i < m:\n            transformation_percentages[i] = min(100, transformation_percentages[i - 1] + 10)\n        else:\n            transformation_percentages[i] = max(0, transformation_percentages[i - 1] - 10)\n    return transformation_percentages", "base_status": "fail", "plus_status": null, "base_fail_tests": [[5, 3]], "plus_fail_tests": []}], "EvoEval/61": [{"task_id": "EvoEval/61", "solution": "def transform_string(s):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    next_vowel = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a', 'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A'}\n    prev_consonant = {'b': 'z', 'c': 'b', 'd': 'c', 'f': 'd', 'g': 'f', 'h': 'g', 'j': 'h', 'k': 'j', 'l': 'k', 'm': 'l', 'n': 'm', 'p': 'n', 'q': 'p', 'r': 'q', 's': 'r', 't': 's', 'v': 't', 'w': 'v', 'x': 'w', 'y': 'x', 'z': 'y', 'B': 'Z', 'C': 'B', 'D': 'C', 'F': 'D', 'G': 'F', 'H': 'G', 'J': 'H', 'K': 'J', 'L': 'K', 'M': 'L', 'N': 'M', 'P': 'N', 'Q': 'P', 'R': 'Q', 'S': 'R', 'T': 'S', 'V': 'T', 'W': 'V', 'X': 'W', 'Y': 'X', 'Z': 'Y'}\n    result = []\n    for (i, c) in enumerate(s):\n        if c.isalpha():\n            if i % 2 == 0:\n                result.append(c.swapcase())\n            elif c in vowels:\n                result.append(next_vowel[c])\n            else:\n                result.append(prev_consonant[c])\n        else:\n            result.append(c)\n    return ''.join(result)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Hello World"]], "plus_fail_tests": []}], "EvoEval/35": [{"task_id": "EvoEval/35", "solution": "def validate_email_structure(email: str) -> bool:\n    \"\"\"\n    email is a string.\n    return True if the email has a valid format (i.e., there is exactly one \"@\" character that is not the first or last character\n    and there is at least one \".\" character after the \"@\" character).\n    \"\"\"\n    if email.count('@') != 1:\n        return False\n    if email[0] == '@' or email[-1] == '@':\n        return False\n    if email.find('@') == len(email) - 1:\n        return False\n    if email.find('.') < email.find('@'):\n        return False\n    return True", "base_status": "fail", "plus_status": null, "base_fail_tests": [[".myemail@domain.com"]], "plus_fail_tests": []}], "EvoEval/16": [{"task_id": "EvoEval/16", "solution": "def fibonacci_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        (a, b) = (0, 1)\n        total = 0\n        for i in range(n):\n            total += a\n            (a, b) = (b, a + b)\n        return total", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/40": [{"task_id": "EvoEval/40", "solution": "def potion_mixing(potions, target):\n    potion_dict = {}\n    for potion in potions:\n        (name, power) = potion.split()\n        potion_dict[name] = int(power)\n    combinations = []\n    for (name, power) in potion_dict.items():\n        if power == target:\n            combinations.append([name])\n            continue\n        if power < target:\n            for (other_name, other_power) in potion_dict.items():\n                if name != other_name:\n                    if power + other_power == target:\n                        combinations.append([name, other_name])\n                        continue\n    combinations.sort(key=lambda x: (len(x), ''.join(x)))\n    if combinations:\n        return combinations[0]\n    else:\n        return []", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["Healing Potion 10", "Strength Potion 5", "Invisibility Potion 7"], 15]], "plus_fail_tests": []}], "EvoEval/13": [{"task_id": "EvoEval/13", "solution": "\nfrom typing import List\n\ndef find_rarest_element(elems: List[str]) -> str:\n    if not elems:\n        return None\n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    rarest_count = min(counts.values())\n    for (elem, count) in counts.items():\n        if count == rarest_count:\n            return elem", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/71": [{"task_id": "EvoEval/71", "solution": "def letter_shift_cipher(s, n):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encrypted_string = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr((ord(char.lower()) - 97 + n) % 26 + 97)\n            if char.isupper():\n                shifted_char = shifted_char.upper()\n            encrypted_string += shifted_char\n            if shifted_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n    return (encrypted_string, vowel_count)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/42": [{"task_id": "EvoEval/42", "solution": "def find_legendary_item(player_input):\n    legendary_acquired = False\n    second_most_valuable_rarity = -1\n    for item in player_input:\n        if item == 5:\n            legendary_acquired = True\n        elif item > second_most_valuable_rarity:\n            second_most_valuable_rarity = item\n    return (legendary_acquired, second_most_valuable_rarity)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[1, 3, 4]]], "plus_fail_tests": []}], "EvoEval/90": [{"task_id": "EvoEval/90", "solution": "def magical_multiply(s1, s2):\n    num1 = int(s1)\n    num2 = int(s2)\n    combinations = []\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            combinations.append(int(s1[i]) * int(s2[j]))\n    return sum(set(combinations))", "base_status": "fail", "plus_status": null, "base_fail_tests": [["24", "13"]], "plus_fail_tests": []}], "EvoEval/33": [{"task_id": "EvoEval/33", "solution": "def magical_staircase(n: int, magic_stones: list):\n    ways = [0] * (n + 1)\n    ways[0] = 1\n    for power in magic_stones:\n        for i in range(power, n + 1):\n            ways[i] += ways[i - power]\n    return ways[n]", "base_status": "fail", "plus_status": null, "base_fail_tests": [[4, [1, 2]]], "plus_fail_tests": []}], "EvoEval/67": [{"task_id": "EvoEval/67", "solution": "def meal_calculator(customers, meals):\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = 0\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n            result[customer] = total_calories\n        else:\n            result[customer] = 0\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/15": [{"task_id": "EvoEval/15", "solution": "def evaluate_poker_hand(hand: list):\n    card_freq = {}\n    for card in hand:\n        value = card[:-1]\n        if value.isdigit():\n            value = int(value)\n        if value not in card_freq:\n            card_freq[value] = 0\n        card_freq[value] += 1\n    score = 0\n    for (value, freq) in card_freq.items():\n        if freq == 2:\n            score += value\n        elif freq == 3:\n            score += 2 * value\n        elif freq == 4:\n            score += 3 * value\n        elif freq == 5:\n            score += 4 * value\n    return score", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["KH", "KD", "KS", "KC", "KA"]]], "plus_fail_tests": []}], "EvoEval/20": [{"task_id": "EvoEval/20", "solution": "def generate_pattern(n: int):\n    if n <= 0:\n        return []\n    else:\n        pattern = []\n        for i in range(1, n + 1):\n            pattern.append(','.join((str(j) for j in range(1, i + 1))))\n        for i in range(n - 1, 0, -1):\n            pattern.append(','.join((str(j) for j in range(i, 0, -1))))\n        return pattern", "base_status": "fail", "plus_status": null, "base_fail_tests": [[3]], "plus_fail_tests": []}], "EvoEval/37": [{"task_id": "EvoEval/37", "solution": "def string_transform(s):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper() if char.isupper() else vowels[(vowels.index(char.lower()) + 1) % len(vowels)].lower()\n            elif char.lower() in consonants:\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper() if char.isupper() else consonants[(consonants.index(char.lower()) + 1) % len(consonants)].lower()\n        else:\n            transformed += char\n    return transformed", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/30": [{"task_id": "EvoEval/30", "solution": "from typing import List, Tuple\n\ndef find_path(maze: List[List[int]], start: Tuple[int], end: Tuple[int]) -> List[Tuple[int]]:\n\n    def is_valid(x, y):\n        return 0 <= x < len(maze) and 0 <= y < len(maze[0]) and (maze[x][y] == 1)\n\n    def bfs():\n        queue = [(start, [start])]\n        visited = set([start])\n        while queue:\n            ((x, y), path) = queue.pop(0)\n            if (x, y) == end:\n                return path\n            for (dx, dy) in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n                (nx, ny) = (x + dx, y + dy)\n                if is_valid(nx, ny) and (nx, ny) not in visited:\n                    visited.add((nx, ny))\n                    queue.append(((nx, ny), path + [(nx, ny)]))\n        return []\n    return bfs()", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/84": [{"task_id": "EvoEval/84", "solution": "def tree_traversal(tree):\n\n    def dfs(node, path):\n        if not tree[node]:\n            paths.append(path + [node])\n            return\n        for child in tree[node]:\n            dfs(child, path + [node])\n    paths = []\n    dfs(list(tree.keys())[0], [])\n    return paths", "base_status": "fail", "plus_status": null, "base_fail_tests": [[{"1": {"2": {"4": {}, "5": {}}, "3": {"6": {}, "7": {}}}}]], "plus_fail_tests": []}], "EvoEval/21": [{"task_id": "EvoEval/21", "solution": "def crossword_validator(grid: list, words: list):\n    n = len(grid)\n    for word in words:\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == word[0]:\n                    if i > 0 and grid[i - 1][j] == word[1]:\n                        if i > 1 and grid[i - 2][j] == word[2]:\n                            if i > 2 and grid[i - 3][j] == word[3]:\n                                return True\n                        elif j > 0 and grid[i][j - 1] == word[1]:\n                            if j > 1 and grid[i][j - 2] == word[2]:\n                                if j > 2 and grid[i][j - 3] == word[3]:\n                                    return True\n                    elif j > 0 and grid[i][j - 1] == word[1]:\n                        if j > 1 and grid[i][j - 2] == word[2]:\n                            if j > 2 and grid[i][j - 3] == word[3]:\n                                return True\n                    elif i < n - 1 and grid[i + 1][j] == word[1]:\n                        if i < n - 2 and grid[i + 2][j] == word[2]:\n                            if i < n - 3 and grid[i + 3][j] == word[3]:\n                                return True\n                    elif j < n - 1 and grid[i][j + 1] == word[1]:\n                        if j < n - 2 and grid[i][j + 2] == word[2]:\n                            if j < n - 3 and grid[i][j + 3] == word[3]:\n                                return True\n    return False", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[["c", "a", "t"], ["d", "o", "g"], ["d", "o", "p"]], ["cdd", "dog", "pod"]]], "plus_fail_tests": []}], "EvoEval/3": [{"task_id": "EvoEval/3", "solution": "from typing import List\n\ndef magical_alphabet(input_string: str) -> List[str]:\n\n    def helper(index, current):\n        if index == len(input_string):\n            result.append(current)\n            return\n        for i in range(1, 4):\n            if index + i <= len(input_string):\n                num = int(input_string[index:index + i])\n                if 1 <= num <= 26:\n                    helper(index + i, current + chr(ord('a') + num - 1))\n    result = []\n    helper(0, '')\n    return result", "base_status": "fail", "plus_status": null, "base_fail_tests": [["101"]], "plus_fail_tests": []}], "EvoEval/97": [{"task_id": "EvoEval/97", "solution": "def alien_invasion(alien, humans):\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    continents = ['Asia', 'Africa', 'Europe', 'North America', 'South America']\n    encounter_order = []\n    for continent in continents:\n        for (human, human_continent) in humans.items():\n            if human_continent == continent:\n                encounter_order.append(human)\n    return encounter_order", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/68": [{"task_id": "EvoEval/68", "solution": "def magical_sorting(arr):\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr[i] > arr[(i + 1) % len(arr)]:\n                (arr[i], arr[(i + 1) % len(arr)]) = (arr[(i + 1) % len(arr)], arr[i])\n                break\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n        return True", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[3, 4, 5, 1, 2]]], "plus_fail_tests": []}], "EvoEval/46": [{"task_id": "EvoEval/46", "solution": "def hidden_message(test_cases):\n    secret_messages = []\n    for test_case in test_cases:\n        secret_message = ''\n        for word in test_case:\n            secret_message += word[0]\n        if 'cannoli' in secret_message.lower():\n            secret_message = 'Take the cannoli.'\n        secret_messages.append(secret_message.lower())\n    return secret_messages", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[["apple"], ["Banana", "grape", "kiwi", "melon"]]]], "plus_fail_tests": []}], "EvoEval/23": [{"task_id": "EvoEval/23", "solution": "def prime_cipher(s: str):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = ''\n    for char in s:\n        if char.islower() and char.isalpha():\n            result += str(primes[ord(char) - ord('a') + 1])\n        else:\n            result += char\n    return result", "base_status": "fail", "plus_status": null, "base_fail_tests": [["hello"]], "plus_fail_tests": []}], "EvoEval/27": [{"task_id": "EvoEval/27", "solution": "def split_strings(s: str, n: int) -> list:\n    return [s[i:i + n] for i in range(0, len(s), n)]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/8": [{"task_id": "EvoEval/8", "solution": "def transform_canvas(canvas: str) -> str:\n    if canvas.count('P') > 1 or canvas.count('-') % canvas.count('P') == 0:\n        return 'Invalid canvas'\n    if 'P' not in canvas:\n        return canvas\n    start_index = canvas.index('P')\n    painted = set()\n    for i in range(start_index, len(canvas)):\n        if canvas[i] == '-':\n            painted.add(i)\n            if i + 1 < len(canvas) and canvas[i + 1] != '#':\n                painted.add(i + 1)\n            if i - 1 >= 0 and canvas[i - 1] != '#':\n                painted.add(i - 1)\n    for i in painted:\n        canvas = canvas[:i] + '*' + canvas[i + 1:]\n    return canvas", "base_status": "fail", "plus_status": null, "base_fail_tests": [["P----#-----#-----#-----"]], "plus_fail_tests": []}], "EvoEval/1": [{"task_id": "EvoEval/1", "solution": "from typing import List, Union\n\ndef calculate_shipping_cost(items: List[Union[str, float]], location: str) -> float:\n    base_cost = 5.0\n    additional_charge = 10.0\n    local_factor = 1.0\n    national_factor = 1.5\n    international_factor = 2.5\n    total_weight = 0\n    for item in items:\n        if isinstance(item, str):\n            total_weight += 1\n        else:\n            total_weight += item\n    if total_weight > 5:\n        base_cost += additional_charge\n    if location == 'Local':\n        factor = local_factor\n    elif location == 'National':\n        factor = national_factor\n    elif location == 'International':\n        factor = international_factor\n    else:\n        factor = local_factor\n    total_cost = base_cost * len(items) * factor\n    return round(total_cost, 2)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[3.0, "Book", 7.0], "National"]], "plus_fail_tests": []}], "EvoEval/99": [{"task_id": "EvoEval/99", "solution": "def musical_chairs(n, rounds, music):\n    players = list(range(1, n + 1))\n    for round_time in rounds:\n        for _ in range(round_time):\n            players.insert(0, players.pop())\n        players.pop(0)\n    return players", "base_status": "fail", "plus_status": null, "base_fail_tests": [[5, [2, 3, 4], 1]], "plus_fail_tests": []}], "EvoEval/95": [{"task_id": "EvoEval/95", "solution": "def matrixMystery(m):\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    diagonal1_sum = 0\n    diagonal2_sum = 0\n    for i in range(len(m)):\n        diagonal1_sum += m[i][i]\n        diagonal2_sum += m[i][len(m) - i - 1]\n    return abs(diagonal1_sum - diagonal2_sum)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/11": [{"task_id": "EvoEval/11", "solution": "from typing import List\n\ndef fruity_messages(fruits: List[str], location: str) -> str:\n    if len(fruits) == 1:\n        return f'Oh, are those {fruits[0]} from {location}? Marvelous!'\n    elif len(fruits) == 2:\n        return f'Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!'\n    else:\n        return f'Oh, are those {fruits[0]}, {fruits[1]} and {fruits[2]} from {location}? Marvelous!'", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["strawberries", "pineapples", "kiwis", "guavas", "papayas", "peaches", "grapes", "oranges", "apples"], "California"]], "plus_fail_tests": []}], "EvoEval/6": [{"task_id": "EvoEval/6", "solution": "from typing import List, Tuple\n\ndef minesweeper_clicked(grid: List[List[int]], position: Tuple[int, int]) -> List[List[int]]:\n    (x, y) = position\n    if x < 0 or y < 0 or x >= len(grid) or (y >= len(grid[0])):\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    if grid[x][y] == 0:\n        return grid\n    grid[x][y] = 0\n    for (dx, dy) in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]:\n        (nx, ny) = (x + dx, y + dy)\n        if nx >= 0 and ny >= 0 and (nx < len(grid)) and (ny < len(grid[0])) and (grid[nx][ny] != 1):\n            minesweeper_clicked(grid, (nx, ny))\n    return grid", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/43": [{"task_id": "EvoEval/43", "solution": "def space_travel(distance, speed, fuel, planet_gravity, spaceship_weight):\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    trip_duration = distance / speed\n    if fuel >= trip_duration:\n        remaining_fuel = round(fuel - trip_duration - fuel_consumption, 2)\n        return remaining_fuel\n    else:\n        return 'Insufficient fuel'", "base_status": "fail", "plus_status": null, "base_fail_tests": [[4.22, 0.5, 10, 9.8, 100]], "plus_fail_tests": []}], "EvoEval/39": [{"task_id": "EvoEval/39", "solution": "def asciiArt(n, s):\n    s_len = len(s)\n    rows = []\n    rows.append('*' + s * n + '*')\n    for i in range(s_len):\n        row = '*'\n        for j in range(s_len):\n            if i == 0 or i == s_len - 1 or j == 0 or (j == s_len - 1):\n                row += '*'\n            else:\n                row += s[j] * n\n        rows.append(row)\n    rows.append('*' + s * n + '*')\n    return '\\n'.join(rows)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[1, "abc"]], "plus_fail_tests": []}], "EvoEval/56": [{"task_id": "EvoEval/56", "solution": "def str_to_morse_code(s):\n    morse_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    morse_code = ''\n    for char in s:\n        if char == ' ':\n            morse_code += ' / '\n        else:\n            morse_code += morse_dict[char] + ' '\n    return morse_code", "base_status": "fail", "plus_status": null, "base_fail_tests": [["hello world"]], "plus_fail_tests": []}], "EvoEval/93": [{"task_id": "EvoEval/93", "solution": "def secret_code(message, n_values):\n    result = ''\n    for (i, char) in enumerate(message):\n        if char.isalpha():\n            n = n_values[i % len(n_values)]\n            new_char = chr((ord(char.lower()) - 96 + n) % 26 + 97)\n            if char.isupper():\n                new_char = new_char.upper()\n            result += new_char\n        else:\n            result += char\n    return result", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Hello", [1, 2, 3, 4, 5]]], "plus_fail_tests": []}], "EvoEval/29": [{"task_id": "EvoEval/29", "solution": "def find_palindrome_substrings(s: str):\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if substring == substring[::-1]:\n                substrings.add(substring)\n    return sorted(list(substrings))", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/41": [{"task_id": "EvoEval/41", "solution": "def spider_web_jump(arr):\n    n = len(arr)\n    m = len(arr[0])\n    dp = [[float('inf')] * m for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(m):\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + arr[i - 1][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j - 1] + arr[i][j - 1])\n    return dp[n - 1][m - 1]", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[[0, 2, 3, 4, 5], [1, 1, 1, 1, 1]]]], "plus_fail_tests": []}], "EvoEval/49": [{"task_id": "EvoEval/49", "solution": "def morse_decoder(msg):\n    morse_dict = {'01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '0111': 'I', '101': 'J', '0100': 'K', '11': 'L', '10': 'M', '111': 'N', '1111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '11111': '1', '00111': '2', '00011': '3', '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8', '11110': '9', '11111': '0'}\n    words = msg.split('/')\n    decoded_words = []\n    for word in words:\n        decoded_word = ''\n        characters = word.split()\n        for character in characters:\n            decoded_word += morse_dict[character]\n        decoded_words.append(decoded_word)\n    return ' '.join(decoded_words)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["010101/01 1010 0 110 0"]], "plus_fail_tests": []}], "EvoEval/9": [{"task_id": "EvoEval/9", "solution": "\ndef calculate_word_frequency(string: str) -> dict:\n    string = re.sub('[^\\\\w\\\\s]', '', string).lower()\n    words = string.split()\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return word_freq", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Hello, World! Hello Again."]], "plus_fail_tests": []}], "EvoEval/7": [{"task_id": "EvoEval/7", "solution": "def find_shangri_la(code_sequence: list[int]) -> str:\n    (x, y) = (0, 0)\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[]]], "plus_fail_tests": []}], "EvoEval/73": [{"task_id": "EvoEval/73", "solution": "def treasure_hunt(grid, bag_capacity):\n    import math\n    num_chambers = len(grid)\n    num_chests = len(grid[0])\n    num_trips = 0\n    for i in range(num_chambers):\n        for j in range(num_chests):\n            if grid[i][j] == 1:\n                num_trips += math.ceil((num_chests - j) / bag_capacity) + 1\n    return num_trips", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1]], "plus_fail_tests": []}], "EvoEval/87": [{"task_id": "EvoEval/87", "solution": "def word_spiral(arr):\n    if not arr:\n        return ''\n    result = ''\n    row_start = 0\n    row_end = len(arr) - 1\n    col_start = 0\n    col_end = len(arr[0]) - 1\n    while row_start <= row_end and col_start <= col_end:\n        for i in range(col_start, col_end + 1):\n            result += arr[row_start][i]\n        row_start += 1\n        for i in range(row_start, row_end + 1):\n            result += arr[i][col_end]\n        col_end -= 1\n        if row_start <= row_end:\n            for i in range(col_end, col_start - 1, -1):\n                result += arr[row_end][i]\n            row_end -= 1\n        if col_start <= col_end:\n            for i in range(row_end, row_start - 1, -1):\n                result += arr[i][col_start]\n            col_start += 1\n    return result", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[["t", "h", "i", "s", "f", "u", "n", "c", "t", "i", "o", "n", "t", "e", "s", "t"], ["a", "n", "i", "s", "r", "e", "a", "l", "l", "y", "g", "o", "o", "d", "o", "n"], ["t", "i", "m", "e", "t", "o", "s", "e", "e", "i", "f", "i", "t", "p", "a", "s", "s"], ["e", "s", "t", "r", "t", "h", "i", "s", "p", "r", "o", "g", "r", "a", "m", "m", "e"]]]], "plus_fail_tests": []}], "EvoEval/17": [{"task_id": "EvoEval/17", "solution": "def wizard_battle(dragon_hp: int, wizards: list) -> str:\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/5": [{"task_id": "EvoEval/5", "solution": "from typing import List, Tuple\n\n\ndef zigzag_traversal(matrix: List[List[int]]) -> List[int]:\n    result = []\n    row = 0\n    col = 0\n    direction = (1, 1)\n    while len(result) < len(matrix) * len(matrix[0]):\n        result.append(matrix[row][col])\n        if direction == (1, 1) and (col == len(matrix[0]) - 1 or row == len(matrix) - 1):\n            if col == len(matrix[0]) - 1:\n                row += 1\n            else:\n                col += 1\n            direction = (-1, -1)\n        elif direction == (-1, -1) and (col == 0 or row == 0):\n            if col == 0:\n                row -= 1\n            else:\n                col -= 1\n            direction = (1, 1)\n        else:\n            row += direction[0]\n            col += direction[1]\n    return result", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[[null, 2], [3, 4], [5, 6, 7], [8, 9, 10]]]], "plus_fail_tests": []}], "EvoEval/28": [{"task_id": "EvoEval/28", "solution": "def calculate_progressive_tax(income: float, deductions=0) -> float:\n    tax_free_income = 10000\n    tax_brackets = [(25000, 0.15), (45000, 0.25), (float('inf'), 0.3)]\n    taxable_income = income - tax_free_income\n    tax = 0\n    for bracket in tax_brackets:\n        if taxable_income <= 0:\n            break\n        if taxable_income <= bracket[0]:\n            tax += taxable_income * bracket[1]\n            taxable_income = 0\n        else:\n            tax += bracket[0] * bracket[1]\n            taxable_income -= bracket[0]\n    deductions_ratios = [(1000, 1), (2000, 2), (float('inf'), 3)]\n    for ratio in deductions_ratios:\n        if deductions <= 0:\n            break\n        if deductions <= ratio[0]:\n            tax -= deductions * ratio[1]\n            deductions = 0\n        else:\n            tax -= ratio[0] * ratio[1]\n            deductions -= ratio[0]\n    return tax", "base_status": "fail", "plus_status": null, "base_fail_tests": [[12000, 500]], "plus_fail_tests": []}], "EvoEval/51": [{"task_id": "EvoEval/51", "solution": "def alien_encoding(string, list_of_alphabets):\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/69": [{"task_id": "EvoEval/69", "solution": "def magicTrick(cards, magicNumber):\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return 'No magic today'", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/66": [{"task_id": "EvoEval/66", "solution": "def prime_anagram_pairs(n):\n    prime_numbers = [i for i in range(2, n + 1) if is_prime(i)]\n    anagram_pairs = []\n    for i in range(len(prime_numbers)):\n        for j in range(i + 1, len(prime_numbers)):\n            if sorted(str(prime_numbers[i])) == sorted(str(prime_numbers[j])):\n                anagram_pairs.append((prime_numbers[i], prime_numbers[j]))\n    return sorted(anagram_pairs, key=lambda x: (x[0], x[1]))", "base_status": "fail", "plus_status": null, "base_fail_tests": [[13]], "plus_fail_tests": []}], "EvoEval/36": [{"task_id": "EvoEval/36", "solution": "def calculate_integral_coefficients(xs: list):\n    integral_coefficients = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        integral_coefficients[i + 1] = xs[i] / (i + 1)\n    return integral_coefficients", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/79": [{"task_id": "EvoEval/79", "solution": "def find_fruitful_days(prices, days):\n    max_profit = 0\n    min_price = prices[0]\n    for i in range(days):\n        if prices[i] < min_price:\n            min_price = prices[i]\n        elif prices[i] - min_price > max_profit:\n            max_profit = prices[i] - min_price\n    return max_profit", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/86": [{"task_id": "EvoEval/86", "solution": "def sort_movies_by_ratings_and_release_date(movies_dict):\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]", "base_status": "fail", "plus_status": null, "base_fail_tests": [[{"Inception": [8.8, "2010"]}]], "plus_fail_tests": []}], "EvoEval/60": [{"task_id": "EvoEval/60", "solution": "def happy_ants(path_length, sugar_locations, ant_positions):\n    happy_ants = []\n    for ant in ant_positions:\n        position = ant[0]\n        direction = ant[1]\n        sugar_count = 0\n        while True:\n            if position in sugar_locations:\n                sugar_count += 1\n                sugar_locations.remove(position)\n            if position == path_length - 1 and direction == 'right':\n                happy_ants.append(sugar_count)\n                break\n            elif position == 0 and direction == 'left':\n                happy_ants.append(sugar_count)\n                break\n            if direction == 'right':\n                position += 1\n            else:\n                position -= 1\n    return len(happy_ants)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[10, [1, 2, 3, 4, 5, 6, 7, 8, 9], [[0, "left"], [9, "right"]]]], "plus_fail_tests": []}], "EvoEval/72": [{"task_id": "EvoEval/72", "solution": "def string_fairy_tale(lst):\n    result = []\n    for (i, string) in enumerate(lst):\n        count = sum((c.isdigit() for c in string))\n        story = f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{string}' who was known for telling {count} tales a day\"\n        result.append(story)\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/48": [{"task_id": "EvoEval/48", "solution": "def wizard_inventory(inventory_logs):\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n        if inventory[item] <= 0:\n            del inventory[item]\n    return inventory", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/54": [{"task_id": "EvoEval/54", "solution": "def find_star_map(lst, star):\n    result = []\n    for (i, row) in enumerate(lst):\n        for (j, col) in enumerate(row):\n            if col == star:\n                result.append((i, j))\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/4": [{"task_id": "EvoEval/4", "solution": "from typing import List\n\n\ndef candles_relight(candles: List[int]) -> int:\n    if not candles:\n        return 0\n    lit_candles = 1\n    max_height = candles[0]\n    for i in range(1, len(candles)):\n        if candles[i] > max_height:\n            lit_candles += 1\n            max_height = candles[i]\n    return lit_candles", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/45": [{"task_id": "EvoEval/45", "solution": "def find_castle(arr):\n    n = len(arr)\n    left = [0] * n\n    right = [0] * n\n    max_left = 0\n    max_right = 0\n    for i in range(n):\n        while max_left < i and arr[max_left] < arr[i]:\n            max_left += 1\n        left[i] = i - max_left\n        while max_right < i and arr[max_right] < arr[n - i - 1]:\n            max_right += 1\n        right[n - i - 1] = i - max_right\n    max_hills = 0\n    for i in range(n):\n        max_hills = max(max_hills, left[i] + right[i] + 1)\n    return max_hills", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[1, 2, 3, 2, 5, 3, 6, 4, 8, 2, 7]]], "plus_fail_tests": []}], "EvoEval/58": [{"task_id": "EvoEval/58", "solution": "def interstellar_translator(earth_phrase):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alien_phrase = ''\n    for word in earth_phrase.split():\n        new_word = ''\n        for letter in word:\n            if letter in vowels:\n                new_letter = vowels[(vowels.index(letter) + 1) % len(vowels)]\n            elif letter == 'z':\n                new_letter = 'b'\n            else:\n                new_letter = consonants[(consonants.index(letter) + 1) % len(consonants)]\n            new_word += new_letter\n        if word[0] in vowels:\n            new_word += 'xy'\n        else:\n            new_word += 'yz'\n        new_word = new_word.capitalize()\n        alien_phrase += new_word + '@'\n    return alien_phrase[:-1]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/18": [{"task_id": "EvoEval/18", "solution": "def magical_seven(n: int) -> int:\n    num = 7\n    count = 0\n    while count < n:\n        if sum((int(digit) for digit in str(num))) == 7:\n            count += 1\n        num += 7\n    return num", "base_status": "fail", "plus_status": null, "base_fail_tests": [[1]], "plus_fail_tests": []}], "EvoEval/53": [{"task_id": "EvoEval/53", "solution": "def magical_transformation(s):\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    vowel_dict = {vowels[i]: vowels[(i + 1) % 5] for i in range(5)}\n    consonant_dict = {consonants[i]: consonants[(i + 1) % 21] for i in range(21)}\n    transformed = []\n    for (i, c) in enumerate(s):\n        if c in vowels:\n            transformed.append(vowel_dict[c])\n        elif c in consonants:\n            transformed.append(consonant_dict[c])\n        elif c == '?' and i % 2 == 0:\n            transformed.append('!')\n        elif c == '!' and i % 2 == 1:\n            transformed.append('?')\n        else:\n            transformed.append(c)\n    return ''.join(transformed)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Hello World???"]], "plus_fail_tests": []}], "EvoEval/80": [{"task_id": "EvoEval/80", "solution": "def adventure_game(map, instructions):\n    start_row = 0\n    start_column = 0\n    path = [(start_row, start_column)]\n    for instruction in instructions:\n        if instruction == 'up':\n            start_row -= 1\n        elif instruction == 'down':\n            start_row += 1\n        elif instruction == 'left':\n            start_column -= 1\n        elif instruction == 'right':\n            start_column += 1\n        if start_row < 0 or start_row >= len(map) or start_column < 0 or (start_column >= len(map[0])):\n            start_row -= 1\n            start_column -= 1\n            continue\n        if map[start_row][start_column] == 'X':\n            start_row -= 1\n            start_column -= 1\n            continue\n        if map[start_row][start_column] == 'E':\n            break\n        path.append((start_row, start_column))\n    return path", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[["S", ".", "."], ["X", "X", "."], [".", "X", "E"]], ["right", "right", "down", "down", "right"]]], "plus_fail_tests": []}], "EvoEval/0": [{"task_id": "EvoEval/0", "solution": "from typing import List, Union\n\ndef calculate_shipping_cost(items: List[Union[str, float]], location: str) -> float:\n    base_cost = 5.0\n    additional_cost = 10.0\n    local_factor = 1.0\n    national_factor = 1.5\n    international_factor = 2.5\n    total_weight = 0\n    string_items = False\n    for item in items:\n        if isinstance(item, str):\n            total_weight += 1\n            string_items = True\n        else:\n            total_weight += item\n    if total_weight > 5 and (not string_items):\n        base_cost += additional_cost\n    if location == 'Local':\n        factor = local_factor\n    elif location == 'National':\n        factor = national_factor\n    elif location == 'International':\n        factor = international_factor\n    else:\n        factor = local_factor\n    if string_items:\n        factor *= 1.5\n    total_cost = base_cost * total_weight * factor\n    return round(total_cost, 2)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["cipher", 2]], "plus_fail_tests": []}], "EvoEval/12": [{"task_id": "EvoEval/12", "solution": "from typing import List\n\ndef teleporter_energy_signature(flux_values: List[int]) -> int:\n    max_occurrence = max(set(flux_values), key=flux_values.count)\n    sum_of_elements = sum(flux_values)\n    result = sum_of_elements * max_occurrence\n    return result", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]]], "plus_fail_tests": []}], "EvoEval/31": [{"task_id": "EvoEval/31", "solution": "def unique_paths(m: int, n: int) -> int:\n    if m == 1 or n == 1:\n        return 1\n    else:\n        return unique_paths(m - 1, n) + unique_paths(m, n - 1)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[100, 100]], "plus_fail_tests": []}], "EvoEval/77": [{"task_id": "EvoEval/77", "solution": "def magical_sequence(sequence, k):\n    points = []\n    for num in sequence:\n        count = 0\n        while num % k == 0:\n            count += 1\n            num //= k\n        points.append(count)\n    points.sort(reverse=True)\n    return points", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[1, 1, 1, 1, 1, 1], 1]], "plus_fail_tests": []}], "EvoEval/64": [{"task_id": "EvoEval/64", "solution": "def magical_sequence(start, end, divisor):\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    result = []\n    for i in range(start, end + 1):\n        if i % divisor == 0 and is_prime(i):\n            result.append(i)\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}]}}