{"eval": {"EvoEval/40": [{"task_id": "EvoEval/40", "solution": "\ndef triples_sum_to_ten(l: list):\n    \"\"\"\n    triples_sum_to_ten takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to ten, and False otherwise.\n\n    >>> triples_sum_to_ten([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_ten([1, 3, -2, 1])\n    False\n    >>> triples_sum_to_ten([1, 2, 3, 7])\n    True\n    >>> triples_sum_to_ten([2, 4, -5, 3, 9, 7])\n    False\n    >>> triples_sum_to_ten([1])\n    False\n    \"\"\"\n    if len(l) < 3:\n        return False\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/35": [{"task_id": "EvoEval/35", "solution": "\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/16": [{"task_id": "EvoEval/16", "solution": "\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (case-sensitive) does it consist of.\n    >>> count_distinct_characters('xyzXYZ')\n    6\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_characters = set(string)\n    return len(distinct_characters)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/57": [{"task_id": "EvoEval/57", "solution": "\n\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing. If the list is empty, return False.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([])\n    False\n    \"\"\"\n    if len(l) == 0:\n        return False\n    increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/55": [{"task_id": "EvoEval/55", "solution": "\ndef fib(n: int):\n    \"\"\"Return (n+1)-th Fibonacci number.\n    >>> fib(10)\n    89\n    >>> fib(1)\n    1\n    >>> fib(8)\n    34\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        fib_list = [0, 1]\n        for i in range(2, n + 1):\n            fib_list.append(fib_list[i - 1] + fib_list[i - 2])\n        return fib_list[n]", "base_status": "fail", "plus_status": null, "base_fail_tests": [[10]], "plus_fail_tests": []}], "EvoEval/89": [{"task_id": "EvoEval/89", "solution": "\ndef encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            ascii_val = ord(char)\n            shifted_val = ascii_val + 2 * 2\n            if char.isupper():\n                if shifted_val > ord('Z'):\n                    shifted_val -= 26\n                encrypted += chr(shifted_val)\n            else:\n                if shifted_val > ord('z'):\n                    shifted_val -= 26\n                encrypted += chr(shifted_val)\n        else:\n            encrypted += char\n    return encrypted", "base_status": "fail", "plus_status": null, "base_fail_tests": [["hi"]], "plus_fail_tests": []}], "EvoEval/19": [{"task_id": "EvoEval/19", "solution": "\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    >>> sort_numbers('three one five')\n    'five three one'\n    \"\"\"\n    numeral_to_number = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numerals = numbers.split()\n    numbers = [numeral_to_number[numeral] for numeral in numerals]\n    numbers.sort(reverse=True)\n    sorted_numerals = [numeral for number in numbers for (numeral, value) in numeral_to_number.items() if value == number]\n    sorted_numbers = ' '.join(sorted_numerals)\n    return sorted_numbers", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/24": [{"task_id": "EvoEval/24", "solution": "\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, larger than 1\n    >>> smallest_divisor(15)\n    3\n    \"\"\"\n    divisor = 2\n    while n % divisor != 0:\n        divisor += 1\n    return divisor", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/44": [{"task_id": "EvoEval/44", "solution": "\n\ndef change_base(x: int, base: int) -> int:\n    \"\"\"Change numerical base of input number x to base.\n    return integer representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    22\n    >>> change_base(8, 2)\n    1000\n    >>> change_base(7, 2)\n    111\n    \"\"\"\n    result = 0\n    power = 0\n    while x > 0:\n        remainder = x % base\n        result += remainder * 10 ** power\n        x //= base\n        power += 1\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/65": [{"task_id": "EvoEval/65", "solution": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits left by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x_str = str(x)\n    num_digits = len(x_str)\n    shift %= num_digits\n    if shift == 0:\n        return x_str\n    shifted_str = x_str[shift:] + x_str[:shift]\n    if shift > num_digits // 2:\n        shifted_str = shifted_str[::-1]\n    return shifted_str", "base_status": "fail", "plus_status": null, "base_fail_tests": [[97, 8]], "plus_fail_tests": []}], "EvoEval/31": [{"task_id": "EvoEval/31", "solution": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise. If the number is less than 2, return 'Invalid Input'.\"\"\"\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/82": [{"task_id": "EvoEval/82", "solution": "\ndef prime_length(string):\n    string = string.replace(' ', '')\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/81": [{"task_id": "EvoEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    grade_table = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-'}\n    sorted_grades = sorted(grades, reverse=True)\n    letter_grades = [grade_table[gpa] for gpa in sorted_grades]\n    return letter_grades", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[4.0, 3, 1.7, 2, 3.5]]], "plus_fail_tests": []}], "EvoEval/92": [{"task_id": "EvoEval/92", "solution": "\ndef any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y):\n            return True\n    return False", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/75": [{"task_id": "EvoEval/75", "solution": "\ndef is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    factors = []\n    for prime in primes:\n        while a % prime == 0:\n            factors.append(prime)\n            a = a // prime\n    if len(factors) == 4:\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": null, "base_fail_tests": [[-100]], "plus_fail_tests": []}], "EvoEval/32": [{"task_id": "EvoEval/32", "solution": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial xs[0] + xs[1] * x^1 + xs[2] * x^3 + .... xs[n] * x^(2*n-1)\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having at least two coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-2, -3, 1]), 2) # (x + 1) (x + 1) (x - 2) = -2 - 3x + x^3\n    -1.0\n    \"\"\"\n    if len(xs) < 2:\n        raise ValueError('List xs must have at least two coefficients.')\n    n = len(xs) - 1\n    largest_coeff = max(xs, key=abs)\n    if largest_coeff == 0:\n        raise ValueError('Largest non-zero coefficient must be non-zero.')\n    if n % 2 == 0:\n        raise ValueError('The polynomial must have an odd degree.')\n    if n % 2 != 0:\n        return -largest_coeff / xs[-2]", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[-10, -2]]], "plus_fail_tests": []}], "EvoEval/91": [{"task_id": "EvoEval/91", "solution": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\" and ends with the word \"boredom\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I am experiencing boredom\")\n    1\n    \"\"\"\n    sentences = S.split('. ') + S.split('? ') + S.split('! ')\n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words[0] == 'I' and words[-1] == 'boredom':\n            count += 1\n    return count", "base_status": "fail", "plus_status": null, "base_fail_tests": [["The sky is blue. The sun is shining. I am experiencing boredom?Yes"]], "plus_fail_tests": []}], "EvoEval/70": [{"task_id": "EvoEval/70", "solution": "\ndef strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the maximum value,\n    then minimum of the remaining integers, then maximum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [4, 1, 3, 2]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    sorted_lst = []\n    lst.sort(reverse=True)\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/10": [{"task_id": "EvoEval/10", "solution": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that ends with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest prefix of supplied string that is a palindrome.\n    - Append to the start of the string reverse of a string suffix that comes after the palindromic prefix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'tacat'\n    >>> make_palindrome('cata')\n    'atacata'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i + 1]):\n            return string + string[:i][::-1]", "base_status": "fail", "plus_status": null, "base_fail_tests": [["xyz"]], "plus_fail_tests": []}], "EvoEval/22": [{"task_id": "EvoEval/22", "solution": "\nfrom typing import List, Any\n\n\ndef filter_even_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for even integers\n    >>> filter_even_integers(['a', 3.14, 5, 6])\n    [6]\n    >>> filter_even_integers([1, 2, 3, 'abc', {}, []])\n    [2]\n    \"\"\"\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[true, false, null, 0, -10, "test", [], {}, 3.14]]], "plus_fail_tests": []}], "EvoEval/38": [{"task_id": "EvoEval/38", "solution": "\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of four characters.\n    \"\"\"\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[1:] + group[0]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    n = 4\n    groups = [s[n * i:min(n * i + n, len(s))] for i in range((len(s) + n - 1) // n)]\n    groups = [group[-1] + group[:-1] if len(group) == n else group for group in groups]\n    return ''.join(groups)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/50": [{"task_id": "EvoEval/50", "solution": "\ndef encode_shift(s: str, shift: int = 5):\n    \"\"\"\n    returns encoded string by shifting every character by 'shift' in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str, shift: int=5):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string by reversing the shift.\n    \"\"\"\n    return ''.join([chr((ord(ch) - shift - ord('a')) % 26 + ord('a')) for ch in s])", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/61": [{"task_id": "EvoEval/61", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"[\" and \"]\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"[\")\n    False\n    >>> correct_bracketing(\"[]\")\n    True\n    >>> correct_bracketing(\"[[][]]\")\n    True\n    >>> correct_bracketing(\"][][\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/26": [{"task_id": "EvoEval/26", "solution": "\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Return the list in the reverse order of the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [4, 3, 1]\n    \"\"\"\n    count_dict = {}\n    for num in numbers:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    unique_numbers = []\n    for num in reversed(numbers):\n        if count_dict[num] == 1:\n            unique_numbers.append(num)\n    return unique_numbers", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/88": [{"task_id": "EvoEval/88", "solution": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n    \n    In addition, remove any duplicate values from the array.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    * sort_array([2, 2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sorted_array = sorted(set(array))\n    if len(sorted_array) <= 1:\n        return sorted_array\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[0, 1, 11, 0, 0, 0]]], "plus_fail_tests": []}], "EvoEval/59": [{"task_id": "EvoEval/59", "solution": "\ndef smallest_prime_factor(n: int):\n    \"\"\"Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    5\n    >>> smallest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            return i\n        i += 1", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/62": [{"task_id": "EvoEval/62", "solution": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form, but in descending order of the power of x.\n    >>> derivative([3, 1, 2, 4, 5])\n    [20, 12, 4, 1]\n    >>> derivative([1, 2, 3])\n    [6, 2]\n    \"\"\"\n    derivative_coeffs = []\n    for i in range(1, len(xs)):\n        derivative_coeffs.append(xs[i] * i)\n    return derivative_coeffs[::-1]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/78": [{"task_id": "EvoEval/78", "solution": "\ndef hex_key(num):\n    primes = [2, 3, 5, 7, 11, 13, 17]\n    count = 0\n    for digit in num:\n        if digit in ['0', '1', '4', '6', '8', '9', 'A', 'C', 'E']:\n            count += 1\n        elif digit.isdigit():\n            if int(digit) not in primes:\n                count += 1\n    return count", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/2": [{"task_id": "EvoEval/2", "solution": "\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the integer and decimal part of the number.\n    >>> truncate_number(3.5)\n    (3, 0.5)\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return (integer_part, decimal_part)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/14": [{"task_id": "EvoEval/14", "solution": "\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from longest to shortest of the input string\n    >>> all_prefixes('abc')\n    ['abc', 'ab', 'a']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string), 0, -1):\n        prefixes.append(string[:i])\n    return prefixes", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/71": [{"task_id": "EvoEval/71", "solution": "\ndef triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 3 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.000\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n    else:\n        return -1", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/85": [{"task_id": "EvoEval/85", "solution": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the odd elements that are at even indices.\n\n    Examples:\n        add([4, 2, 5, 7]) ==> 5\n    \"\"\"\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/47": [{"task_id": "EvoEval/47", "solution": "\ndef median(l: list):\n    \"\"\"Return median of elements in the list l, but if the list is empty, return 0 instead.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    >>> median([])\n    0\n    \"\"\"\n    if len(l) == 0:\n        return 0\n    sorted_list = sorted(l)\n    mid_index = len(sorted_list) // 2\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[mid_index - 1] + sorted_list[mid_index]) / 2\n    else:\n        return sorted_list[mid_index]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/52": [{"task_id": "EvoEval/52", "solution": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below or equal to threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 20)\n    True\n    \"\"\"\n    for num in l:\n        if num > t:\n            return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/74": [{"task_id": "EvoEval/74", "solution": "\ndef total_match(lst1, lst2):\n    total_chars_lst1 = sum((len(s) for s in lst1))\n    total_chars_lst2 = sum((len(s) for s in lst2))\n    if total_chars_lst1 > total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 < total_chars_lst2:\n        return lst2\n    else:\n        return lst2", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/34": [{"task_id": "EvoEval/34", "solution": "\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list in descending order\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [123, 9, 5, 3, 2, 0]\n    \"\"\"\n    unique_elements = list(set(l))\n    unique_elements.sort(reverse=True)\n    return unique_elements", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/98": [{"task_id": "EvoEval/98", "solution": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in odd indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 0\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 1\n    \"\"\"\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/63": [{"task_id": "EvoEval/63", "solution": "\ndef fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_n_minus_3 = 0\n        fibfib_n_minus_2 = 0\n        fibfib_n_minus_1 = 1\n        for i in range(3, n + 1):\n            fibfib_n = fibfib_n_minus_3 + fibfib_n_minus_2 - fibfib_n_minus_1\n            fibfib_n_minus_3 = fibfib_n_minus_2\n            fibfib_n_minus_2 = fibfib_n_minus_1\n            fibfib_n_minus_1 = fibfib_n\n        return fibfib_n", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/96": [{"task_id": "EvoEval/96", "solution": "\ndef count_up_to(n):\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = []\n    for i in range(n, 1, -1):\n        if is_prime(i):\n            primes.append(i)\n    return primes", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/20": [{"task_id": "EvoEval/20", "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two adjacent numbers that are the closest to each\n    other and return them in reverse order (larger number, smaller number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 1.0)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 4.5])\n    (5.0, 4.5)\n    \"\"\"\n    closest_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < closest_diff:\n            closest_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n    return closest_pair", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[3.9, 1.0, 2.2, 2.0, 4.0, 5.0]]], "plus_fail_tests": []}], "EvoEval/33": [{"task_id": "EvoEval/33", "solution": "\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted in descending order.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [5, 6, 3, 4, 8, 9, 2]\n    \"\"\"\n    sorted_values = sorted(l[::3], reverse=True)\n    result = []\n    for (i, value) in enumerate(l):\n        if i % 3 == 0:\n            result.append(sorted_values.pop(0))\n        else:\n            result.append(value)\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/90": [{"task_id": "EvoEval/90", "solution": "\ndef next_largest(lst):\n    if len(lst) < 2:\n        return None\n    largest = float('-inf')\n    second_largest = float('-inf')\n    for num in lst:\n        if num > largest:\n            second_largest = largest\n            largest = num\n        elif num > second_largest and num < largest:\n            second_largest = num\n    if second_largest == float('-inf'):\n        return None\n    else:\n        return second_largest", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/67": [{"task_id": "EvoEval/67", "solution": "def fruit_distribution(s, n):\n    fruits = s.split(', ')\n    total_fruits = n + 1\n    apples = int(fruits[0].split()[0])\n    oranges = int(fruits[1].split()[0])\n    mangoes = total_fruits - apples - oranges\n    return mangoes", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/42": [{"task_id": "EvoEval/42", "solution": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 2.\n    >>> incr_list([1, 2, 3])\n    [3, 4, 5]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [7, 5, 7, 4, 5, 5, 11, 2, 125]\n    \"\"\"\n    return [num + 2 for num in l]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/76": [{"task_id": "EvoEval/76", "solution": "\ndef is_simple_power(x, n):\n    if x == 1:\n        return (True, 0)\n    elif n == 1:\n        return (False, None)\n    else:\n        power = 0\n        while n ** power < x:\n            power += 1\n        if n ** power == x:\n            return (True, power)\n        else:\n            return (False, None)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[2, -1]], "plus_fail_tests": []}], "EvoEval/30": [{"task_id": "EvoEval/30", "solution": "\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list in ascending order.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [1, 2, 3, 3, 5, 9, 123]\n    \"\"\"\n    positive_nums = [num for num in l if num > 0]\n    positive_nums.sort()\n    return positive_nums", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/37": [{"task_id": "EvoEval/37", "solution": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted in descending order.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [5, 6, 3, 4]\n    \"\"\"\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    sorted_even_values = sorted(even_values, reverse=True)\n    result = l.copy()\n    for (i, value) in zip(even_indices, sorted_even_values):\n        result[i] = value\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/84": [{"task_id": "EvoEval/84", "solution": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits represented as a hexadecimal number.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"6\".\n        For N = 147, the sum of digits will be 12 the output should be \"c\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of hexadecimal number\n    \"\"\"\n    digits = str(N)\n    digit_sum = sum((int(digit) for digit in digits))\n    hex_sum = hex(digit_sum)[2:]\n    return hex_sum", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/97": [{"task_id": "EvoEval/97", "solution": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the sum of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 10.\n    multiply(19, 28) should return 17.\n    multiply(2020, 1851) should return 1.\n    multiply(14,-15) should return 9.\n    \"\"\"\n    return (abs(a) % 10 + abs(b) % 10) % 10", "base_status": "fail", "plus_status": null, "base_fail_tests": [[148, 412]], "plus_fail_tests": []}], "EvoEval/21": [{"task_id": "EvoEval/21", "solution": "\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1. Return the list in descending order.\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [1.0, 0.75, 0.5, 0.25, 0.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled = [(max_num - num) / (max_num - min_num) for num in numbers]\n    return sorted(rescaled, reverse=True)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[1.0, -1.0, 1.0, -1.0, 1.0]]], "plus_fail_tests": []}], "EvoEval/25": [{"task_id": "EvoEval/25", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from largest to smallest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [7, 5, 2]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors[::-1]", "base_status": "fail", "plus_status": null, "base_fail_tests": [[123456791]], "plus_fail_tests": []}], "EvoEval/3": [{"task_id": "EvoEval/3", "solution": "\nfrom typing import List\n\n\ndef below_one(operations: List[int]) -> bool:\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/46": [{"task_id": "EvoEval/46", "solution": "\ndef fib4(n: int) -> str:\n    fib = [0, 0, 2, 0]\n    if n < 4:\n        return str(fib[n])\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4])\n    return str(fib[n])", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/68": [{"task_id": "EvoEval/68", "solution": "\ndef pluck(arr):\n    smallest_odd = float('inf')\n    smallest_odd_index = float('inf')\n    for (i, num) in enumerate(arr):\n        if num % 2 != 0 and num < smallest_odd:\n            smallest_odd = num\n            smallest_odd_index = i\n    if smallest_odd == float('inf'):\n        return []\n    return [smallest_odd_index, smallest_odd]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/23": [{"task_id": "EvoEval/23", "solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string plus 1\n    >>> strlen('')\n    1\n    >>> strlen('abc')\n    4\n    \"\"\"\n    return len(string) + 1", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/8": [{"task_id": "EvoEval/8", "solution": "\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the non-negative integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_result = 0\n    product_result = 1\n    for num in numbers:\n        if num >= 0:\n            sum_result += num\n            product_result *= num\n    return (sum_result, product_result)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/27": [{"task_id": "EvoEval/27", "solution": "\ndef flip_case(string: str, exclusive_case: str='lower') -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase, unless they are in exclusive_case which can be either 'lower' or 'upper'.\n    If exclusive_case is 'lower', lowercase letters will remain as they are.\n    If exclusive_case is 'upper', uppercase letters will remain as they are.\n    >>> flip_case('Hello', 'lower')\n    'hello'\n    \"\"\"\n    flipped_string = ''\n    for char in string:\n        if char.islower() and exclusive_case != 'lower':\n            flipped_string += char.upper()\n        elif char.isupper() and exclusive_case != 'upper':\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/99": [{"task_id": "EvoEval/99", "solution": "\ndef closest_integer(value):\n    value = float(value)\n    floor = int(value)\n    ceiling = floor + 1\n    distance_floor = abs(value - floor)\n    distance_ceiling = abs(value - ceiling)\n    if distance_floor == distance_ceiling:\n        return floor if value >= 0 else ceiling\n    return floor if distance_floor < distance_ceiling else ceiling", "base_status": "fail", "plus_status": null, "base_fail_tests": [["-2.8"]], "plus_fail_tests": []}], "EvoEval/1": [{"task_id": "EvoEval/1", "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    stack = []\n    groups = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                groups.append(paren_string[:paren_string.index(char) + 1])\n                paren_string = paren_string[paren_string.index(char) + 1:]\n    groups.sort()\n    return groups", "base_status": "fail", "plus_status": null, "base_fail_tests": [["(()()) ((())) () ((())()())"]], "plus_fail_tests": []}], "EvoEval/11": [{"task_id": "EvoEval/11", "solution": "from typing import List\n\n\n", "base_status": "fail", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/95": [{"task_id": "EvoEval/95", "solution": "\ndef check_dict_case(dict):\n    if len(dict) < 3:\n        return False\n    lowercase_keys = all((key.islower() for key in dict.keys()))\n    uppercase_keys = all((key.isupper() for key in dict.keys()))\n    return lowercase_keys or uppercase_keys", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/6": [{"task_id": "EvoEval/6", "solution": "\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses. Additionally, return the list in descending order.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [3, 3, 2, 1]\n    \"\"\"\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return sorted(result, reverse=True)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/43": [{"task_id": "EvoEval/43", "solution": "\ndef pairs_sum_to_one(l):\n    \"\"\"\n    pairs_sum_to_one takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to one, and False otherwise.\n    >>> pairs_sum_to_one([1, 3, 5, 0])\n    True\n    >>> pairs_sum_to_one([1, 3, -2, 1])\n    True\n    >>> pairs_sum_to_one([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_one([2, 4, -5, 3, 5, 7])\n    False\n    >>> pairs_sum_to_one([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/39": [{"task_id": "EvoEval/39", "solution": "\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime. If the number is even, return None.\n    >>> prime_fib(1)\n    None\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    if n < 1:\n        return None\n    fib_sequence = [0, 1]\n    while len(fib_sequence) < n + 1:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    for num in fib_sequence:\n        if num % 2 == 0:\n            return None\n        if is_prime(num):\n            n -= 1\n            if n == 0:\n                return num", "base_status": "fail", "plus_status": null, "base_fail_tests": [[2]], "plus_fail_tests": []}], "EvoEval/83": [{"task_id": "EvoEval/83", "solution": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start with 1 or end with 2.\n    \"\"\"\n    count = 0\n    for i in range(10 ** (n - 1), 10 ** n):\n        if str(i)[0] == '1' or str(i)[-1] == '2':\n            count += 1\n    return count", "base_status": "fail", "plus_status": null, "base_fail_tests": [[10]], "plus_fail_tests": []}], "EvoEval/29": [{"task_id": "EvoEval/29", "solution": "\nfrom typing import List\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that end with a given suffix. \"\"\"\n    return [s for s in strings if s.endswith(suffix)]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/93": [{"task_id": "EvoEval/93", "solution": "\n\ndef encode(message):\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                encoded_char = chr(ord(char) + 3)\n            else:\n                encoded_char = char.swapcase()\n        else:\n            encoded_char = char\n        encoded_message += encoded_char\n    return encoded_message", "base_status": "fail", "plus_status": null, "base_fail_tests": [["TEST"]], "plus_fail_tests": []}], "EvoEval/41": [{"task_id": "EvoEval/41", "solution": "\ndef car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of 2*n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    return n * 2", "base_status": "fail", "plus_status": null, "base_fail_tests": [[2]], "plus_fail_tests": []}], "EvoEval/56": [{"task_id": "EvoEval/56", "solution": "\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/54": [{"task_id": "EvoEval/54", "solution": "\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters and the same length.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    False\n    >>> same_chars('aaaaaaabcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    False\n    >>> same_chars('eabcd', 'ddabc')\n    False\n    \"\"\"\n    return sorted(s0) == sorted(s1) and len(s0) == len(s1)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["aaaaaaabcd", "dddddddabc"]], "plus_fail_tests": []}], "EvoEval/49": [{"task_id": "EvoEval/49", "solution": "\ndef modp(n: int, p: int, q: int):\n    \"\"\"Return 2^(n+q) modulo p (be aware of numerics).\n    >>> modp(3, 5, 1)\n    1\n    >>> modp(1101, 101, 2)\n    8\n    >>> modp(0, 101, 1)\n    2\n    >>> modp(3, 11, 2)\n    10\n    >>> modp(100, 101, 1)\n    2\n    \"\"\"\n    return pow(2, n + q, p)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/77": [{"task_id": "EvoEval/77", "solution": "\ndef iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some positive integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> False\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    if a < 0:\n        return False\n    root = int(a ** (1 / 3))\n    return root ** 3 == a", "base_status": "fail", "plus_status": null, "base_fail_tests": [[64]], "plus_fail_tests": []}], "EvoEval/7": [{"task_id": "EvoEval/7", "solution": "\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that do not contain given substring \"\"\"\n    return [s for s in strings if substring not in s]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/9": [{"task_id": "EvoEval/9", "solution": "\nfrom typing import List, Tuple\n\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 1, 1, 1, 1, 1, 1]\n    \"\"\"\n    rolling_min_list = []\n    current_min = float('inf')\n    for num in numbers:\n        current_min = min(current_min, num)\n        rolling_min_list.append(current_min)\n    return rolling_min_list", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/13": [{"task_id": "EvoEval/13", "solution": "\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return the least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    75\n    \"\"\"\n    max_num = max(a, b)\n    lcm = max_num\n    while lcm % a != 0 or lcm % b != 0:\n        lcm += max_num\n    return lcm", "base_status": "fail", "plus_status": null, "base_fail_tests": [[987654321, 123456789]], "plus_fail_tests": []}], "EvoEval/64": [{"task_id": "EvoEval/64", "solution": "FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    Only count the lowercase vowels.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"YACED\")\n    0\n    \"\"\"\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        elif s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Alone"]], "plus_fail_tests": []}], "EvoEval/73": [{"task_id": "EvoEval/73", "solution": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            changes += 1\n    return changes", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/87": [{"task_id": "EvoEval/87", "solution": "def get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: coord[1])\n    coordinates.sort(key=lambda coord: coord[0], reverse=True)\n    return coordinates", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/17": [{"task_id": "EvoEval/17", "solution": "\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return a list of unique integers corresponding to how many beats does each\n    note last. Return the list in descending order.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1]\n    \"\"\"\n    notes = music_string.split()\n    durations = []\n    for note in notes:\n        if note == 'o':\n            duration = 4\n        elif note == 'o|':\n            duration = 2\n        elif note == '.|':\n            duration = 1\n        else:\n            continue\n        if duration not in durations:\n            durations.append(duration)\n    durations.sort(reverse=True)\n    return durations", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/5": [{"task_id": "EvoEval/5", "solution": "\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers' and add 'delimiter' at the end of the list\n    >>> intersperse([], 4)\n    [4]\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3, 4]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    result.append(delimiter)\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/51": [{"task_id": "EvoEval/51", "solution": "\ndef remove_consonants(text):\n    \"\"\"\n    remove_consonants is a function that takes string and returns string without consonants.\n    >>> remove_consonants('')\n    ''\n    >>> remove_consonants(\"abcdef\nghijklm\")\n    'ae\ni'\n    >>> remove_consonants('abcdef')\n    'ae'\n    >>> remove_consonants('aaaaa')\n    'aaaaa'\n    >>> remove_consonants('aaBAA')\n    'aaAA'\n    >>> remove_consonants('zbcd')\n    ''\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonant_free_text = ''\n    for char in text:\n        if char.lower() in vowels:\n            consonant_free_text += char\n    return consonant_free_text", "base_status": "fail", "plus_status": null, "base_fail_tests": [["abcdef\nghijklm"]], "plus_fail_tests": []}], "EvoEval/28": [{"task_id": "EvoEval/28", "solution": "\nfrom typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string, separated by a comma.\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'a,b,c'\n    \"\"\"\n    return ','.join(strings)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/66": [{"task_id": "EvoEval/66", "solution": "\ndef digitSum(s):\n    sum = 0\n    for char in s:\n        if char.islower():\n            sum += ord(char)\n    return sum", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/69": [{"task_id": "EvoEval/69", "solution": "\ndef search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the smallest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 1\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 1\n        search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    for num in lst:\n        if lst.count(num) >= num:\n            return num\n    return -1", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[4, 1, 4, 1, 4, 4]]], "plus_fail_tests": []}], "EvoEval/79": [{"task_id": "EvoEval/79", "solution": "\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'bd'", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/86": [{"task_id": "EvoEval/86", "solution": "\ndef anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word, reverse=True))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["\n\n123 456\n789\n"]], "plus_fail_tests": []}], "EvoEval/72": [{"task_id": "EvoEval/72", "solution": "\ndef will_it_fly(q, w):\n    if q == q[::-1] and sum(q) % 2 == 0 and (sum(q) <= w):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/4": [{"task_id": "EvoEval/4", "solution": "\nfrom typing import List\n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    median = statistics.median(numbers)\n    absolute_deviations = [abs(x - median) for x in numbers]\n    return statistics.median(absolute_deviations)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[1.0, 2.0, 3.0]]], "plus_fail_tests": []}], "EvoEval/45": [{"task_id": "EvoEval/45", "solution": "\n\ndef triangle_perimeter(a, b, c):\n    \"\"\"Given length of three sides return perimeter for a triangle.\n    >>> triangle_perimeter(5, 3, 3)\n    11\n    \"\"\"\n    return a + b + c", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/48": [{"task_id": "EvoEval/48", "solution": "\n\ndef is_palindrome(text: str, case_sensitive: bool=True):\n    \"\"\"\n    Checks if given string is a palindrome considering case sensitivity according to the provided parameter\n    >>> is_palindrome('', True)\n    True\n    >>> is_palindrome('aba', True)\n    True\n    >>> is_palindrome('Aba', False)\n    True\n    >>> is_palindrome('aaaaa', True)\n    True\n    >>> is_palindrome('zbcd', True)\n    False\n    \"\"\"\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/58": [{"task_id": "EvoEval/58", "solution": "\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists in descending order.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [653, 5, 1]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [3, 2]\n\n    \"\"\"\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort(reverse=True)\n    return common_elements", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/18": [{"task_id": "EvoEval/18", "solution": "\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Do not count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    2\n    \"\"\"\n    count = 0\n    start = 0\n    while start < len(string):\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + len(substring)\n    return count", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/53": [{"task_id": "EvoEval/53", "solution": "\ndef add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y and return the result increased by 1\n    >>> add(2, 3)\n    6\n    >>> add(5, 7)\n    13\n    \"\"\"\n    result = x + y\n    return result + 1", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/12": [{"task_id": "EvoEval/12", "solution": "\nfrom typing import List, Optional\n\n\ndef shortest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the shortest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> shortest([])\n\n    >>> shortest(['a', 'b', 'c'])\n    'a'\n    >>> shortest(['a', 'bb', 'ccc'])\n    'a'\n    \"\"\"\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/80": [{"task_id": "EvoEval/80", "solution": "\ndef is_happy(s):\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i] == s[i + 3] or (s[i + 1] == s[i + 2]) or (s[i + 1] == s[i + 3]) or (s[i + 2] == s[i + 3]):\n            return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/0": [{"task_id": "EvoEval/0", "solution": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two adjacent numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    >>> has_close_elements([], 0.3)\n    False\n    \"\"\"\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/60": [{"task_id": "EvoEval/60", "solution": "\ndef sum_to_n(n: int, m: int=1):\n    \"\"\"sum_to_n is a function that sums numbers from m to n.\n    >>> sum_to_n(30, 10)\n    420\n    >>> sum_to_n(100, 50)\n    3825\n    >>> sum_to_n(5, 2)\n    14\n    >>> sum_to_n(10, 5)\n    45\n    >>> sum_to_n(1, 1)\n    1\n    \"\"\"\n    return sum(range(m, n + 1))", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/36": [{"task_id": "EvoEval/36", "solution": "\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    0\n    >>> fizz_buzz(79)\n    1\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/94": [{"task_id": "EvoEval/94", "solution": "\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the smallest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 2\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 2\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 3\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 5\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 2\n    \"\"\"\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [num for num in lst if is_prime(num)]\n    smallest_prime = min(primes)\n    sum_of_digits = sum((int(digit) for digit in str(smallest_prime)))\n    return sum_of_digits", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/15": [{"task_id": "EvoEval/15", "solution": "\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 1 upto n inclusive.\n    >>> string_sequence(1)\n    '1'\n    >>> string_sequence(5)\n    '1 2 3 4 5'\n    \"\"\"\n    return ' '.join((str(i) for i in range(1, n + 1)))", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}]}}