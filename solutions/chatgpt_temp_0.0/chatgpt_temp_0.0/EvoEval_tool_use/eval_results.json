{"eval": {"EvoEval/24": [{"task_id": "EvoEval/24", "solution": "def count_word(word: str) -> bool:\n    \"\"\"\n    Helper function to count the number of alphabetical characters in a word (excluding hyphens).\n    \"\"\"\n    return len(word.replace(\"-\", \"\"))\ndef longest_word(sentence: str) -> str:\n    \"\"\"\n    For a given sentence, find the longest valid English word.\n    The length is defined as the number of alphabetical characters, excluding hyphens.\n    If there are multiple words of the same maximum length, return the first one.\n    The sentence may contain punctuation and mixed case letters.\n    Note that hyphenated words are considered single words.\n\n    >>> longest_word(\"I love programming in Python!\")\n    'programming'\n    >>> longest_word(\"Does it handle non-alphabetical characters appropriately?\")\n    'non-alphabetical'\n    >>> longest_word(\"Does it handle non alphabetical characters appropriately?\")\n    'appropriately'\n    \"\"\"\n    words = sentence.split()\n    longest_word = ''\n    max_length = 0\n    for word in words:\n        cleaned_word = ''.join(filter(str.isalpha, word))\n        if len(cleaned_word) > max_length:\n            max_length = len(cleaned_word)\n            longest_word = cleaned_word\n    return longest_word", "base_status": "fail", "plus_status": null, "base_fail_tests": [["I love programming-in Python!"]], "plus_fail_tests": []}], "EvoEval/59": [{"task_id": "EvoEval/59", "solution": "def parse_pairs(text):\n    \"\"\"parse_pairs is a helper function that separates the text into pairs of words.\n    It returns a list of tuples where each tuple is a pair of words.\n\n    >>> parse_pairs('apple fruit, banana fruit, apple tech, banana tech')\n    [('apple', 'fruit'), ('banana', 'fruit'), ('apple', 'tech'), ('banana', 'tech')]\n\n    >>> parse_pairs('red color, blue color')\n    [('red', 'color'), ('blue', 'color')]\n\n    >>> parse_pairs('cat animal, dog animal, bird animal')\n    [('cat', 'animal'), ('dog', 'animal'), ('bird', 'animal')]\n\n    >>> parse_pairs('python programming, java programming, python snake')\n    [('python', 'programming'), ('java', 'programming'), ('python', 'snake')]\n    \"\"\"\n    pairs = text.split(', ')\n    return [tuple(pair.split(' ')) for pair in pairs]\ndef text_to_dict(text: str):\n    \"\"\"text_to_dict is a function that takes a string of text containing pairs of\n    words separated by commas and converts each pair into a key-value pair in a dictionary.\n    Each pair of words in the text is separated by a space and every two pairs are separated by a comma. \n    If a word appears more than once as a key, the value for that key should be a list of all the \n    corresponding values in the order they appeared in the text.\n\n    >>> text_to_dict('apple fruit, banana fruit, apple tech, banana tech')\n    {'apple': ['fruit', 'tech'], 'banana': ['fruit', 'tech']}\n\n    >>> text_to_dict('red color, blue color')\n    {'red': 'color', 'blue': 'color'}\n\n    >>> text_to_dict('cat animal, dog animal, bird animal')\n    {'cat': 'animal', 'dog': 'animal', 'bird': 'animal'}\n\n    >>> text_to_dict('python programming, java programming, python snake')\n    {'python': ['programming', 'snake'], 'java': 'programming'}\n    \"\"\"\n    pairs = parse_pairs(text)\n    result = {}\n    for pair in pairs:\n        (key, value) = pair\n        if key in result:\n            if isinstance(result[key], list):\n                result[key].append(value)\n            else:\n                result[key] = [result[key], value]\n        else:\n            result[key] = value\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/55": [{"task_id": "EvoEval/55", "solution": "def helper_is_digit(c: str) -> bool:\n    \"\"\"\n    A helper function to check if a character is a digit\n    >>> helper_is_digit('3')\n    True\n    >>> helper_is_digit('a')\n    False\n    \"\"\"\n    if '0' <= c <= '9':\n        return True\n    return False\n\n\ndef helper_is_alpha(c: str) -> bool:\n    \"\"\"\n    A helper function to check if a character is alphabetic\n    >>> helper_is_alpha('b')\n    True\n    >>> helper_is_alpha('1')\n    False\n    \"\"\"\n    if 'a' <= c <= 'z' or 'A' <= c <= 'Z':\n        return True\n    return False\ndef process_string(s: str) -> str:\n    \"\"\"\n    Given a string s, return a new string where each character c is replaced by the next character in the alphabet\n    if c is alphabetic, or by the next digit, if c is a digit. 'z' and 'Z' should be replaced by 'a' and 'A' respectively,\n    and '9' should be replaced by '0'.\n    If c is neither a digit nor an alphabetic character, it should be replaced by a space.\n    The function should handle both lower and upper case letters.\n\n    >>> process_string(\"Hello123\")\n    'Ifmmp234'\n    >>> process_string(\"Zebra90X\")\n    'Afcsb01Y'\n    >>> process_string(\"@$%\")\n    '   '\n    \"\"\"\n    result = ''\n    for c in s:\n        if helper_is_alpha(c):\n            if c == 'z':\n                result += 'a'\n            elif c == 'Z':\n                result += 'A'\n            else:\n                result += chr(ord(c) + 1)\n        elif helper_is_digit(c):\n            if c == '9':\n                result += '0'\n            else:\n                result += str(int(c) + 1)\n        else:\n            result += ' '\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/91": [{"task_id": "EvoEval/91", "solution": "def parse_string(s):\n    '''\n    This helper function takes a string and removes all non-alphabet characters.\n    \n    Args:\n    s: A string\n    \n    Returns:\n    A string having only alphabet characters.\n    \n    Example:\n    \n    parse_string(\"Hello, World!\") \u279e \"HelloWorld\"\n    parse_string(\"Pyth0n Pr0gramm!ng\") \u279e \"PythonProgramming\"\n    '''\n    return ''.join(c for c in s if c.isalpha())\ndef rearrange_string(s1, s2):\n    \"\"\"\n    Create a function that takes 2 strings.\n    The function should return a new string such that the characters from the first string should appear before the characters from the second string in the new string.\n    Ignore all non-alphabet characters in the input strings.\n\n    If the sum of ASCII values of the characters in the first string is less than or equal to the sum of ASCII values of the characters in the second string,\n    then in the new string, the order of characters should be in ascending order.\n\n    If the sum of ASCII values of the characters in the first string is greater than the sum of ASCII values of the characters in the second string,\n    then in the new string, the order of characters should be in descending order.\n\n\n    Examples\n    rearrange_string(\"Hello, World!\", \"Python Programming\") \u279e \"HWdellloorPPagghimmnnoorrty\"\n\n    rearrange_string(\"Good Morning\", \"Hello\") \u279e \"rooonnigdMGolleH\"\n\n    rearrange_string(\"Data Science\", \"Artificial Intelligence\") \u279e \"DSaacceeintAIacceeefgiiiilllnnrtt\"\n\n    rearrange_string(\"Python 3.9\", \"Python 2.7\") \u279e \"PhnotyPhnoty\"\n    \"\"\"\n    s1 = parse_string(s1)\n    s2 = parse_string(s2)\n    sum_s1 = sum((ord(c) for c in s1))\n    sum_s2 = sum((ord(c) for c in s2))\n    if sum_s1 <= sum_s2:\n        return ''.join(sorted(s1) + sorted(s2))\n    else:\n        return ''.join(sorted(s1, reverse=True) + sorted(s2, reverse=True))", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/38": [{"task_id": "EvoEval/38", "solution": "def is_goal(goal: str) -> bool:\n    \"\"\"\n    This helper function checks if the given string represents a valid goal. \n    A valid goal is a string that contains only digits and represents a number greater than 0.\n\n    :param goal: The goal of the player.\n    :return: True if the goal is valid, False otherwise.\n    \"\"\"\n    if goal.isdigit():\n        return int(goal) > 0\n    return False\n\ndef is_valid(player: str) -> bool:\n    \"\"\"\n    This helper function checks if the input string is a valid player name. \n    A valid player name contains only alphanumeric characters and underscores, and is at least 3 characters long.\n\n    :param player: The name of the player.\n    :return: True if the player name is valid, False otherwise.\n    \"\"\"\n    if len(player) < 3:\n        return False\n    return all(char.isalnum() or char == '_' for char in player)\ndef assign_goals(players: list, goals: list) -> dict:\n    \"\"\"\n    This function takes two lists, players and goals, and returns a dictionary.\n    The dictionary keys are the player names from the players list, and the values are the corresponding\n    goals from the goals list. If a player name or a goal is not valid:\n     - valid name must contains only alphanumeric characters and underscores, and is at least 3 characters long.\n     - valid goal is a string that contains only digits and represents a number greater than 0.,\n    the dictionary should not include this pair.\n\n    :param players: A list of player names.\n    :param goals: A list of goals.\n    :return: A dictionary with valid player names as keys and corresponding goals as values.\n    \"\"\"\n    valid_players = [player for player in players if is_valid(player)]\n    valid_goals = [goal for goal in goals if is_goal(goal)]\n    return dict(zip(valid_players, valid_goals))", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["nevets"], ["2"]]], "plus_fail_tests": []}], "EvoEval/62": [{"task_id": "EvoEval/62", "solution": "def parse_record(record):\n    \"\"\" parse a record into tuple (item, price, quantity)\n    >>> parse_record(\"apple,1.2,3\")\n    ('apple', 1.2, 3)\n    \"\"\"\n    parts = record.split(',')\n    return parts[0], float(parts[1]), int(parts[2])\n\n\ndef is_valid_record(record):\n    \"\"\" verify if a record is valid\n    >>> is_valid_record(\"apple,1.2,3\")\n    True\n    >>> is_valid_record(\"apple,1.2\")\n    False\n    \"\"\"\n    parts = record.split(',')\n    return len(parts) == 3 and parts[1].replace(\".\", \"\", 1).isdigit() and parts[2].isdigit()\ndef compile_report(records: list):\n    \"\"\" records is a list of strings where each string is a transaction record in the format \"item,price,quantity\".\n    The function should return a dictionary where keys are items and values are total revenues of each item. (skip any transaction records which do not follow the format)\n    >>> compile_report([\"apple,1.2,3\", \"banana,0.5,6\", \"apple,1.2,2\"])\n    {'apple': 6.0, 'banana': 3.0}\n    >>> compile_report([\"orange,1.3,10\", \"banana,0.5,5\", \"orange,1.3,5\"])\n    {'orange': 19.5, 'banana': 2.5}\n    \"\"\"\n    report = {}\n    for record in records:\n        if is_valid_record(record):\n            (item, price, quantity) = parse_record(record)\n            revenue = price * quantity\n            if item in report:\n                report[item] += revenue\n            else:\n                report[item] = revenue\n    return report", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/75": [{"task_id": "EvoEval/75", "solution": "def calculate_distance(point_a, point_b):\n    \"\"\"\n    This helper function will calculate the Euclidean distance between two points.\n    Each point is represented as a tuple of two values (x, y).\n    \"\"\"\n    from math import sqrt\n    distance = sqrt((point_b[0] - point_a[0])**2 + (point_b[1] - point_a[1])**2)\n    return distance\ndef find_nearest_bus_stop(user_coordinate, bus_stops):\n    \"\"\"\n    Write a function that returns the id of the nearest bus stop to the user's location.\n\n    The user's location and the bus stops locations are two-dimensional (x, y). \n    The bus stops data is stored in a list of tuple: bus stop id, x coordinate, y coordinate (e.g., 123,5,6).\n\n    The function should return the id of the bus stop that is closest to the user.\n\n    Example:\n    find_nearest_bus_stop((3, 4), [(123, 4, 5), (321, 3, 3)]) -> 321\n\n    Assumption: The user's location and the bus stops locations are all in the range of 0-100 (inclusive), and the bus stop id is always an integer.\n    \"\"\"\n    min_distance = float('inf')\n    nearest_bus_stop_id = None\n    for bus_stop in bus_stops:\n        (bus_stop_id, x, y) = bus_stop\n        bus_stop_coordinate = (x, y)\n        distance = calculate_distance(user_coordinate, bus_stop_coordinate)\n        if distance < min_distance:\n            min_distance = distance\n            nearest_bus_stop_id = bus_stop_id\n    return nearest_bus_stop_id", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/13": [{"task_id": "EvoEval/13", "solution": "def is_valid_date(date: str) -> bool:\n    \"\"\"\n    Helper function to check if the given date string is valid or not. \n    The date string should be in yyyy-mm-dd format. \n    Return True if the date is valid, False otherwise.\n\n    >>> is_valid_date(\"2021-09-30\")\n    True\n    >>> is_valid_date(\"2021-02-29\")\n    False\n    \"\"\"\n    year, month, day = (int(i) for i in date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 28 + (1 if year%400 == 0 or (year%4 == 0 and year%100 != 0) else 0):\n        return False\n    return True\n\n\ndef is_leap_year(year: int) -> bool:\n    \"\"\"\n    Helper function to check if the given year is a leap year or not.\n    Return True if the year is a leap year, False otherwise.\n\n    >>> is_leap_year(2020)\n    True\n    >>> is_leap_year(2021)\n    False\n    \"\"\"\n    return year%400 == 0 or (year%4 == 0 and year%100 != 0)\ndef days_between_dates(date1: str, date2: str) -> int:\n    \"\"\"\n    Return the number of days between two dates date1 and date2. \n    The dates should be in yyyy-mm-dd format. If any or both of the \n    dates are invalid, return -1. If date2 is before date1, return -2.\n\n    >>> days_between_dates(\"2021-09-30\", \"2021-10-01\")\n    1\n    >>> days_between_dates(\"2021-02-29\", \"2021-03-01\")\n    -1\n    >>> days_between_dates(\"2021-10-01\", \"2021-09-30\")\n    -2\n    \"\"\"\n    if not is_valid_date(date1) or not is_valid_date(date2):\n        return -1\n    date1_obj = datetime.strptime(date1, '%Y-%m-%d')\n    date2_obj = datetime.strptime(date2, '%Y-%m-%d')\n    if date2_obj < date1_obj:\n        return -2\n    delta = date2_obj - date1_obj\n    return delta.days", "base_status": "fail", "plus_status": null, "base_fail_tests": [["2021-09-30", "2021-10-01"]], "plus_fail_tests": []}], "EvoEval/50": [{"task_id": "EvoEval/50", "solution": "from typing import List\n\ndef validate_task_input(tasks: List[str]) -> bool:\n    \"\"\"\n    takes as input a list of tasks. \n    Returns True if the list is not empty and all elements are strings, else returns False\n    \"\"\"\n    if not tasks or not all(isinstance(task, str) for task in tasks):\n        return False\n    return True\n\ndef validate_priority_input(priorities: List[int]) -> bool:\n    \"\"\"\n    takes as input a list of priorities. \n    Returns True if the list is not empty and all elements are integers between 1 and 5, else returns False\n    \"\"\"\n    if not priorities or not all(isinstance(priority, int) for priority in priorities):\n        return False\n    if not all(1 <= priority <= 5 for priority in priorities):\n        return False\n    return True\ndef create_todo_list(tasks: List[str], priorities: List[int]) -> List[tuple]:\n    \"\"\"\n    Takes as input a list of tasks and their corresponding priorities. \n    Returns a list of tasks sorted by their priorities in descending order. \n    If two tasks have the same priority, they should be sorted in the order they were added.\n    \n    if priority values are not between 1 to 5 inclusive, please return an empty list\n    additionally, if the task list is not all strings, also return an empty list\n    \n    e.g., create_todo_list(['task2', 'task1'], [1, 2]) -> [('task1', 2), ('task2', 1)]\n    \"\"\"\n    if not validate_task_input(tasks) or not validate_priority_input(priorities):\n        return []\n    todo_list = list(zip(tasks, priorities))\n    todo_list.sort(key=lambda x: (-x[1], todo_list.index(x)))\n    return todo_list", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["task2", "task1"], [1, 2]]], "plus_fail_tests": []}], "EvoEval/61": [{"task_id": "EvoEval/61", "solution": "def parse_string(input_string: str) -> str:\n    \"\"\"\n    Helper function to parse a string from our custom markup language, which uses square brackets to denote a string.\n    For example, \"[Hello World]\" should return \"Hello World\". Assumes well-formed input.\n    \"\"\"\n    return input_string[1:-1]\n\ndef parse_number(input_string: str) -> int:\n    \"\"\"\n    Helper function to parse a number from our custom markup language, which uses angle brackets to denote a number.\n    For example, \"<123>\" should return 123. Assumes well-formed input.\n    \"\"\"\n    return int(input_string[1:-1])\n\ndef evaluate_expression(expression: str) -> str:\n    \"\"\"\n    Evaluates an expression in a custom markup language. The language has two types of elements: strings, which are enclosed \n    in square brackets like \"[Hello World]\", and numbers, which are enclosed in angle brackets like \"<123>\". An expression is \n    a sequence of strings and numbers, like \"[Hello World]<123>\".\n\n    This function should parse the expression and return a new string where each string element is repeated a number of times \n    equal to the next number element in sequence. If a string element is not directly followed by a number, it should be ignored.\n\n    >>> evaluate_expression(\"[Hello]<3>[World]<2>\")\n    \"HelloHelloHelloWorldWorld\"\n\n    >>> evaluate_expression(\"[Python]<1>[Code]<0>\")\n    \"Python\"\n\n    \"\"\"\n    result = ''\n    i = 0\n    while i < len(expression):\n        if expression[i] == '[':\n            string_start = i + 1\n            string_end = expression.find(']', string_start)\n            if string_end != -1:\n                string_element = parse_string(expression[string_start:string_end])\n                i = string_end + 1\n                if i < len(expression) and expression[i] == '<':\n                    number_start = i + 1\n                    number_end = expression.find('>', number_start)\n                    if number_end != -1:\n                        number_element = parse_number(expression[number_start:number_end])\n                        result += string_element * number_element\n                        i = number_end + 1\n                    else:\n                        i = len(expression)\n                else:\n                    result += string_element\n            else:\n                i = len(expression)\n        else:\n            i += 1\n    return result", "base_status": "fail", "plus_status": null, "base_fail_tests": [["[Hello]<3>[World]<2>"]], "plus_fail_tests": []}], "EvoEval/74": [{"task_id": "EvoEval/74", "solution": "def check_format(plate):\n    \"\"\"checks if the plate follows the correct format \"AA-NNNN-AA\" where \"A\" represents an uppercase alphabet character and \"N\" represents a digit.\"\"\"\n    import re\n\n    pattern = \"[A-Z]{2}-\\d{4}-[A-Z]{2}\"\n    return re.fullmatch(pattern, plate) is not None\n\n\ndef check_invalid_alphabets(plate):\n    '''checks if the plate contains invalid alphabets \"I\", \"O\", or \"Q\"'''\n    invalid_alphabets = [\"I\", \"O\", \"Q\"]\n    return any(alphabet in plate for alphabet in invalid_alphabets)\ndef check_plates(plates):\n    \"\"\"\n    Write a function that accepts a list of car license plates and returns a list of cars that are not following the license plate format.\n    \n    The license plate format is \"AA-NNNN-AA\" where \"A\" represents an uppercase alphabet character and \"N\" represents a digit. The alphabets cannot be \"I\", \"O\", or \"Q\". \n    \n    The license plates are separated by commas in the string.\n\n    Examples\n    check_plates(\"AB-1234-CD,EF-5678-GH,IJ-9012-KL\") \u279e ['IJ-9012-KL']\n    check_plates(\"AB-1234-CD,EF-5678-GH,IJ-9012-KL,MN-3456-OP\") \u279e ['IJ-9012-KL', 'MN-3456-OP']\n    check_plates(\"AB-1234-CD,EF-5678-GH,IJ-9012-KL,MN-3456-OP,QR-7890-ST,UV-2345-WX,YZ-6789-ZA\") \u279e ['IJ-9012-KL', 'MN-3456-OP', 'QR-7890-ST']\n    \"\"\"\n    invalid_plates = []\n    plate_list = plates.split(',')\n    for plate in plate_list:\n        if not check_format(plate) or check_invalid_alphabets(plate):\n            invalid_plates.append(plate)\n    return invalid_plates", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/81": [{"task_id": "EvoEval/81", "solution": "def has_uppercase(password):\n    \"\"\"Checks if password contains at least one uppercase letter\"\"\"\n    return any(char.isupper() for char in password)\n\ndef has_lowercase(password):\n    \"\"\"Checks if password contains at least one lowercase letter\"\"\"\n    return any(char.islower() for char in password)\n\ndef has_digit(password):\n    \"\"\"Checks if password contains at least one digit\"\"\"\n    return any(char.isdigit() for char in password)\n\ndef has_special_char(password):\n    \"\"\"Checks if password contains at least one special character\"\"\"\n    special_chars = \"!@#$%^&*\"\n    return any(char in special_chars for char in password)\ndef is_valid_password(password):\n    \"\"\"\n    You are a developer for a large website and you are tasked to implement a function\n    that checks if a user's password is secure. A secure password must meet the following\n    criteria:\n    - At least 8 characters long\n    - Contains at least one uppercase letter\n    - Contains at least one lowercase letter\n    - Contains at least one digit\n    - Contains at least one special character (!, @, #, $, %, ^, &, *)\n\n    If the password does not meet these criteria, the function should return False.\n    Otherwise, it should return True.\n\n    Example:\n    is_valid_password(\"Password1!\") ==> True\n    is_valid_password(\"password\") ==> False\n    \"\"\"\n    if len(password) < 8:\n        return False\n    if not has_uppercase(password):\n        return False\n    if not has_lowercase(password):\n        return False\n    if not has_digit(password):\n        return False\n    if not has_special_char(password):\n        return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/88": [{"task_id": "EvoEval/88", "solution": "def has_duplicates(lst):\n    \"\"\"\n    Given a list, this function checks if the list has any duplicate values.\n    Returns True if duplicates exist, False otherwise.\n    \"\"\"\n    return len(lst) != len(set(lst))\n\ndef min_value(lst):\n    \"\"\"\n    Given a list, this function returns the minimum value in the list.\n    Returns None if the list is empty.\n    \"\"\"\n    if not lst: return None\n    return min(lst)\ndef unique_minimum(lst):\n    \"\"\"\n    Given a list of integers, write a function unique_minimum() that returns the smallest integer in the list. \n    However, if the smallest integer has duplicates in the list, return None. \n    If the list is empty, return None.\n    \n    unique_minimum([1, 2, 3, 4, 5]) == 1\n    unique_minimum([5, 1, 4, 3, 2, 1]) == None\n    unique_minimum([]) == None\n    unique_minimum([1, 1]) == None\n    \"\"\"\n    if not lst:\n        return None\n    min_val = min(lst)\n    if lst.count(min_val) > 1:\n        return None\n    return min_val", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/52": [{"task_id": "EvoEval/52", "solution": "def parse_items(items_str: str):\n    \"\"\"Parses a string of comma-separated items into a list.\n\n    Args:\n        items_str (str): A string of comma-separated items.\n\n    Returns:\n        list: A list of items.\n    \"\"\"\n    return items_str.split(',')\n\ndef check_availability(item: str, available_items: list):\n    \"\"\"Checks if an item is available in the provided list.\n\n    Args:\n        item (str): The item to check.\n        available_items (list): The list of available items.\n\n    Returns:\n        bool: True if the item is available, False otherwise.\n    \"\"\"\n    return item in available_items\ndef place_order(order_str: str, available_items_str: str):\n    \"\"\"Places an order by checking the availability of each item in the order.\n\n    If all items in the order are available, the function returns True, indicating that the order was successfully placed. If not, the function returns False.\n\n    Args:\n        order_str (str): A string of comma-separated items in the order.\n        available_items_str (str): A string of comma-separated available items.\n\n    Returns:\n        bool: True if the order was successfully placed, False otherwise.\n    \"\"\"\n    order = parse_items(order_str)\n    available_items = parse_items(available_items_str)\n    for item in order:\n        if not check_availability(item, available_items):\n            return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/25": [{"task_id": "EvoEval/25", "solution": "from typing import List\n\ndef count_char(email: str, char: str) -> int:\n    \"\"\" Count the occurrence of a specific character in a string \"\"\"\n    return email.count(char)\n\ndef split_email(email: str) -> List[str]:\n    \"\"\" Split an email into parts by '@' and '.' \"\"\"\n    return email.split('@')[1].split('.')\ndef valid_email(email: str) -> bool:\n    \"\"\" Check if an email is valid.\n    An email is valid if it contains only one '@' and one '.' after '@', and there are at least one character before '@', between '@' and '.', and after '.'\n    >>> valid_email(\"test@email.com\")\n    True\n    >>> valid_email(\"invalid_email.com\")\n    False\n    \"\"\"\n    parts = split_email(email)\n    if len(parts) != 2:\n        return False\n    if email.count('@') != 1 or email.count('.') != 1:\n        return False\n    if len(parts[0]) == 0 or len(parts[1]) == 0:\n        return False\n    return True", "base_status": "fail", "plus_status": null, "base_fail_tests": [["invalid_email.com"]], "plus_fail_tests": []}], "EvoEval/26": [{"task_id": "EvoEval/26", "solution": "def is_valid_string(input_string: str) -> bool:\n    \"\"\"\n    Check if a string is valid. A string is valid if it only contains alphanumeric characters (letters and numbers).\n    Returns True if the string is valid, False otherwise.\n    \"\"\"\n    return input_string.isalnum()\nfrom typing import List\n\ndef transform_strings(strings: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of strings, transform each string into a new one according to the following rules:\n    - If the string is valid (only contains alphanumeric characters), reverse the string.\n    - If the string is not valid, replace each non-alphanumeric character with a hyphen '-'.\n    Return the list of transformed strings, keeping the original order.\n    >>> transform_strings(['abc', 'a!b', '123'])\n    ['cba', 'a-b', '321']\n    \"\"\"\n    transformed_strings = []\n    for string in strings:\n        if is_valid_string(string):\n            transformed_strings.append(string[::-1])\n        else:\n            transformed_string = ''\n            for char in string:\n                if not char.isalnum():\n                    transformed_string += '-'\n                else:\n                    transformed_string += char\n            transformed_strings.append(transformed_string)\n    return transformed_strings", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/78": [{"task_id": "EvoEval/78", "solution": "def translate_direction(dir_string):\n    \"\"\"This function translates the direction string (N, S, E, W) into a tuple with respective x and y changes.\n    \"\"\"\n    if dir_string == \"N\":\n        return (0, 1)\n    elif dir_string == \"S\":\n        return (0, -1)\n    elif dir_string == \"E\":\n        return (1, 0)\n    elif dir_string == \"W\":\n        return (-1, 0)\n\ndef is_valid_direction(dir_string):\n    \"\"\"This function checks if the direction string is one of the valid directions (N, S, E, W).\n    \"\"\"\n    return dir_string in [\"N\", \"S\", \"E\", \"W\"]\ndef final_position(start, steps):\n    \"\"\"This function takes in a start position as a tuple (x, y) on a 2D grid, and a list of steps where each step is a tuple (direction, distance), where direction is a string (N, S, E, W) and distance is a positive integer.\n    \n    The function should compute the final position after all steps are taken, and return this position as a tuple (x, y). \n\n    Note: The directions given correspond to North (N - up on the grid), South (S - down on the grid), East (E - right on the grid), West (W - left on the grid).\n    \n    You may assume that all inputs are valid and that the steps list is not empty.\n    \n    Examples:\n    For start = (0, 0) and steps = [(\"N\", 1), (\"E\", 2)], the output should be (2, 1).\n    For start = (3, 3) and steps = [(\"S\", 1), (\"W\", 3), (\"N\", 2)], the output should be (0, 4).\n    For start = (-1, -1) and steps = [(\"E\", 1)], the output should be (0, -1).\n    \"\"\"\n    (x, y) = start\n    for (direction, distance) in steps:\n        (dx, dy) = translate_direction(direction)\n        x += dx * distance\n        y += dy * distance\n    return (x, y)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/19": [{"task_id": "EvoEval/19", "solution": "def is_valid_day(day: str) -> bool:\n    \"\"\"Check if the input string is one of the seven days of the week.\n    \n    Args:\n        day: A string representing the name of the day.\n\n    Returns:\n        bool: True if the string is one of 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday', \n        case sensitive. False otherwise.\n    \"\"\"\n    valid_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    if day.title() in valid_days:\n        return True\n    else:\n        return False\nfrom typing import List\n\ndef sort_days(days: str) -> str:\n    \"\"\"Input is a comma-delimited string of days of the week. \n    Each day is written in English and is case insensitive. \n    Valid days are 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'.\n\n    Return the string with days sorted in the order they appear in a week starting from Monday. \n    If a day is not valid, exclude it from the result.\n\n    >>> sort_days('Sunday, monday, friday')\n    'Monday, Friday, Sunday'\n    \"\"\"\n    valid_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    days_list = days.split(',')\n    sorted_days = []\n    for day in days_list:\n        day = day.strip().title()\n        if day in valid_days:\n            sorted_days.append(day)\n    return ', '.join(sorted_days)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Sunday, monday, friday"]], "plus_fail_tests": []}], "EvoEval/83": [{"task_id": "EvoEval/83", "solution": "def is_valid(booking):\n    \"\"\"\n    Helper function to check if a booking is valid.\n    \n    A booking is valid if it has the following fields:\n    - `id`: a unique integer identifier\n    - `dates`: a list of strings representing the dates of the booking\n    - `room`: an integer representing the room number\n\n    Variables:\n        @booking: dict\n            A dictionary representing a booking.\n\n    Output:\n        boolean\n            Returns True if the booking is valid, False otherwise.\n    \"\"\"\n\n    if 'id' not in booking or type(booking['id']) != int:\n        return False\n    if 'dates' not in booking or type(booking['dates']) != list:\n        return False\n    if 'room' not in booking or type(booking['room']) != int:\n        return False\n\n    for date in booking['dates']:\n        if type(date) != str:\n            return False\n\n    return True\ndef get_conflicting_bookings(bookings):\n    \"\"\"\n    Given a list of bookings, return a list of booking ids that have conflicts.\n\n    A conflict occurs when two or more bookings have the same room and at least one overlapping date.\n    Ignore any invalid bookings\n\n    Example:\n        For bookings = [\n            {'id': 1, 'dates': ['2022-01-01', '2022-01-02'], 'room': 101},\n            {'id': 2, 'dates': ['2022-01-02', '2022-01-03'], 'room': 101},\n            {'id': 3, 'dates': ['2022-01-01', '2022-01-02'], 'room': 102},\n        ], the output should be [1, 2] because bookings 1 and 2 conflict.\n\n    Variables:\n        @bookings: list of dict\n            A list of dictionaries where each dictionary represents a hotel booking. Each dictionary must have the following keys:\n            - 'id' (int): The unique identifier for the booking.\n            - 'dates' (list): A list of strings representing the booked dates in the format 'YYYY-MM-DD'.\n            - 'room' (int): The room number for the booking.\n            Constraints: 1 \u2264 bookings.length \u2264 10000, 1 \u2264 bookings[i].length \u2264 365, all bookings are valid\n\n    Output:\n         list of integer\n            Returns the list of booking ids that have conflicts.\n    \"\"\"\n\n    def is_overlapping(dates1, dates2):\n        return bool(set(dates1) & set(dates2))\n    valid_bookings = [booking for booking in bookings if is_valid(booking)]\n    conflicting_ids = []\n    for i in range(len(valid_bookings)):\n        for j in range(i + 1, len(valid_bookings)):\n            if valid_bookings[i]['room'] == valid_bookings[j]['room'] and is_overlapping(valid_bookings[i]['dates'], valid_bookings[j]['dates']):\n                conflicting_ids.append(valid_bookings[i]['id'])\n                conflicting_ids.append(valid_bookings[j]['id'])\n    return list(set(conflicting_ids))", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/57": [{"task_id": "EvoEval/57", "solution": "def check_balance(brackets: str) -> bool:\n    \"\"\"Check if the provided string of brackets is balanced.\n    >>> check_balance('()')\n    True\n    >>> check_balance('()[]')\n    True\n    >>> check_balance('([)]')\n    False\n    >>> check_balance(']')\n    False\n    \"\"\"\n    bracket_map = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    open_par = set([\"(\", \"[\", \"{\"])\n    stack = []\n    for i in brackets:\n        if i in open_par:\n            stack.append(i)\n        elif stack and i == bracket_map[stack[-1]]:\n            stack.pop()\n        else:\n            return False\n    return stack == []\ndef validate_code_blocks(code: str):\n    \"\"\"\n    Given a string representing blocks of code, return True if every code block is properly nested and formatted.\n    Code blocks are denoted by '{' and '}'. Parentheses '()' can be used for other purposes, such as function calls or conditional statements, and can be nested within themselves.\n    If a code block is not properly formatted or a set of parenthesis is not balanced, return False.\n\n    >>> validate_code_blocks('int main() { return 0; }')\n    True\n    >>> validate_code_blocks('int add(int a, int b) { return a + b; } int subtract(int a, int b) { return a - b; }')\n    True\n    >>> validate_code_blocks('int divide(int a, int b) { if (b != 0) { return a / b; } return -1; }')\n    True\n    >>> validate_code_blocks('int multiply(int a, int b) { return a * b; ')\n    False\n    \"\"\"\n    stack = []\n    for char in code:\n        if char == '{':\n            stack.append(char)\n        elif char == '}':\n            if not stack or stack.pop() != '{':\n                return False\n    return not stack", "base_status": "fail", "plus_status": null, "base_fail_tests": [["int main({ return 0; }"]], "plus_fail_tests": []}], "EvoEval/47": [{"task_id": "EvoEval/47", "solution": "def validate_coordinates(coordinates: str) -> bool:\n    \"\"\"\n    Helper function to validate the coordinates format\n    Takes a string representation of the coordinates as input\n    The accepted format is two numbers separated by a comma and\n    a space like: '23.5, -45.6'\n    Returns True if the input string is in correct format, False otherwise\n\n    >>> validate_coordinates('23.5, -45.6')\n    True\n    >>> validate_coordinates('23.5,-45.6')\n    False\n    >>> validate_coordinates('23.5 -45.6')\n    False\n    \"\"\"\n    parts = coordinates.split(', ')\n    if len(parts) != 2:\n        return False\n\n    try:\n        float(parts[0])\n        float(parts[1])\n    except ValueError:\n        return False\n\n    return True\ndef calculate_distance(coordinates1: str, coordinates2: str) -> float:\n    \"\"\"\n    Write a function to calculate the distance between two points on Earth\n    represented by their coordinates. The coordinates are represented as\n    strings with the format 'latitude, longitude'. The latitude and longitude\n    values are in decimal degrees. Use the Haversine formula to calculate the distance:\n        a = sin\u00b2(\u0394latDifference/2) + cos(lat1)*cos(lt2)*sin\u00b2(\u0394lonDifference/2) \n        c = 2*atan2(\u221aa, \u221a(1\u2212a))\n        distance= 6371 *c\n    \n    The result should be in kilometers. Round the result to the nearest integer.\n    \n    You can assume that the Earth is a perfect sphere with a radius of 6371 kilometers.\n    \n    The function should return -1 if any of the coordinate strings is in incorrect format.\n\n    >>> calculate_distance('48.8566, 2.3522', '40.7128, -74.0060')\n    5837\n    >>> calculate_distance('90.0, 0', '0, 0')\n    10008\n    >>> calculate_distance('90.0, 0', '90.0, 0')\n    0\n    \"\"\"\n    if not validate_coordinates(coordinates1) or not validate_coordinates(coordinates2):\n        return -1\n    (lat1, lon1) = map(float, coordinates1.split(', '))\n    (lat2, lon2) = map(float, coordinates2.split(', '))\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    distance = 6371 * c\n    return round(distance)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["48.8566, 2.3522", "40.7128, -74.0060"]], "plus_fail_tests": []}], "EvoEval/85": [{"task_id": "EvoEval/85", "solution": "def is_valid_string(input_string):\n    \"\"\"Check if a given string is valid. \n    A string is valid if it does not contain any special characters (!@#$%^&*()-_+={}[]|\\/:;<>,.?).\n\n    Returns True if the string is valid, False otherwise.\n    \"\"\"\n    special_chars = \"!@#$%^&*()-_+={}[]|\\/:;<>,.?\"\n    for char in input_string:\n        if char in special_chars:\n            return False\n    return True\n\ndef is_valid_length(input_string):\n    \"\"\"Check if a given string is of valid length.\n    A string is of valid length if it is not empty and has 10 or less characters.\n\n    Returns True if the string is of valid length, False otherwise.\n    \"\"\"\n    if len(input_string) == 0 or len(input_string) > 10:\n        return False\n    return True\ndef string_processing(input_string):\n    \"\"\"You will be given a string. Your task is to process this string and return a new string.\n\n    The processing should happen in the following manner:\n    - If the first character of the string is 'a', add \"123\" at the end\n    - If the first character of the string is 'b', reverse the string\n    - If the first character of the string is 'c', replace all 'e's in the string with 'i'\n    - If the first character of the string is neither 'a', 'b', nor 'c', return the string as is\n\n    The returned string should be in lowercase.\n\n    Note: For this function to work correctly:\n    - The string should not contain any special characters (!@#$%^&*()-_+={}[]|\\\\/:;<>,.?)\n    - The string should be not empty and contain 10 or less characters\n    - return \"Invalid input string\" if it violates the above rules\n\n    Examples:\n    string_processing(\"apple\")   # returns \"apple123\"\n    string_processing(\"Banana\")  # returns \"ananabb\"\n    string_processing(\"celery\")  # returns \"ciliry\"\n    string_processing(\"donut\")   # returns \"donut\"\n    \"\"\"\n    if not is_valid_string(input_string) or not is_valid_length(input_string):\n        return 'Invalid input string'\n    first_char = input_string[0].lower()\n    if first_char == 'a':\n        return input_string + '123'\n    elif first_char == 'b':\n        return input_string[::-1]\n    elif first_char == 'c':\n        return input_string.replace('e', 'i')\n    else:\n        return input_string.lower()", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Banana"]], "plus_fail_tests": []}], "EvoEval/10": [{"task_id": "EvoEval/10", "solution": "from datetime import datetime\n\n\ndef parse_date(date_str: str) -> datetime:\n    try:\n        return datetime.strptime(date_str, \"%Y-%m-%d\")\n    except ValueError:\n        return None\ndef register_user(user_data: dict) -> bool:\n    if 'name' not in user_data or 'dob' not in user_data or 'email' not in user_data:\n        return False\n    if not user_data['name'] or not user_data['email']:\n        return False\n    dob = parse_date(user_data['dob'])\n    if dob is None:\n        return False\n    return True", "base_status": "fail", "plus_status": null, "base_fail_tests": [[{"name": 123, "dob": "1990-01-01", "email": "john.doe@example.com"}]], "plus_fail_tests": []}], "EvoEval/71": [{"task_id": "EvoEval/71", "solution": "def is_valid_date(date_string):\n    '''\n    A helper function to check if a given string is a valid date in format \"dd-mm-yyyy\"\n    Returns True if valid, False otherwise\n    '''\n    day, month, year = date_string.split('-')\n    if len(day) != 2 or len(month) != 2 or len(year) != 4:\n        return False\n    if not day.isdigit() or not month.isdigit() or not year.isdigit():\n        return False\n    d, m, y = int(day), int(month), int(year)\n    if m < 1 or m > 12 or d < 1 or d > 31:\n        return False\n    if m in [4, 6, 9, 11] and d > 30:\n        return False\n    if m == 2 and (d > 29 or (d > 28 and (y % 4 != 0 or (y % 100 == 0 and y % 400 != 0)))):\n        return False\n    return True\ndef get_age_at_date(date_of_birth, at_date):\n    \"\"\"\n    Given a person's date of birth and a specific date, both in the format \"dd-mm-yyyy\", \n    return the age of the person at the specific date in years rounded down to the nearest whole \n    year. If the dates are not valid or the date of birth comes after the specific date, return -1.\n    Example:\n    get_age_at_date(\"01-01-2000\", \"01-01-2020\") == 20\n    get_age_at_date(\"01-01-2020\", \"01-01-2000\") == -1\n    get_age_at_date(\"01-01-2000\", \"01-02-2020\") == 20\n    get_age_at_date(\"01-01-2000\", \"31-12-2019\") == 19\n    \"\"\"\n    if not is_valid_date(date_of_birth) or not is_valid_date(at_date):\n        return -1\n    (day_birth, month_birth, year_birth) = date_of_birth.split('-')\n    (day_at, month_at, year_at) = at_date.split('-')\n    birth_date = (int(year_birth), int(month_birth), int(day_birth))\n    at_date = (int(year_at), int(month_at), int(day_at))\n    if birth_date > at_date:\n        return -1\n    age = int(year_at) - int(year_birth)\n    if (int(month_at), int(day_at)) < (int(month_birth), int(day_birth)):\n        age -= 1\n    return age", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/31": [{"task_id": "EvoEval/31", "solution": "def is_valid_input(string):\n    \"\"\"\n    A function to validate if the given input string consists of only alphanumeric characters.\n    \n    :param string: A string value\n    :return: True if the string contains only alphanumeric characters, False otherwise\n    \"\"\"\n    if string.isalnum():\n        return True\n    return False\ndef count_uppercase_lowercase(string):\n    \"\"\"\n    A function to count the number of uppercase and lowercase characters in the given string.\n\n    If non-alphanumeric characters exist in the input, sets the count of uppercase and lowercase to -1 in the output.\n\n    :param string: A string value\n    :return: A dictionary with two keys 'uppercase' and 'lowercase', containing the count of uppercase and lowercase characters respectively.\n\n    >>> count_uppercase_lowercase('HelloWorld')\n    {'uppercase': 2, 'lowercase': 8}\n    >>> count_uppercase_lowercase('GoodBye')\n    {'uppercase': 2, 'lowercase': 5}\n    >>> count_uppercase_lowercase('MorningSun')\n    {'uppercase': 2, 'lowercase': 8}\n    >>> count_uppercase_lowercase('NightMoon')\n    {'uppercase': 2, 'lowercase': 7}\n    >>> count_uppercase_lowercase('BadWeather')\n    {'uppercase': 2, 'lowercase': 8}\n    \"\"\"\n    if not is_valid_input(string):\n        return {'uppercase': -1, 'lowercase': -1}\n    uppercase_count = sum((1 for char in string if char.isupper()))\n    lowercase_count = sum((1 for char in string if char.islower()))\n    return {'uppercase': uppercase_count, 'lowercase': lowercase_count}", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/14": [{"task_id": "EvoEval/14", "solution": "from typing import List\n\ndef validate_isbn(isbn: str) -> bool:\n    \"\"\"\n    Helper function that checks if a string is a valid ISBN-10 or ISBN-13\n    It assumes that the ISBN string is either 10 or 13 characters long with no hyphens.\n    This function does not perform a thorough validation of the ISBN format,\n    but merely checks the length and checks that all characters are digits\n    (the last character in an ISBN-10 may be an 'X').\n\n    >>> validate_isbn('0123456789')\n    True\n    >>> validate_isbn('01234567890AB')\n    False\n    >>> validate_isbn('0123456789X')\n    True\n    \"\"\"\n    if len(isbn) not in [10, 13]:\n        return False\n    if len(isbn) == 13:\n        return isbn.isdigit()\n    if not isbn[:-1].isdigit():\n        return False\n    if len(isbn) == 10 and isbn[-1] not in \"0123456789X\":\n        return False\n    return True\n\nfrom typing import List\n\ndef find_valid_isbns(isbn_list: List[str]) -> List[str]:\n    \"\"\"\n    Given a list of strings, return a list of all valid ISBNs.\n    An ISBN is a 10 or 13 character string. The first 9 characters are all digits. \n    The last character can be 0-9 or 'X'. For a 13 character ISBN, all characters are digits.\n    \n    >>> find_valid_isbns(['0123456789', '01234567890AB', '012345678X'])\n    ['0123456789', '012345678X']\n    \"\"\"\n    return [isbn for isbn in isbn_list if validate_isbn(isbn)]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/16": [{"task_id": "EvoEval/16", "solution": "def is_vowel(char: str) -> bool:\n    \"\"\" \n    Given a character, determine if it's a vowel.\n    >>> is_vowel('a')\n    True\n    >>> is_vowel('b')\n    False\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return char in vowels\n\ndef is_consonant(char: str) -> bool:\n    \"\"\" \n    Given a character, determine if it's a consonant.\n    >>> is_consonant('b')\n    True\n    >>> is_consonant('a')\n    False\n    \"\"\"\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', \n                  'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n    return char in consonants\ndef find_vowel_consonant_ratio(string: str) -> float:\n    \"\"\" Given a string, find the ratio of vowels to consonants (rounded to 2 decimal places). The function should return -1 if no consonant is found. \n    The string only contains alphabets and is case insensitive.\n    >>> find_vowel_consonant_ratio('Hello')\n    0.67\n    >>> find_vowel_consonant_ratio('Rhythm')\n    0.0\n    >>> find_vowel_consonant_ratio('AEIOU')\n    -1\n    \"\"\"\n    vowels_count = 0\n    consonants_count = 0\n    for char in string:\n        if is_vowel(char):\n            vowels_count += 1\n        elif is_consonant(char):\n            consonants_count += 1\n    if consonants_count == 0:\n        return -1\n    ratio = round(vowels_count / consonants_count, 2)\n    return ratio", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/82": [{"task_id": "EvoEval/82", "solution": "def convert_to_minutes(time):\n    \"\"\"\n    Converts the time from \"HH:MM\" format to minutes\n    \"\"\"\n    hours, minutes = map(int, time.split(':'))\n    return hours * 60 + minutes\ndef time_difference(time1, time2):\n    \"\"\"\n    Given two times in \"HH:MM\" format, find the difference in minutes between the two times.\n    If the second time is earlier than the first, it is assumed that the second time is on the next day.\n    Both time1 and time2 are assumed to be valid times.\n    Return the difference in minutes.\n    \"\"\"\n    minutes1 = convert_to_minutes(time1)\n    minutes2 = convert_to_minutes(time2)\n    if minutes2 < minutes1:\n        minutes2 += 24 * 60\n    return minutes2 - minutes1", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/32": [{"task_id": "EvoEval/32", "solution": "def is_starting_char(ch: str) -> bool:\n  \"\"\"\n  Checks whether given character is a valid starting character for a variable name in our language.\n  Our language allows a variable to start with an underscore or a letter.\n  \"\"\"\n  if ch.isalpha() or ch == '_':\n    return True\n  return False\n\ndef is_valid_char(ch: str) -> bool:\n  \"\"\"\n  Checks whether given character is a valid character for a variable name in our language.\n  Our language allows a variable to contain underscores, letters and digits.\n  \"\"\"\n  if ch.isalpha() or ch == '_' or ch.isdigit():\n    return True\n  return False\ndef validate_identifier(identifier: str) -> bool:\n    \"\"\"\n  In our programming language, an identifier is valid if it starts with a letter or an underscore,\n  and the rest of the identifier can contain any combination of letters, digits, and underscores.\n\n  This function should return True if given string is a valid identifier in our language, and False otherwise.\n\n  >>> validate_identifier(\"_valid_variable\")\n  True\n  >>> validate_identifier(\"2_invalid_variable\")\n  False\n  \"\"\"\n    if not identifier:\n        return False\n    if not is_starting_char(identifier[0]):\n        return False\n    for ch in identifier[1:]:\n        if not is_valid_char(ch):\n            return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/89": [{"task_id": "EvoEval/89", "solution": "def split_sentences(text):\n    \"\"\"\n    Given a text, it splits it into sentences. Sentences are delimited by '.', '?' or '!'.\n    This function returns a list of sentences where each sentence is a list of words.\n\n    For example:\n    >>> split_sentences(\"Hello world. How are you?\")\n    [[\"Hello\", \"world\"], [\"How\", \"are\", \"you\"]]\n    \"\"\"\n    import re\n\n    return [sentence.split() for sentence in re.split(\"[.!?]\", text) if sentence]\ndef is_happy(S):\n    import re\n\n    def split_sentences(text):\n        return [sentence.split() for sentence in re.split('[.!?]', text) if sentence]\n    sentences = split_sentences(S)\n    count = 0\n    for sentence in sentences:\n        if sentence[-1].lower() == 'happy':\n            count += 1\n    return count", "base_status": "fail", "plus_status": null, "base_fail_tests": [["happy Happy HAPPY happY."]], "plus_fail_tests": []}], "EvoEval/35": [{"task_id": "EvoEval/35", "solution": "def is_valid(c: str):\n    \"\"\" Check if character is valid for parsing.\n    Args:\n        c (str): The character to check.\n    Returns:\n        bool: True if valid, False otherwise.\n    \"\"\"\n    return c.isalnum() or c.isspace()\n\ndef remove_invalid(s: str):\n    \"\"\" Remove invalid characters from string.\n    Args:\n        s (str): The string to parse.\n    Returns:\n        str: The parsed string.\n    \"\"\"\n    return \"\".join(c for c in s if is_valid(c))\ndef count_unique_words(s: str):\n    \"\"\"\n    Return the number of unique words in the string. Words are defined as contiguous sequences \n    of alphanumeric characters, separated by spaces. All words should be transformed to \n    lower case before counting.\n    \n    Args:\n        s (str): The string to parse.\n        \n    Returns:\n        int: The number of unique words.\n        \n    Example:\n    >>> count_unique_words(\"Hello world, welcome to the universe!\")\n    6\n    >>> count_unique_words(\"Python is great. Python is fun!\")\n    4\n    \"\"\"\n    s = remove_invalid(s)\n    words = s.lower().split()\n    unique_words = set(words)\n    return len(unique_words)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/92": [{"task_id": "EvoEval/92", "solution": "def check_for_special_characters(input_string):\n    \"\"\"\n    Helper Function:\n    Write a function that takes a string, \n    and checks if it has any special characters.\n    \n    Returns true if it has any special characters, else returns false.\n    \n    Examples:\n    >>> check_for_special_characters('Test123')\n    False\n    >>> check_for_special_characters('Test@123')\n    True\n    \"\"\"\n    special_chars = \"!@#$%^&*()-+?_=,<>/\"\n    return any(c in special_chars for c in input_string)\ndef convert_strings(input_list):\n    \"\"\"\n    Write a function that takes a list of strings and converts the strings \n    in the following way:\n    1. If the string has any special characters (\"!@#$%^&*()-+?_=,<>/\"), remove those characters.\n    2. If the string has any numbers, replace those numbers with their \n       corresponding english words (e.g., '1' to 'ONE').\n    3. Make all the characters in the string uppercase.\n    \n    Return the converted list of strings.\n\n    Assume each string in the list only contains alphanumeric characters and \n    possible special characters. The list can be empty, but will not contain \n    any non-string elements.\n\n    Examples:\n    >>> convert_strings(['test', '123', 'Test@123'])\n    ['TEST', 'ONETWOTHREE', 'TESTONETWOTHREE']\n    >>> convert_strings(['', 'test1', '2test'])\n    ['', 'TESTONE', 'TWOTEST']\n    \"\"\"\n    converted_list = []\n    for string in input_list:\n        converted_string = ''\n        for char in string:\n            if char.isalpha():\n                converted_string += char.upper()\n            elif char.isdigit():\n                if char == '0':\n                    converted_string += 'ZERO'\n                elif char == '1':\n                    converted_string += 'ONE'\n                elif char == '2':\n                    converted_string += 'TWO'\n                elif char == '3':\n                    converted_string += 'THREE'\n                elif char == '4':\n                    converted_string += 'FOUR'\n                elif char == '5':\n                    converted_string += 'FIVE'\n                elif char == '6':\n                    converted_string += 'SIX'\n                elif char == '7':\n                    converted_string += 'SEVEN'\n                elif char == '8':\n                    converted_string += 'EIGHT'\n                elif char == '9':\n                    converted_string += 'NINE'\n            elif char.isalnum():\n                converted_string += char\n        converted_list.append(converted_string)\n    return converted_list", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["!@#$", "%^&*", "()-+?_=,<>/"]]], "plus_fail_tests": []}], "EvoEval/40": [{"task_id": "EvoEval/40", "solution": "def is_valid_date(date: str) -> bool:\n    \"\"\"\n    A helper function that checks if a given date in 'yyyy-mm-dd'\n    format is valid. This function assumes non-leap years and all months \n    have 30 days for simplicity.\n    \"\"\"\n    year, month, day = map(int, date.split(\"-\"))\n    return (1 <= month <= 12) and (1 <= day <= 30)\n\ndef is_alphanumeric(password: str) -> bool:\n    \"\"\"\n    A helper function that checks if a given password is alphanumeric, i.e., \n    it contains both numbers and letters.\n    \"\"\"\n    return any(char.isdigit() for char in password) and any(char.isalpha() for char in password)\ndef create_user_account(username: str, password: str, date_of_birth: str):\n    \"\"\"\n    The function takes a username, password and date of birth as input and\n    creates a new user account. The function should ensure the following:\n\n    1) The username should not be empty and should not contain special characters.\n    2) The password should be alphanumeric (contains both numbers and letters).\n    3) The date of birth should be a valid date in 'yyyy-mm-dd' format. This function assumes non-leap years and all months\n    have 30 days for simplicity.\n\n    If any of the above conditions are not met, the function should return\n    \"Unsuccessful account creation\".\n    If all conditions are met, the function should return \"Successful account creation\".\n    \"\"\"\n    if not username or any((not char.isalnum() for char in username)):\n        return 'Unsuccessful account creation'\n    if not is_alphanumeric(password):\n        return 'Unsuccessful account creation'\n    if not is_valid_date(date_of_birth):\n        return 'Unsuccessful account creation'\n    return 'Successful account creation'", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/94": [{"task_id": "EvoEval/94", "solution": "def check_date(date):\n    \"\"\"\n    Helper function to check if a given date string is valid or not\n    Input: string in the format 'yyyy-mm-dd'\n    Output: True if the date is valid, False otherwise\n    \"\"\"\n    import datetime\n    try:\n        year, month, day = map(int, date.split('-'))\n        datetime.datetime(year, month, day)\n        return True\n    except ValueError:\n        return False\ndef calculate_duration(dates):\n    \"\"\"You are given a list of dates in 'yyyy-mm-dd' format.\n    You need to find the oldest and the most recent date in the list, and return the difference between them in days.\n\n    Assumptions:\n    1. All dates in the list are valid dates in 'yyyy-mm-dd' format\n    2. The list contains at least two different dates\n\n    Examples:\n    For dates = ['2021-01-01', '2021-12-31'] the output should be 364\n    For dates = ['2021-12-31', '2020-12-31'] the output should be 365\n    For dates = ['2019-06-01', '2018-06-01', '2020-06-01'] the output should be 731\n    For dates = ['2022-08-01', '2022-09-01', '2022-07-01'] the output should be 62\n    \"\"\"\n    import datetime\n    date_objects = [datetime.datetime.strptime(date, '%Y-%m-%d') for date in dates]\n    oldest_date = min(date_objects)\n    most_recent_date = max(date_objects)\n    duration = (most_recent_date - oldest_date).days\n    return duration", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/2": [{"task_id": "EvoEval/2", "solution": "def is_valid_email(email: str) -> bool:\n    \"\"\"Checks if the given email is valid. A valid email has the following format:\n    local@domain where local and domain are not empty and do not contain any spaces.\n    \n    Args:\n        email (str): The email to check.\n        \n    Returns:\n        bool: True if the email is valid, False otherwise.\n    \"\"\"\n    if email.count(\"@\") != 1:\n        return False\n\n    local, domain = email.split(\"@\")\n    \n    if not local or not domain or \" \" in email:\n        return False\n\n    return True\n\n\ndef is_valid_password(password: str) -> bool:\n    \"\"\"Checks if the given password is valid. A valid password has at least 8 characters,\n    at least one uppercase letter, at least one lowercase letter and at least one number.\n    \n    Args:\n        password (str): The password to check.\n        \n    Returns:\n        bool: True if the password is valid, False otherwise.\n    \"\"\"\n    if len(password) < 8:\n        return False\n\n    if not any(char.isdigit() for char in password):\n        return False\n\n    if not any(char.isupper() for char in password):\n        return False\n\n    if not any(char.islower() for char in password):\n        return False\n\n    return True\ndef register_user(email: str, password: str, confirmation: str) -> str:\n    \"\"\"Given an email, a password and a confirmation of the password, register a new user\n    into the system.\n\n    A valid email has the following format:\n    local@domain where local and domain are not empty and do not contain any spaces.\n    A valid password has at least 8 characters,\n    at least one uppercase letter, at least one lowercase letter and at least one number.\n    The password and its confirmation should be identical.\n    If all conditions are met, return \"User registered successfully\".\n\n    If the email is not valid, return \"Invalid email\".\n    If the password is not valid, return \"Invalid password\".\n    If the password and its confirmation are not identical, return \"Password and confirmation do not match\".\n\n    Args:\n        email (str): The email of the user.\n        password (str): The password of the user.\n        confirmation (str): The confirmation of the password.\n\n    Returns:\n        str: A message indicating the result of the registration.\n    \"\"\"\n    if not is_valid_email(email):\n        return 'Invalid email'\n    if not is_valid_password(password):\n        return 'Invalid password'\n    if password != confirmation:\n        return 'Password and confirmation do not match'\n    return 'User registered successfully'", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/76": [{"task_id": "EvoEval/76", "solution": "def validate_input(input_dict):\n    \"\"\"\n    This is a helper function which is used to validate the input dictionary. \n    It takes a dictionary as an input and returns True if all the keys in the \n    dictionary are strings and all the values are integers, otherwise returns False.\n    \"\"\"\n    for key, value in input_dict.items():\n        if not isinstance(key, str):\n            return False\n        if not isinstance(value, int):\n            return False\n    return True\ndef find_maximum(input_dict):\n    \"\"\"\n    Write a function that takes a dictionary where keys are strings and values are integers.\n    This function should return a tuple with the string(key) that has the highest integer(value) \n    along with the maximum integer. If the dictionary is empty, return an empty dictionary.\n    If the dictionary does contain all string as keys and integer as values, return \"Invalid input\"\n    Note: you may assume all strings are different and the input dictionary will not contain \n    duplicate values.\n\n    Examples:\n    find_maximum({'a':1, 'b':3, 'c':2}) ==> ('b', 3)\n    find_maximum({}) ==> {}\n    find_maximum({'apple':5, 'banana':3, 'cherry':7, 'date':2}) ==> ('cherry', 7)\n    find_maximum({'one':1, 'two':2, 'three':3, 'four':4}) ==> ('four', 4)\n    \"\"\"\n    if not validate_input(input_dict):\n        return 'Invalid input'\n    if not input_dict:\n        return {}\n    max_key = max(input_dict, key=input_dict.get)\n    max_value = input_dict[max_key]\n    return (max_key, max_value)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/65": [{"task_id": "EvoEval/65", "solution": "def parse_input(input_string):\n    \"\"\"\n    Helper function to parse the input string and return a list of words.\n    The input_string should be a sentence where each word is separated by a space.\n    If the input_string is not valid (not a string or empty), an error should be raised.\n    \"\"\"\n    if not isinstance(input_string, str) or not input_string:\n        raise ValueError(\"Invalid input. Please enter a valid string.\")\n    return input_string.split()\ndef rearrange_words(input_string, arrangement_order):\n    \"\"\"\n    Rearrange the words in input_string according to the order specified in arrangement_order.\n    Arrangement_order should be a list of indices.\n    The rearrangement should be done such that the word at the index in the original string \n    goes to the corresponding position in the arrangement_order.\n    If a word in the input_string is repeated, the function should prioritize the first occurrence \n    of the word for rearranging.\n    If arrangement_order contains an index that is not in the input_string, return \"Invalid arrangement order\"\n    \n    The function should return the rearranged sentence as a string.\n    \n    >>> rearrange_words('The quick brown fox jumps over the lazy dog', [8, 7, 0, 1, 2, 3, 4, 5, 6])\n    'dog lazy The quick brown fox jumps over the'\n    >>> rearrange_words('I love to code in Python', [4, 3, 2, 1, 0])\n    'in code to love I'\n    \"\"\"\n    words = parse_input(input_string)\n    if any((index >= len(words) for index in arrangement_order)):\n        return 'Invalid arrangement order'\n    rearranged_words = [words[index] for index in arrangement_order]\n    return ' '.join(rearranged_words)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["The quick brown fox jumps over the lazy dog", [8, 7, -1, 1, 2, 3, 4, 5, 6]]], "plus_fail_tests": []}], "EvoEval/22": [{"task_id": "EvoEval/22", "solution": "from typing import List, Any, Dict\n\ndef check_type(value: Any) -> str:\n    \"\"\"\n    This helper function checks the type of the given value and returns a string representation of the type.\n    \"\"\"\n    if isinstance(value, int):\n        return 'int'\n    elif isinstance(value, float):\n        return 'float'\n    elif isinstance(value, str):\n        return 'str'\n    else:\n        return 'other'\n\n\ndef check_empty(value: Any) -> bool:\n    \"\"\"\n    This helper function checks if a given iterable (like list or string) is empty and returns a boolean.\n    \"\"\"\n    if isinstance(value, str) or isinstance(value, list):\n        return len(value) == 0\n    else:\n        return False\nfrom typing import List, Any, Dict\n\ndef categorize_values(values: List[Any]) -> Dict[str, List[Any]]:\n    \"\"\"\n    Categorize a list of any python values based on their type and special attributes.\n\n    - 'int', 'float', 'str', 'other' based on their type\n    - 'empty' if an iterable (like list or string) is empty\n\n    The result is a dictionary where the keys are categories ('int', 'float', 'str', 'other', 'empty') and the values are lists containing the corresponding values from the input list.\n\n    >>> categorize_values(['a', 3.14, 5])\n    {'str': ['a'], 'float': [3.14], 'int': [5], 'other': [], 'empty': []}\n\n    >>> categorize_values([1, 2, 'abc', {}, []])\n    {'str': ['abc'], 'float': [], 'int': [1, 2], 'other': [{}], 'empty': [[]]}\n    \"\"\"\n    categorized_values = {'int': [], 'float': [], 'str': [], 'other': [], 'empty': []}\n    for value in values:\n        if check_empty(value):\n            categorized_values['empty'].append(value)\n        else:\n            type_category = check_type(value)\n            categorized_values[type_category].append(value)\n    return categorized_values", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/98": [{"task_id": "EvoEval/98", "solution": "def check_grids(grid):\n    for row in range(0,9,3):\n        for col in range(0,9,3):\n            nums = grid[row][col:col+3] + grid[row+1][col:col+3] + grid[row+2][col:col+3]\n            if len(set(nums)) != 9 or 0 in nums:\n                return False\n    return True\n\ndef check_rows(grid):\n    for row in grid:\n        if len(set(row)) != 9 or 0 in row:\n            return False\n    return True\n\ndef check_columns(grid):\n    for col in range(9):\n        check = []\n        for row in grid:\n            check.append(row[col])\n        if len(set(check)) != 9 or 0 in check:\n            return False\n    return True\n", "base_status": "fail", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/34": [{"task_id": "EvoEval/34", "solution": "def parse_string(s: str):\n    \"\"\"Split a string into words\n    Args:\n        s (str): Input string\n    Returns:\n        list: List of words in the string\n    \"\"\"\n    return s.split()\n\n\ndef is_digit(s: str):\n    \"\"\"Check if a string is a number or not \n    Args:\n        s (str): Input string\n    Returns:\n        bool: True if the string is a number, False otherwise\n    \"\"\"\n    return s.isdigit()\ndef sorted_values(s: str):\n    \"\"\"Return sorted list of unique integers found in the input string. The string can contain words and numbers\n    >>> sorted_values(\"123 apple 456 apple 123 456 banana 789\")\n    [123, 456, 789]\n    Args:\n        s (str): Input string\n    Returns:\n        list: Sorted list of unique numbers found in the string\n    \"\"\"\n    numbers = []\n    for word in s.split():\n        if is_digit(word):\n            numbers.append(int(word))\n    return sorted(set(numbers))", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/63": [{"task_id": "EvoEval/63", "solution": "def parse_arguments(args: list):\n    \"\"\"Extracts and verifies arguments from a list of mixed data types.\n\n    The list is expected to contain one string, one integer and one list of integers, in any order.\n    The string should represent a mathematical operation (either 'sum' or 'product').\n\n    If the arguments are not as expected, it returns the string \"Invalid arguments\".\n\n    Args:\n    args (list): A list containing a string, an integer and a list of integers.\n\n    Returns:\n    str: The mathematical operation.\n    int: The number.\n    list: The list of numbers.\n\n    Examples:\n    >>> parse_arguments(['sum', 3, [1, 2, 3, 4]])\n    ('sum', 3, [1, 2, 3, 4])\n    >>> parse_arguments([2, [2, 3], 'product'])\n    ('product', 2, [2, 3])\n    >>> parse_arguments([1, 2, 3])\n    'Invalid arguments'\n    \"\"\"\n    operation = [x for x in args if type(x) is str]\n    number = [x for x in args if type(x) is int]\n    numbers = [x for x in args if type(x) is list]\n\n    if len(operation) != 1 or len(number) != 1 or len(numbers) != 1:\n        return \"Invalid arguments\"\n\n    return operation[0], number[0], numbers[0]\ndef perform_operation(args: list):\n    \"\"\"Parses the arguments and performs a mathematical operation on a list of numbers.\n\n    The arguments contain one string, one integer number and one list of integers, in any order.\n    The string should represent a mathematical operation and can be\n    either 'sum' or 'product'. The operation is performed on each number in the list,\n    and the result is increased by the specified number. The function returns the total sum\n    or product. If the arguments are invalid or not correctly formatted, return 'Invalid arguments'\n\n    Args:\n    args (list): A list containing a string representing the operation, an integer to increase the result\n    and a list of integers.\n\n    Returns:\n    int: The total sum or product.\n\n    Examples:\n    >>> perform_operation(['sum', 3, [1, 2, 3, 4]])\n    13\n    >>> perform_operation([2, [2, 3], 'product'])\n    8\n    \"\"\"\n    parsed_args = parse_arguments(args)\n    if parsed_args == 'Invalid arguments':\n        return 'Invalid arguments'\n    (operation, number, numbers) = parsed_args\n    if operation == 'sum':\n        result = sum(numbers) + number\n    elif operation == 'product':\n        result = 1\n        for num in numbers:\n            result *= num\n        result += number\n    else:\n        return 'Invalid arguments'\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/96": [{"task_id": "EvoEval/96", "solution": "def parse_to_list(string):\n    \"\"\"Parse a string of comma-separated numbers into a list of integers. \n    Assume the input string is always valid.\n    Example:\n    parse_to_list(\"1,2,3\") should return [1,2,3].\n    parse_to_list(\"10,20,30,40\") should return [10,20,30,40].\n    \"\"\"\n    return [int(i) for i in string.split(\",\")]\ndef find_special_triplet(numbers_string):\n    \"\"\"Complete the function that takes in a string of comma-separated integers and returns the first \"special\" triplet from the list if it exists. A \"special\" triplet is a sequence of three numbers (x, y, z) that appear consecutively in the list, such that x < y and y < z. If no such triplet exists, the function should return an empty list. Return the first triplet in the order of appearance in the list\n    Assume the input string is always valid and each number in the string is an integer between 1 and 100 (both inclusive).\n\n    Examples:\n    find_special_triplet(\"1,2,3,4\") should return [1,2,3].\n    find_special_triplet(\"10,20,30,40\") should return [10,20,30].\n    find_special_triplet(\"100,99,98\") should return [].\n    \"\"\"\n    numbers = parse_to_list(numbers_string)\n    for i in range(len(numbers) - 2):\n        if numbers[i] < numbers[i + 1] and numbers[i + 1] < numbers[i + 2]:\n            return [numbers[i], numbers[i + 1], numbers[i + 2]]\n    return []", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/20": [{"task_id": "EvoEval/20", "solution": "from typing import List\n\ndef parse_sentence(sentence: str) -> List[str]:\n    \"\"\" \n    Parses a sentence into a list of words.\n    Input is a string which is a valid sentence in English.\n    Returns a list of words in the sentence.\n    \"\"\"\n    words = sentence.split(\" \")\n    return words\n\n\ndef is_vowel(letter: str) -> bool:\n    \"\"\" \n    Checks if a given letter is a vowel.\n    Input is a string of one English letter.\n    Returns True if the letter is a vowel, False otherwise.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return letter.lower() in vowels\ndef vowels_first(sentence: str) -> str:\n    \"\"\"\n    Input is a string which is a valid sentence in English.\n    The function returns a new sentence with the same words, but sorted such that words starting with a vowel come first.\n    Words are sorted in the order of their occurrence in the original sentence.\n    >>> vowels_first('The quick brown fox jumps over the lazy dog')\n    'over The quick brown fox jumps the lazy dog'\n    >>> vowels_first('An apple fell from the tree')\n    'An apple fell from the tree'\n    \"\"\"\n    words = parse_sentence(sentence)\n    vowels = [word for word in words if is_vowel(word[0])]\n    consonants = [word for word in words if not is_vowel(word[0])]\n    sorted_words = vowels + consonants\n    return ' '.join(sorted_words)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/90": [{"task_id": "EvoEval/90", "solution": "def is_valid_input(lst):\n    '''\n    This helper function checks if the input is a list of integers.\n    \n    Parameters: \n    lst (list): list of integers\n\n    Returns:\n    boolean: True if the input is a list of integers, False otherwise \n\n    Examples: \n    is_valid_input([1, 2, 3]) \u279e True\n    is_valid_input([1, '2', 3]) \u279e False\n    is_valid_input([1, 2.0, 3]) \u279e False\n    is_valid_input([]) \u279e False\n    '''\n    if not lst or type(lst) != list:\n        return False\n    return all(isinstance(i, int) for i in lst)\ndef find_max_product_sublist(lst):\n    \"\"\"\n    Write a function that takes a list of integers as input. \n    The function should find the sublist of consecutive integers in the list that has the maximum product.\n    The function should return this maximum product.\n    \n    If the input list is empty, the function should return None.\n    If the input is not a list of integers, the function should return the string \"Invalid input\".\n\n    The function does not need to return the sublist itself, just the product.\n    \n    Examples\n    find_max_product_sublist([1,2,3]) \u279e 6\n    find_max_product_sublist([-1,-2,-3]) \u279e 6\n    find_max_product_sublist([-1,-2,3]) \u279e 6\n    find_max_product_sublist([0, -4, -2, 3]) \u279e 24\n    find_max_product_sublist([]) \u279e None\n    find_max_product_sublist([3,'a',1]) \u279e \"Invalid input\"\n    find_max_product_sublist([1.2, 3, 4]) \u279e \"Invalid input\"\n    \"\"\"\n    if not is_valid_input(lst):\n        return 'Invalid input'\n    if not lst:\n        return None\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        product = 1\n        for j in range(i, len(lst)):\n            product *= lst[j]\n            max_product = max(max_product, product)\n    return max_product", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[]]], "plus_fail_tests": []}], "EvoEval/67": [{"task_id": "EvoEval/67", "solution": "def helper_get_coordinates(string):\n    \"\"\"\n    The helper function to fetch the x and y coordinates from a given string representation.\n    \n    The string representation will be in the format: (x,y)\n    \n    Parameters: \n    string (str): The string representation of the coordinates.\n    \n    Returns: \n    tuple: A tuple containing two integer values representing x and y coordinates.\n    \n    Example: \n    helper_get_coordinates(\"(2,3)\") -> (2,3)\n    helper_get_coordinates(\"(5,6)\") -> (5,6)\n    \"\"\"\n\n    x, y = string.replace(\"(\",\"\").replace(\")\",\"\").split(\",\")\n    return int(x), int(y)\ndef calculate_distance(coordinates_str_1, coordinates_str_2):\n    \"\"\"\n    In this task, you will be given two string that represents x and y coordinates in a 2D plane.\n    You are required to calculate the euclidean distance between these two points.\n    The string representation of the coordinates will be in the format: (x,y)\n    \n    For example:\n    calculate_distance(\"(2,3)\", \"(5,6)\") -> The euclidean distance is sqrt((5-2)^2 + (6-3)^2) = sqrt(9+9) = sqrt(18) = 4.2426 rounded to 4 decimal places\n    calculate_distance(\"(1,1)\", \"(4,5)\") -> The euclidean distance is sqrt((4-1)^2 + (5-1)^2) = sqrt(9+16) = sqrt(25) = 5.0000 rounded to 4 decimal places\n    \"\"\"\n    (x1, y1) = helper_get_coordinates(coordinates_str_1)\n    (x2, y2) = helper_get_coordinates(coordinates_str_2)\n    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    return round(distance, 4)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["(2,3)", "(5,6)"]], "plus_fail_tests": []}], "EvoEval/33": [{"task_id": "EvoEval/33", "solution": "def helper_is_valid(string):\n    \"\"\"\n    This function checks whether the provided string is valid\n    according to the following rules:\n    - The string only contains alphabetical characters\n    - The string length is at least 2 \n    - The string first and last character are the same\n    It returns True if the string is valid and False otherwise.\n\n    >>> helper_is_valid(\"racecar\")\n    True\n    >>> helper_is_valid(\"apple\")\n    False\n    \"\"\"\n    if not string.isalpha():\n        return False\n    if len(string) < 2:\n        return False\n    if string[0] != string[-1]:\n        return False\n    return True\n\ndef helper_reverse_string(string):\n    \"\"\"\n    This function reverses the provided string and returns the result.\n\n    >>> helper_reverse_string(\"racecar\")\n    'racecar'\n    >>> helper_reverse_string(\"apple\")\n    'elppa'\n    \"\"\"\n    return string[::-1]\ndef modify_strings(strings: list):\n    \"\"\"\n    This function takes a list of strings and modifies each string according to\n    the following rules:\n    - If the string is valid:\n        - The string only contains alphabetical characters\n        - The string length is at least 2\n        - The string first and last character are the same\n      then it is reversed\n    - If the string is not valid, it is left unchanged\n    The function returns a new list where each string has been modified\n    according to these rules.\n\n    >>> modify_strings([\"hello\", \"apple\", \"racecar\"])\n    ['hello', 'apple', 'racecar']\n    >>> modify_strings([\"aha\", \"banana\", \"mom\"])\n    ['aha', 'banana', 'mom']\n    \"\"\"\n    modified_strings = []\n    for string in strings:\n        if helper_is_valid(string):\n            modified_strings.append(helper_reverse_string(string))\n        else:\n            modified_strings.append(string)\n    return modified_strings", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/30": [{"task_id": "EvoEval/30", "solution": "def parse_input(input_str: str) -> list:\n    \"\"\"\n    This function receives a string and returns a list of strings. The input string should contain words separated by \n    space(s). The function will split the input string by space(s) and return the list of words.\n    >>> parse_input('Hello world from python')\n    ['Hello', 'world', 'from', 'python']\n    >>> parse_input('  This is a    test   ')\n    ['This', 'is', 'a', 'test']\n    \"\"\"\n    return [word for word in input_str.split() if word]\ndef get_long_words(input_str: str, min_length: int) -> list:\n    \"\"\"\n    This function receives a string and a minimum word length and returns a list of words that have lengths greater \n    than or equal to the minimum length. The input string contains words separated by space(s).\n    If there are no words of length greater than or equal to the minimum length, the function should return an empty list.\n    >>> get_long_words('Hello world from python', 5)\n    ['Hello', 'world', 'python']\n    >>> get_long_words('This is a test', 5)\n    []\n    \"\"\"\n    words = parse_input(input_str)\n    return [word for word in words if len(word) >= min_length]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/15": [{"task_id": "EvoEval/15", "solution": "def validate_input(data: dict):\n    \"\"\" Check if the input contains 'name' and 'age' as keys and returns True if exists.\n\n    >>> validate_input({'name': 'John', 'age': 23})\n    True\n    >>> validate_input({'name': 'John', 'height': 170})\n    False\n    \"\"\"\n    return 'name' in data and 'age' in data\ndef create_user(data: dict) -> str:\n    \"\"\" Return a string 'User Created' if the dictionary contains 'name' and 'age'. \n    If not, return 'Invalid User Data'. The 'name' should be a non-empty string and 'age' \n    should be an integer greater than 0.\n\n    >>> create_user({'name': 'John', 'age': 23})\n    'User Created'\n    >>> create_user({'name': 'John', 'height': 170})\n    'Invalid User Data'\n    >>> create_user({'name': '', 'age': 23})\n    'Invalid User Data'\n    >>> create_user({'name': 'John', 'age': -5})\n    'Invalid User Data'\n    \"\"\"\n    if validate_input(data):\n        if isinstance(data['name'], str) and data['name'] != '' and isinstance(data['age'], int) and (data['age'] > 0):\n            return 'User Created'\n    return 'Invalid User Data'", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/37": [{"task_id": "EvoEval/37", "solution": "def parse_time(time_str: str) -> tuple:\n    \"\"\"\n    This function takes a string time in the format \"HH:MM\" and parses it into a tuple of integers.\n    :param time_str: a string representing time in 24 hour format \"HH:MM\"\n    :return: a tuple (hours, minutes)\n    >>> parse_time(\"12:30\")\n    (12, 30)\n    >>> parse_time(\"23:15\")\n    (23, 15)\n    \"\"\"\n    hours, minutes = map(int, time_str.split(':'))\n    return hours, minutes\ndef time_to_minutes(time_list: list) -> list:\n    \"\"\"\n    This function takes a list of time strings in the format \"HH:MM\" and converts each time into minutes past midnight.\n    The function returns a list of integers where each integer represents the minutes past midnight corresponding to the respective time string in the input list.\n    >>> time_to_minutes([\"00:00\", \"12:00\", \"23:59\"])\n    [0, 720, 1439]\n    >>> time_to_minutes([\"01:00\", \"13:00\", \"14:15\"])\n    [60, 780, 855]\n    \"\"\"\n    minutes_list = []\n    for time_str in time_list:\n        (hours, minutes) = parse_time(time_str)\n        minutes_past_midnight = hours * 60 + minutes\n        minutes_list.append(minutes_past_midnight)\n    return minutes_list", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/84": [{"task_id": "EvoEval/84", "solution": "def parse_string(s):\n    \"\"\"This function takes a string as an input and parse it into a list of words.\n    A word is defined as a sequence of non-space characters.\n\n    Args:\n    s (str): the string to be parsed.\n\n    Returns:\n    list: list of words in the string.\n    \"\"\"\n    return s.split()\n\ndef is_alpha(word):\n    \"\"\"This function takes a word as an input and checks if the word consists of only alphabet letters.\n\n    Args:\n    word (str): the word to be checked.\n\n    Returns:\n    bool: True if the word contains only letters, False otherwise.\n    \"\"\"\n    return word.isalpha()\ndef count_alpha_words(s):\n    \"\"\"Your task is to write a function that counts the number of words in a string that consists of only alphabet letters.\n    You need to consider a word as a sequence of non-space characters.\n\n    For example:\n    count_alpha_words(\"Hello world!\") => 1\n    count_alpha_words(\"123\") => 0\n    count_alpha_words(\"\") => 0\n    count_alpha_words(\"Python, Java, C++\") => 0\n    count_alpha_words(\"I love Python 3.\") => 3\n\n    Args:\n    s (str): the string to be analyzed.\n\n    Returns:\n    int: the number of words in the string that consists of only letters.\n    \"\"\"\n    words = parse_string(s)\n    count = 0\n    for word in words:\n        if is_alpha(word):\n            count += 1\n    return count", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/97": [{"task_id": "EvoEval/97", "solution": "def check_vowel(s):\n    \"\"\"\n    Given a character s, returns True if it's a vowel, False otherwise.\n    \n    For example:\n    check_vowel('a') returns True\n    check_vowel('b') returns False\n    \"\"\"\n    vowel_list = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return s in vowel_list\ndef frequency_count(s):\n    \"\"\"\n    Given a string s, count the frequency of each vowel (case-insensitive) in the string. Return the results as a dictionary.\n\n    For example:\n    frequency_count('hello world') returns {'e': 1, 'o': 2}\n    frequency_count('Python is cool') returns {'o': 3, 'i': 1}\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = s.lower()\n    freq_dict = {vowel: s.count(vowel) for vowel in vowels if s.count(vowel) > 0}\n    return freq_dict", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/21": [{"task_id": "EvoEval/21", "solution": "def strip_spaces(string: str) -> str:\n    \"\"\"Remove leading and trailing spaces from the string.\"\"\"\n    return string.strip()\n\ndef to_lowercase(string: str) -> str:\n    \"\"\"Convert all characters in the string to lowercase.\"\"\"\n    return string.lower()\n\ndef remove_non_alphanumeric(string: str) -> str:\n    \"\"\"Remove all non-alphanumeric characters from the string.\"\"\"\n    return ''.join(ch for ch in string if ch.isalnum())\nfrom typing import List\n\ndef get_cleaned_strings(strings: List[str]) -> List[str]:\n    \"\"\" Given a list of strings, return a new list where each string is\n    converted into lowercase, stripped of both leading and trailing spaces and \n    all non-alphanumeric characters are removed.\n\n    >>> get_cleaned_strings([\" Hello World! \", \"Pyth0n Pr0gr4mm!ng \", \"   PYTHON   \"])\n    ['helloworld', 'pyth0npr0gr4mmng', 'python']\n    \"\"\"\n    cleaned_strings = []\n    for string in strings:\n        cleaned_string = strip_spaces(string)\n        cleaned_string = to_lowercase(cleaned_string)\n        cleaned_string = remove_non_alphanumeric(cleaned_string)\n        cleaned_strings.append(cleaned_string)\n    return cleaned_strings", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/68": [{"task_id": "EvoEval/68", "solution": "def extract_numbers(sentence):\n    \"\"\"\n    A helper function that extracts all the numbers in a sentence and return them as a list\n    This function uses regex to achieve this.\n    Args:\n        sentence (str): A sentence which contains numbers.\n    Returns:\n        list of int: A list of numbers found in the sentence.\n    \"\"\"\n    import re\n    numbers = re.findall(r'\\d+', sentence)\n    return [int(i) for i in numbers]\ndef zoo_animal_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents the number of lions and tigers that are distributed in a zoo, and a number that represents the total number of animals in the zoo.\n    Return the number of elephants in the zoo. Note that the zoo only contains lions, tigers,\n    and elephants.\n    The string given will be in the form \"There are {number} lions and {number} tigers in the zoo\"\n\n    for example:\n    zoo_animal_distribution(\"There are 5 lions and 6 tigers in the zoo\", 19) -> 19 - 5 - 6 = 8\n    zoo_animal_distribution(\"There are 0 lions and 1 tigers in the zoo\", 3) -> 3 - 0 - 1 = 2\n    zoo_animal_distribution(\"There are 2 lions and 3 tigers in the zoo\", 100) -> 100 - 2 - 3 = 95\n    zoo_animal_distribution(\"There are 100 lions and 1 tigers in the zoo\", 120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    numbers = extract_numbers(s)\n    lions = numbers[0] if len(numbers) > 0 else 0\n    tigers = numbers[1] if len(numbers) > 1 else 0\n    elephants = n - lions - tigers\n    return elephants", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/3": [{"task_id": "EvoEval/3", "solution": "from typing import List, Union\n\ndef validate_operation(operation: Union[int, str]) -> bool:\n    \"\"\"\n    Helper function to validate the bank operation.\n    It checks if the operation is either integer or a valid string operation like 'deposit' or 'withdraw'.\n    If the operation is valid, it returns True else False.\n\n    >>> validate_operation(100)\n    True\n    >>> validate_operation('deposit')\n    True\n    >>> validate_operation('invalid_operation')\n    False\n    \"\"\"\n    valid_operations = ['deposit', 'withdraw']\n    return isinstance(operation, int) or operation in valid_operations\ndef process_operations(operations: List[Union[int, str]], amounts: List[int]) -> int:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. The operations list can contain both integers and strings.\n    \n    - If an integer is encountered, it needs to be added directly to the balance.\n    - If a string is encountered, it refers to the operation 'deposit' or 'withdraw'. The corresponding amount for the operation is retrieved from the amounts list (order is maintained). 'deposit' adds to the balance and 'withdraw' subtracts from the balance.\n    \n    Your task is to perform all the operations and return the final balance of the account.\n\n    >>> process_operations([1, 'deposit', 'withdraw', 5], [200, 100])\n    106\n    >>> process_operations(['deposit', 2, 'withdraw'], [100, 50])\n    52\n    \"\"\"\n    balance = 0\n    for (operation, amount) in zip(operations, amounts):\n        if validate_operation(operation):\n            if isinstance(operation, int):\n                balance += operation\n            elif operation == 'deposit':\n                balance += amount\n            elif operation == 'withdraw':\n                balance -= amount\n    return balance", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[1, "deposit", "withdraw", 5], [200, 100]]], "plus_fail_tests": []}], "EvoEval/46": [{"task_id": "EvoEval/46", "solution": "def is_valid_word(word: str) -> bool:\n    \"\"\"Check if a word contains only alphabets and it's length is more than 1\n    Args:\n        word (str): The word to check\n    \n    Returns:\n        bool: Returns True if the word contains only alphabets and it's length is more than 1. Else, returns False.\n    \"\"\"\n    if not word.isalpha() or len(word) <= 1:\n        return False\n    return True\n\ndef count_vowels(word: str) -> int:\n    \"\"\"Count the number of vowels in a word\n    Args:\n        word (str): The word to count vowels in\n    \n    Returns:\n        int: The number of vowels in the word\n    \"\"\"\n    vowels = 'aeiou'\n    return len([char for char in word.lower() if char in vowels])\ndef word_info(sentence: str) -> dict:\n    \"\"\"The function takes a sentence as input and returns a dictionary containing information about the words in the sentence. \n    Each key in the dictionary is a valid word from the sentence and its value is a dictionary which has two keys: 'length' \n    and 'vowels'. 'length' stores the length of the word and 'vowels' stores the number of vowels in the word.\n    Words are considered valid if they contain only alphabets and their length is more than 1. \n    The function should ignore case while counting vowels.\n    The function should ignore punctuation.\n\n    Args:\n        sentence (str): The sentence to analyze\n\n    Returns:\n        dict: A dictionary containing information about the words in the sentence\n\n    Example:\n        >>> word_info(\"Hello, world!\")\n        {\"Hello\": {\"length\": 5, \"vowels\": 2}, \"world\": {\"length\": 5, \"vowels\": 1}}\n    \"\"\"\n    words = sentence.split()\n    word_info_dict = {}\n    for word in words:\n        word = word.strip(string.punctuation)\n        if is_valid_word(word):\n            word_info_dict[word] = {'length': len(word), 'vowels': count_vowels(word)}\n    return word_info_dict", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Hello, world!"]], "plus_fail_tests": []}], "EvoEval/27": [{"task_id": "EvoEval/27", "solution": "def is_valid(word: str) -> bool:\n    \"\"\" Check if a word is valid. A valid word contains only alphabets and no numbers or special characters.\n    >>> is_valid('Hello')\n    True\n    >>> is_valid('Hello123')\n    False\n    \"\"\"\n    for character in word:\n        if not character.isalpha():\n            return False\n    return True\ndef longest_valid_word(sentence: str) -> str:\n    \"\"\" For a given sentence, return the longest valid word. If there are multiple words of the same maximum length, return the first one.\n    A valid word contains only alphabets and no numbers or special characters.\n    Return \"\" if there are no valid words\n    \n    >>> longest_valid_word(\"I love programming123 and reading\")\n    'reading'\n    \"\"\"\n    words = sentence.split()\n    valid_words = [word for word in words if is_valid(word)]\n    if valid_words:\n        return max(valid_words, key=len)\n    else:\n        return ''", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/23": [{"task_id": "EvoEval/23", "solution": "def is_valid_passport(passport: str) -> bool:\n    \"\"\" Checks whether a given string is a valid passport number. \n    A valid passport number is defined as having exactly 9 alphanumeric characters.\n\n    >>> is_valid_passport('P12345678')\n    True\n    >>> is_valid_passport('P123456789')\n    False\n    >>> is_valid_passport('P12345G78')\n    False\n    \"\"\"\n\n    if len(passport) != 9:\n        return False\n    if not passport.isalnum():\n        return False\n    return True\nfrom typing import List, Tuple\n\ndef process_passport_data(data: str) -> List[Tuple[str, str]]:\n    \"\"\"Parse a string containing passport data and return a list of tuples.\n    Each tuple contains the passport number and the name of the passport holder.\n    The passport data string is in the format of 'PassportNumber:Name'\n    separated by lines.\n\n    Only process valid passport data. A valid passport number is defined as having exactly 9 alphanumeric characters.\n\n    >>> process_passport_data('P12345678:John Doe\nX12345678:Jane Doe')\n    [('P12345678', 'John Doe')]\n    >>> process_passport_data('P12345678:John Doe\nA123456789:Jane Doe')\n    [('P12345678', 'John Doe')]\n    \"\"\"\n    passport_list = []\n    lines = data.split('\\n')\n    for line in lines:\n        parts = line.split(':')\n        if len(parts) == 2:\n            (passport_number, name) = parts\n            if is_valid_passport(passport_number):\n                passport_list.append((passport_number, name))\n    return passport_list", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/8": [{"task_id": "EvoEval/8", "solution": "from typing import List, Tuple, Union\n\ndef check_validity(input: Union[str, List[str]]) -> Union[bool, List[bool]]:\n    \"\"\" This helper function checks if a string is alphanumeric (made up of only letters and numbers) or \n    in case of a list of strings, return a list of booleans indicating whether each string is alphanumeric.\n\n    >>> check_validity('abc123')\n    True\n    >>> check_validity('abc@123')\n    False\n    >>> check_validity(['abc123', 'abc@123'])\n    [True, False]\n    \"\"\"\n    if isinstance(input, str):\n        return input.isalnum()\n    elif isinstance(input, list):\n        return [s.isalnum() for s in input]\nfrom typing import List, Tuple\n\ndef get_valid_and_invalid_strings(strings: List[str]) -> Tuple[List[str], List[str]]:\n    \"\"\" Given a list of strings, return a tuple of two lists. \n    The first list should contain all the strings which are alphanumeric. \n    The second list should contain all the strings which are not alphanumeric. \n    Alphanumeric strings are made up of only letters and numbers.\n\n    >>> get_valid_and_invalid_strings([])\n    ([], [])\n    >>> get_valid_and_invalid_strings(['abc123', 'abc@123'])\n    (['abc123'], ['abc@123'])\n    \"\"\"\n    valid_strings = []\n    invalid_strings = []\n    for string in strings:\n        if check_validity(string):\n            valid_strings.append(string)\n        else:\n            invalid_strings.append(string)\n    return (valid_strings, invalid_strings)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/42": [{"task_id": "EvoEval/42", "solution": "def is_valid_phone(phone: str) -> bool:\n    \"\"\"Check whether the given string is a valid phone number.\n\n    A valid phone number contains exactly 10 digits and the total sum of these digits is divisible by 3.\n\n    >>> is_valid_phone(\"1234567890\")\n    True\n    >>> is_valid_phone(\"12345\")\n    False\n    >>> is_valid_phone(\"12345678901\")\n    False\n    \"\"\"\n    if not (len(phone) == 10 and phone.isdigit()):\n        return False\n    return sum(int(d) for d in phone) % 3 == 0\ndef find_valid_phones(text: str) -> list:\n    \"\"\"Return list of all valid phone numbers from the given text.\n\n    A valid phone number contains exactly 10 digits and the total sum of these digits must be divisible by 3.\n\n    >>> find_valid_phones(\"Call me at 1234567890. Also, 9876543210 is a valid number.\")\n    ['1234567890', '9876543210']\n    >>> find_valid_phones(\"Invalid numbers: 12345, 12345678901.\")\n    []\n    \"\"\"\n    import re\n    pattern = '\\\\b\\\\d{10}\\\\b'\n    valid_phones = re.findall(pattern, text)\n    return [phone for phone in valid_phones if is_valid_phone(phone)]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/1": [{"task_id": "EvoEval/1", "solution": "from typing import List\nimport re\n\ndef check_valid_phone_number(phone_number: str) -> bool:\n    \"\"\"\n    Helper function to check if a given phone number is valid.\n    A valid phone number has the format xxx-xxx-xxxx\n\n    Args:\n    phone_number (str): The phone number to check.\n\n    Returns:\n    bool: True if the phone number is valid, False otherwise.\n    \"\"\"\n    pattern = \"^(\\d{3})-(\\d{3})-(\\d{4})$\"\n    if re.match(pattern, phone_number):\n        return True\n    return False\ndef retrieve_info_from_text(text: str) -> List[str]:\n    \"\"\"\n    Given a string of text, your goal is to find and return a list of all valid phone numbers in the text.\n    A valid phone number has the format xxx-xxx-xxxx.\n    If there are no valid phone numbers in the text, return an empty list.\n\n    Args:\n    text (str): The text to parse.\n\n    Returns:\n    List[str]: A list of valid phone numbers.\n\n    >>> retrieve_info_from_text('My phone number is 123-456-7890.')\n    ['123-456-7890']\n\n    >>> retrieve_info_from_text('My phone number is 123-456-7890 and office number is 987-654-3210')\n    ['123-456-7890', '987-654-3210']\n\n    >>> retrieve_info_from_text('This text has no phone numbers.')\n    []\n    \"\"\"\n    pattern = '\\\\b(\\\\d{3}-\\\\d{3}-\\\\d{4})\\\\b'\n    phone_numbers = re.findall(pattern, text)\n    return phone_numbers", "base_status": "fail", "plus_status": null, "base_fail_tests": [["123-456-78910"]], "plus_fail_tests": []}], "EvoEval/11": [{"task_id": "EvoEval/11", "solution": "def is_valid_date(date: str) -> bool:\n    \"\"\" \n    Helper function to check if a date string is valid. \n    The date string should be in the format of 'YYYY-MM-DD'.\n    Returns True if the date string is valid, False otherwise.\n    \"\"\"\n    try:\n        year, month, day = map(int, date.split('-'))\n        return 1 <= month <= 12 and 1 <= day <= 31\n    except ValueError:\n        return False\n\ndef is_leap_year(year: int) -> bool:\n    \"\"\"\n    Helper function to check if a year is a leap year.\n    Returns True if the year is a leap year, False otherwise.\n    \"\"\"\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n\ndef get_next_day(date: str) -> str:\n    \"\"\"\n    Function that takes a date string in the format 'YYYY-MM-DD'\n    and returns a string representation of the next date.\n    \n    If the date string is invalid or the date is '9999-12-31', the function should return 'Invalid date'.\n    \n    >>> get_next_day('2018-12-31')\n    '2019-01-01'\n    \n    >>> get_next_day('2020-02-28')\n    '2020-02-29'\n    \n    >>> get_next_day('2020-02-29')\n    '2020-03-01'\n    \n    >>> get_next_day('2020-12-31')\n    '2021-01-01'\n    \n    >>> get_next_day('9999-12-31')\n    'Invalid date'\n    \"\"\"\n    if not is_valid_date(date) or date == '9999-12-31':\n        return 'Invalid date'\n    (year, month, day) = map(int, date.split('-'))\n    if month == 12 and day == 31:\n        return '9999-12-31'\n    if month == 2 and day == 28:\n        if is_leap_year(year):\n            return f'{year}-{month:02d}-{day + 1:02d}'\n        else:\n            return 'Invalid date'\n    if month == 2 and day == 29:\n        return f'{year}-{month + 1:02d}-01'\n    if day == 31:\n        if month == 1 or month == 3 or month == 5 or (month == 7) or (month == 8) or (month == 10):\n            return f'{year}-{month + 1:02d}-01'\n        else:\n            return f'{year + 1}-01-01'\n    return f'{year}-{month:02d}-{day + 1:02d}'", "base_status": "fail", "plus_status": null, "base_fail_tests": [["2018-12-31"]], "plus_fail_tests": []}], "EvoEval/99": [{"task_id": "EvoEval/99", "solution": "def checkAlpha(s):\n    \"\"\"Helper Function 1\n    This function takes a string s as input and return a string containing only letters by eliminating all the non-alphabetical characters.\n\n    Examples:\n        checkAlpha(\"hello1\") => \"hello\"\n        checkAlpha(\"123\") => \"\"\n        checkAlpha(\"wo3rld.\") => \"world\"\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char\n    return result\n\ndef checkLower(s):\n    \"\"\"Helper Function 2\n    This function takes a string s as input and returns a string containing only lowercase letters by eliminating all the uppercase letters.\n\n    Examples:\n        checkAlpha(\"Hello\") => \"ello\"\n        checkAlpha(\"WORLD\") => \"\"\n        checkAlpha(\"WorLd\") => \"ord\"\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += char\n    return result\ndef lowerAlphaDigitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the ASCII codes of the lowercase alphabetical characters only.\n\n    Examples:\n        lowerAlphaDigitSum(\"aBcD\") => 196\n        lowerAlphaDigitSum(\"abc123\") => 294\n        lowerAlphaDigitSum(\"HELLO\") => 0\n        lowerAlphaDigitSum(\"hello$%^&\") => 532\n        lowerAlphaDigitSum(\"w3or5ld.\") => 552\n    \"\"\"\n    result = 0\n    for char in s:\n        if char.islower():\n            result += ord(char)\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/29": [{"task_id": "EvoEval/29", "solution": "from typing import List, Tuple\n\ndef get_words(text: str) -> List[str]:\n    \"\"\"Split the input text into words.\n    The words in the returned list should not contain any punctuation or special characters.\n    Each word should be in lower case.\n    >>> get_words('Hello, World!')\n    ['hello', 'world']\n    \"\"\"\n    import re\n    words = re.sub('[^A-Za-z0-9 ]+', '', text).lower().split()\n    return words\n\n\ndef count_frequency(words: List[str]) -> dict:\n    \"\"\"Count the frequency of each word in the list.\n    Return a dictionary where keys are words and values are their frequency.\n    >>> count_frequency(['hello', 'world', 'hello'])\n    {'hello': 2, 'world': 1}\n    \"\"\"\n    freq_dict = {}\n    for word in words:\n        if word in freq_dict:\n            freq_dict[word] += 1\n        else:\n            freq_dict[word] = 1\n    return freq_dict\nfrom typing import List, Tuple\n\ndef top_k_frequent_words(text: str, k: int) -> List[Tuple[str, int]]:\n    \"\"\"\n    Given a string of words and an integer k, return a list of k most frequent words and their frequencies in the text.\n    Words should be compared in case insensitive manner and the list should be sorted in descending order of frequency.\n    In case of frequency tie, words should be sorted in lexicographic order.\n    If k is greater than number of unique words, return all words and their frequencies.\n    Words in string can be separated by spaces and can contain punctuation/special characters which should be ignored.\n    The frequencies should be calculated after removing punctuation and converting words to lowercase.\n\n    >>> top_k_frequent_words('Hello, World! Hello, Python. Python, Python!', 2)\n    [('python', 3), ('hello', 2)]\n    \"\"\"\n    words = get_words(text)\n    freq_dict = count_frequency(words)\n    sorted_freq = sorted(freq_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_freq[:k]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/39": [{"task_id": "EvoEval/39", "solution": "def split_words(s: str):\n    \"\"\"\n    Helper function that splits a string into a list of words.\n    \"\"\"\n    return s.split()\n\n\ndef check_alphabet_order(s: str):\n    \"\"\"\n    Helper function that checks if a string is in alphabetical order.\n    \"\"\"\n    return s == ''.join(sorted(s))\ndef longest_ordered_substring(s: str):\n    \"\"\"\n    Function that takes a string s and returns the longest substring that is in alphabetical order.\n    The string s only contains lowercase alphabets and space.\n    \"\"\"\n    words = split_words(s)\n    longest_substring = ''\n    for word in words:\n        if check_alphabet_order(word) and len(word) > len(longest_substring):\n            longest_substring = word\n    return longest_substring", "base_status": "fail", "plus_status": null, "base_fail_tests": [["the quick brown fox jumps over the lazy dog"]], "plus_fail_tests": []}], "EvoEval/43": [{"task_id": "EvoEval/43", "solution": "from typing import List\n\n\ndef transpose_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"Transpose a given matrix.\n\n    Args:\n        matrix: A 2D list of integers representing the matrix to transpose.\n\n    Returns:\n        A new 2D list of integers representing the transposed matrix.\n    \"\"\"\n    n = len(matrix)\n    m = len(matrix[0])\n    transposed = [[0] * n for _ in range(m)]\n    for i in range(n):\n        for j in range(m):\n            transposed[j][i] = matrix[i][j]\n    return transposed\nfrom typing import List\n\ndef rotate_matrix_90_degrees_clockwise(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\"Rotate a given square matrix 90 degrees clockwise.\n\n    Args:\n        matrix: A 2D list of integers representing the matrix to rotate.\n\n    Returns:\n        A new 2D list of integers representing the rotated matrix.\n\n    Note: \n        This function assumes that the input matrix is a square matrix (i.e., number of rows equals number of columns).\n\n    Examples:\n        >>> rotate_matrix_90_degrees_clockwise([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        [[7, 4, 1], [8, 5, 2], [9, 6, 3]]\n        >>> rotate_matrix_90_degrees_clockwise([[1, 2], [3, 4]])\n        [[3, 1], [4, 2]]\n    \"\"\"\n    transposed = transpose_matrix(matrix)\n    rotated = [list(reversed(row)) for row in transposed]\n    return rotated", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/56": [{"task_id": "EvoEval/56", "solution": "def find_subsequence_index(original: str, target: str):\n    \"\"\"\n    original and target are strings. \n    This function finds the starting index of the target string in the original string and returns it. If the target is not present, it returns -1.\n\n    >>> find_subsequence_index(\"Hello world\", \"world\")\n    6\n    >>> find_subsequence_index(\"abcdefg\", \"cd\")\n    2\n    >>> find_subsequence_index(\"aaa\", \"a\")\n    0\n    >>> find_subsequence_index(\"Hello world\", \"Hello\")\n    0\n    \"\"\"\n    return original.find(target)\ndef replace_subsequence(original: str, target: str, replacement: str):\n    \"\"\" original, target and replacement are strings. \n    The function replaces all occurrences of the target subsequence in the original string with the replacement string. \n    The function should be case sensitive.\n    if there are no occurrences of the target, return 'no occurrence'\n\n    >>> replace_subsequence(\"Hello world\", \"world\", \"Earth\")\n    \"Hello Earth\"\n    >>> replace_subsequence(\"abcdefg\", \"cd\", \"1234\")\n    \"ab1234efg\"\n    >>> replace_subsequence(\"aaa\", \"a\", \"b\")\n    \"bbb\"\n    >>> replace_subsequence(\"Hello world\", \"Hello\", \"Hi\")\n    \"Hi world\"\n    \"\"\"\n    if target not in original:\n        return 'no occurrence'\n    else:\n        return original.replace(target, replacement)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["", "empty", "nonempty"]], "plus_fail_tests": []}], "EvoEval/93": [{"task_id": "EvoEval/93", "solution": "import string\n\ndef is_valid(word):\n    valid_chars = string.ascii_letters + ' '\n    for char in word:\n        if char not in valid_chars:\n            return False\n    return True\ndef scramble(sentence):\n    if not is_valid(sentence):\n        return ''\n    words = sentence.split()\n    scrambled_words = []\n    for word in words:\n        if len(word) < 4:\n            scrambled_words.append(word)\n        else:\n            second_char = word[1]\n            second_last_char = word[-2]\n            middle_chars = word[2:-2]\n            scrambled_word = word[0] + second_last_char + middle_chars + second_char + word[-1]\n            scrambled_words.append(scrambled_word)\n    return ' '.join(scrambled_words)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["    Leading spaces"]], "plus_fail_tests": []}], "EvoEval/41": [{"task_id": "EvoEval/41", "solution": "def valid_coordinate(coord: str):\n    \"\"\"\n    Helper Function\n\n    This function checks whether a given string is a valid (x, y) coordinate.\n    A valid coordinate should have the form (x,y) where x and y are integers.\n\n    Args:\n        coord (str): The input string to check.\n\n    Returns:\n        bool: True if the string is a valid coordinate, False otherwise.\n    \"\"\"\n    if coord[0] != '(' or coord[-1] != ')':\n        return False\n\n    values = coord[1:-1].split(',')\n    if len(values) != 2:\n        return False\n\n    try:\n        x, y = int(values[0]), int(values[1])\n    except ValueError:\n        return False\n\n    return True\n\n\ndef convert_to_int(coord: str):\n    \"\"\"\n    Helper Function\n\n    This function converts a string of the form (x,y) into a tuple of integers (x, y).\n\n    Args:\n        coord (str): The input string to convert.\n\n    Returns:\n        tuple: A tuple of two integers representing the coordinates.\n    \"\"\"\n    values = coord[1:-1].split(',')\n    x, y = int(values[0]), int(values[1])\n    return (x, y)\nfrom typing import List\n\n\ndef find_path(start: str, end: str, obstacles: List[str]):\n    \"\"\"\n    Imagine a robot positioned at a specific coordinate on a grid. The robot can only move\n    in four directions: up, down, left, right. The robot is trying to reach an end coordinate\n    while avoiding various obstacles. Each coordinate on the grid is represented as a string\n    in the form (x,y).\n\n    This function should output the shortest path for the robot to take from the start to the\n    end coordinate while avoiding the obstacles. Each move from one coordinate to an adjacent\n    coordinate counts as one step.\n\n    Args:\n        start (str): The start coordinate in the form (x,y).\n        end (str): The end coordinate in the form (x,y).\n        obstacles (List[str]): A list of obstacles, each represented as a string in the form\n        (x,y).\n\n    Returns:\n        int: The shortest path length, or -1 if inputs are invalid or there is no path to the\n        end coordinate without hitting an obstacle or the shortest path is longer than 100 steps.\n    \"\"\"\n    if not valid_coordinate(start) or not valid_coordinate(end):\n        return -1\n    start_coord = convert_to_int(start)\n    end_coord = convert_to_int(end)\n    if start_coord == end_coord:\n        return 0\n    if start in obstacles or end in obstacles:\n        return -1\n    for obstacle in obstacles:\n        if not valid_coordinate(obstacle):\n            return -1\n    if len(obstacles) > 100:\n        return -1\n    return -1", "base_status": "fail", "plus_status": null, "base_fail_tests": [["(0,0)", "(10, 0)", []]], "plus_fail_tests": []}], "EvoEval/95": [{"task_id": "EvoEval/95", "solution": "def replace_spaces_with_underscore(string):\n    \"\"\"\n    This function receives a string as input and replaces all the spaces in the string with the underscore character (_).\n    \"\"\"\n    return string.replace(' ', '_')\n\ndef validate_input(string, n):\n    \"\"\"\n    This function receives a string and an integer as input and validates them. If the string is empty, it returns 'String is empty'. \n    If n is less than or equal to zero, it returns 'Invalid integer'. Otherwise, it returns 'Valid'.\n    \"\"\"\n    if not string:\n        return 'String is empty'\n    elif n <= 0:\n        return 'Invalid integer'\n    else:\n        return 'Valid'\ndef replicate_string(string, n):\n    \"\"\"\n    Given a string and an integer n, return a new string which is n repetitions of the original string, with each repetition separated by an underscore.\n    If the string is empty, return 'String is empty'. If n is less than or equal to zero, return 'Invalid integer'.\n\n    All spaces in the string should be replaced with the underscore character (_).\n\n    Examples:\n    replicate_string(\"abc\", 3) should return \"abc_abc_abc\".\n    replicate_string(\"abc def\", 2) should return \"abc_def_abc_def\".\n    replicate_string(\"\", 2) should return \"String is empty\".\n    replicate_string(\"abc\", 0) should return \"Invalid integer\".\n    replicate_string(\"abc def ghi\", 1) should return \"abc_def_ghi\".\n    \"\"\"\n    if not string:\n        return 'String is empty'\n    elif n <= 0:\n        return 'Invalid integer'\n    replaced_string = replace_spaces_with_underscore(string)\n    repeated_string = (replaced_string + '_') * n\n    return repeated_string[:-1]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/9": [{"task_id": "EvoEval/9", "solution": "from typing import List, Tuple\n\ndef split_by_delimiter(text: str, delimiter: str) -> List[str]:\n    \"\"\"\n    This helper function splits the given input string by a specified delimiter and returns a list of the resulting substrings.\n    \"\"\"\n    return text.split(delimiter)\n\n\ndef is_integer(text: str) -> bool:\n    \"\"\"\n    This helper function checks if the given input string can be converted into an integer.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\nfrom typing import List, Tuple\n\ndef process_records(records: List[str]) -> List[Tuple[int, str]]:\n    \"\"\"\n    Given a list of strings where each string is a record in the format \"ID-NAME\", \n    where ID is an integer and NAME is a string without hyphens, return a list \n    of tuples where each tuple is in the format (ID, NAME). If a record is not \n    in the correct format, it should be ignored.\n\n    >>> process_records([\"1-John\", \"2-Jane\", \"invalid\", \"3-Jack\"])\n    [(1, \"John\"), (2, \"Jane\"), (3, \"Jack\")]\n    \"\"\"\n    processed_records = []\n    for record in records:\n        parts = split_by_delimiter(record, '-')\n        if len(parts) == 2 and is_integer(parts[0]):\n            processed_records.append((int(parts[0]), parts[1]))\n    return processed_records", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/54": [{"task_id": "EvoEval/54", "solution": "def convert_to_lower(word: str):\n    \"\"\"\n    A helper function that converts a given word into lowercase.\n    \"\"\"\n    return word.lower()\n\ndef remove_punctuation(word: str):\n    \"\"\"\n    A helper function that removes punctuations from a given word.\n    \"\"\"\n    import string\n    return word.translate(str.maketrans('', '', string.punctuation))\n\ndef sort_word(word: str):\n    \"\"\"\n    A helper function that sorts the characters in a word alphabetically.\n    \"\"\"\n    return ''.join(sorted(word))\n\ndef clean_word(word: str):\n    \"\"\"\n    A helper function that cleans a word by converting it to lowercase, removing punctuations, and sorting its characters.\n    \"\"\"\n    lower_word = convert_to_lower(word)\n    no_punct_word = remove_punctuation(lower_word)\n    sorted_word = sort_word(no_punct_word)\n    sorted_word = \"\".join(sorted_word.split())\n    return sorted_word\ndef is_homophone(s0: str, s1: str):\n    \"\"\"\n    Check if two words are homophones (words that are pronounced the same way but may have different meanings or spellings). \n    Note: This function only considers words as homophones if they contain the same letters in the same proportions, \n    irrespective of their order, case, or any punctuation marks they may include. \n    \n    >>> is_homophone('Listen', 'Silent')\n    True\n    >>> is_homophone('Dormitory', 'Dirty Room')\n    True\n    >>> is_homophone('Astronomer', 'Moon starer')\n    True\n    >>> is_homophone('Conversation', 'Voices rant on')\n    True\n    >>> is_homophone('School master', 'The classroom')\n    True\n    >>> is_homophone('Election results', 'Lies \u2013 let\u2019s recount')\n    False\n    >>> is_homophone('The eyes', 'They see')\n    True\n    >>> is_homophone('A gentleman', 'Elegant man')\n    True\n    \"\"\"\n    clean_s0 = clean_word(s0)\n    clean_s1 = clean_word(s1)\n    return clean_s0 == clean_s1", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/49": [{"task_id": "EvoEval/49", "solution": "def convert_to_binary(num: int) -> str:\n    \"\"\"\n    This function takes in an integer and returns its binary equivalent as a string.\n    \"\"\"\n    binary_num = bin(num).replace(\"0b\", \"\")\n    return binary_num\n\ndef is_palindrome(num: str) -> bool:\n    \"\"\"\n    This function takes in a string and returns True if it is a palindrome, and False otherwise.\n    \"\"\"\n    return num == num[::-1]\nfrom typing import List\n\ndef binary_palindromes_in_range(lower: int, upper: int) -> List[int]:\n    \"\"\"\n    This function takes in two integers, lower and upper, representing a range. \n    Your task is to return a list of all integers within that range (inclusive)\n    whose binary representation is a palindrome. \n\n    For example, binary representation of 9 is 1001, which is a palindrome.\n    Hence, if the range includes 9, it should be in the returned list.\n\n    Ignore any negative numbers. If lower is greater than upper, or any of them is negative, \n    return an empty list.\n\n    >>> binary_palindromes_in_range(1, 10)\n    [1, 3, 5, 7, 9]\n\n    >>> binary_palindromes_in_range(11, 20)\n    [15]\n    \"\"\"\n    if lower > upper or lower < 0 or upper < 0:\n        return []\n    palindromes = []\n    for num in range(lower, upper + 1):\n        binary_num = convert_to_binary(num)\n        if is_palindrome(binary_num):\n            palindromes.append(num)\n    return palindromes", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/77": [{"task_id": "EvoEval/77", "solution": "def parse_string(s):\n    '''\n    This is a helper function. It takes a string s and returns the string \n    without any punctuation and all in lower case.\n    '''\n    import string \n\n    # remove punctuation\n    s = s.translate(str.maketrans('', '', string.punctuation))\n\n    # convert to lower case\n    s = s.lower()\n    \n    return s\ndef is_isogram(s):\n    \"\"\"\n    Write a function that takes a string s and returns True if s is an isogram.\n    An isogram is a word or phrase without a repeating letter (case in-sensitive and after removing punctuations).\n    Note: you may assume the input is always valid.\n    Examples:\n    is_isogram(\"Dermatoglyphics\") ==> True\n    is_isogram(\"aba\") ==> False\n    is_isogram(\"moOse\") ==> False\n    is_isogram(\"isograms\") ==> True\n    \"\"\"\n    s = parse_string(s)\n    return len(set(s)) == len(s)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/73": [{"task_id": "EvoEval/73", "solution": "def helper(n, steps, memo):\n    \"\"\"\n    Helper function to calculate the number of distinct ways to reach `n` using the available `steps`.\n    This function uses memoization to store and reuse previously calculated results.\n    \"\"\"\n    if n == 0:\n        return 1  # Base case: There is 1 way to reach 0 (by not taking any steps)\n    if n < 0:\n        return 0  # Invalid case: We cannot reach a negative value\n\n    if n in memo:\n        return memo[\n            n\n        ]  # Retrieve the result from the memoization dictionary if available\n\n    ways = 0\n    for step in steps:\n        ways += helper(n - step, steps, memo)\n\n    memo[n] = ways  # Store the calculated result in the memoization dictionary\n    return ways\ndef count_ways(n, steps):\n    \"\"\" \n    Given a number `n` and a list of `steps` available, calculate the number of distinct ways to reach `n` using only the steps in the list. You may use each step multiple times and you can use them in any order.\n\n    The number `n` will be a positive integer and the list `steps` will contain positive integers. \n\n    For example: \n    count_ways(4, [1, 2]) == 5 \n    count_ways(3, [1, 2, 3]) == 4\n    count_ways(10, [2, 5]) == 2\n\n    Note: In the first example, the ways to reach 4 using 1 and 2 are: [1,1,1,1], [2,2], [1,1,2], [1,2,1], [2,1,1].\n    \"\"\"\n    memo = {}\n    return helper(n, steps, memo)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/60": [{"task_id": "EvoEval/60", "solution": "def get_next_tag(html: str):\n    \"\"\"Extract the next tag from the HTML string.\n\n    Returns a tuple containing the tag (including the brackets) and the rest of the HTML string.\n    If no more tags are found, return (None, html).\n    \"\"\"\n    start = html.find('<')\n    end = html.find('>', start)\n    if start == -1 or end == -1:\n        return None, html\n    return html[start:end+1], html[end+1:]\n\ndef is_closing_tag(tag: str):\n    \"\"\"Check if the given tag is a closing tag.\n    \"\"\"\n    return tag.startswith('</')\n\ndef get_tag_name(tag: str):\n    \"\"\"Extract the name of the tag, without the brackets and the slash for closing tags.\n    \"\"\"\n    if is_closing_tag(tag):\n        return tag[2:-1]\n    return tag[1:-1]\ndef is_valid_html(html: str):\n    \"\"\" html is a string of HTML tags.\n    return True if every opening tag has a corresponding closing tag \n    and they are correctly nested. Ignore self-closing tags. \n    The HTML tags are simplified to just the tag names enclosed in \"<>\" for opening tags and \"</>\" for closing tags.\n\n    >>> is_valid_html(\"<html>\")\n    False\n    >>> is_valid_html(\"<html></html>\")\n    True\n    >>> is_valid_html(\"<html><body></body></html>\")\n    True\n    >>> is_valid_html(\"<html><body></html></body>\")\n    False\n    >>> is_valid_html(\"<html><head></head><body><div></div></body></html>\")\n    True\n    >>> is_valid_html(\"<html><head></head><body><div></body></div></html>\")\n    False\n    \"\"\"\n    stack = []\n    while html:\n        (tag, html) = get_next_tag(html)\n        if tag is None:\n            break\n        if is_closing_tag(tag):\n            if not stack:\n                return False\n            if get_tag_name(tag) != stack[-1]:\n                return False\n            stack.pop()\n        else:\n            stack.append(get_tag_name(tag))\n    return len(stack) == 0", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/64": [{"task_id": "EvoEval/64", "solution": "def check_digit_sequence(num_str):\n    \"\"\"\n    This is a helper function that checks if a string is a sequence of digits, \n    returning True if it is and False otherwise.\n    :param num_str: str  \n    :return: bool\n    \"\"\"\n\n    for char in num_str:\n        if not char.isdigit():\n            return False\n    return True\ndef find_phone_numbers(paragraph):\n    \"\"\"Write a function 'find_phone_numbers' which takes a string representing\n    a paragraph as input and returns a list of all phone numbers found in the \n    paragraph. A phone number is defined as a string of exactly 10 digits \n    occurring together.\n\n    Example:\n    >>> find_phone_numbers(\"My phone number is 1234567890. Call me tomorrow.\")\n    ['1234567890']\n    >>> find_phone_numbers(\"I have two phones. Their numbers are 9876543210 and 1234509876.\")\n    ['9876543210', '1234509876']\n    \"\"\"\n    phone_numbers = re.findall('\\\\b\\\\d{10}\\\\b', paragraph)\n    return phone_numbers", "base_status": "fail", "plus_status": null, "base_fail_tests": [["My phone number is 1234567890. Call me tomorrow."]], "plus_fail_tests": []}], "EvoEval/17": [{"task_id": "EvoEval/17", "solution": "def validate_string(input_string: str) -> bool:\n    valid_chars = ['a', 'b', 'c', ' ', '|']\n    for char in input_string:\n        if char not in valid_chars:\n            return False\n    return True\ndef parse_string(input_string: str) -> str:\n    \"\"\"\n    Input to this function is a string that represents a certain code. This code consists of letters and a '|'\n    special character. Each letter and the special character represent a specific word. Letters without the special\n    character represent a single word, while letters with the '|' character represent a phrase. \n    Your task is to parse this string and return the corresponding words or phrases. \n\n    Here is a legend:\n    'a' - represents the word \"apple\"\n    'b' - represents the word \"banana\"\n    'c' - represents the word \"cherry\"\n    'a|' - represents the phrase \"a big apple\"\n    'b|' - represents the phrase \"a bunch of bananas\"\n    'c|' - represents the phrase \"a cherry pie\"\n\n    >>> parse_string('a b| c')\n    \"apple, a bunch of bananas, cherry\"\n    >>> parse_string('a| b c|')\n    \"a big apple, banana, a cherry pie\"\n    \"\"\"\n    word_dict = {'a': 'apple', 'b': 'banana', 'c': 'cherry', 'a|': 'a big apple', 'b|': 'a bunch of bananas', 'c|': 'a cherry pie'}\n    words = []\n    current_word = ''\n    for char in input_string:\n        if char == ' ':\n            if current_word:\n                words.append(word_dict.get(current_word, current_word))\n                current_word = ''\n        elif char == '|':\n            if current_word:\n                words.append(word_dict.get(current_word + '|', current_word + '|'))\n                current_word = ''\n        else:\n            current_word += char\n    if current_word:\n        words.append(word_dict.get(current_word, current_word))\n    return ', '.join(words)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/87": [{"task_id": "EvoEval/87", "solution": "def parse_order(order):\n    \"\"\"\n    Parse an order string and return a tuple (product_id, quantity).\n    If the order is not in the correct format, return None.\n    \"\"\"\n    parts = order.split()\n    if len(parts) != 2:\n        return None\n    product_id, quantity_str = parts\n    if not quantity_str.isdigit():\n        return None\n    quantity = int(quantity_str)\n    return (product_id, quantity)\ndef process_orders(orders, product_ids):\n    \"\"\"\n    You are given two lists: orders and product_ids. Each element in the \n    orders list is a string, representing an order, in the format \"product_id quantity\". \n    Each order represents a request for a certain quantity of a product.\n    The product_ids list contains strings, each representing a valid product id.\n    \n    Your task is to process the orders. For each order, if the product_id exists in the \n    product_ids list and the quantity is a positive integer, add it to the final list. \n    Otherwise, ignore the order.\n    \n    Return a list of tuples, where each tuple represents a valid order and is in the \n    format (product_id, quantity). The orders should appear in the same order \n    as they appear in the original orders list.\n    \n    The function should not raise any exceptions if any of the input orders are invalid.\n    Instead, it should simply ignore any invalid orders.\n\n    Examples:\n    \n    process_orders([\"p1 2\", \"p2 5\", \"p3 0\", \"p4 10\"], [\"p1\", \"p2\", \"p3\", \"p4\"]) \n    == [(\"p1\", 2), (\"p2\", 5), (\"p4\", 10)]\n    \n    process_orders([\"p1 2\", \"p2 a\", \"p3 0\", \"p4 10\"], [\"p1\", \"p2\", \"p3\", \"p4\"]) \n    == [(\"p1\", 2), (\"p4\", 10)]\n    \"\"\"\n    valid_orders = []\n    for order in orders:\n        parsed_order = parse_order(order)\n        if parsed_order is not None and parsed_order[0] in product_ids and (parsed_order[1] > 0):\n            valid_orders.append(parsed_order)\n    return valid_orders", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/28": [{"task_id": "EvoEval/28", "solution": "def is_valid_price(price: str) -> bool:\n    \"\"\"Check if a price is valid or not\n    :param price: the price of the stock\n    :return: True if valid, False otherwise\n    \"\"\"\n    if price.replace(\".\", \"\", 1).isdigit() and float(price) > 0:\n        return True\n    else:\n        return False\nfrom typing import List, Dict\n\n", "base_status": "fail", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/5": [{"task_id": "EvoEval/5", "solution": "from typing import List\n\ndef validate_input(input: List[int]) -> bool:\n    \"\"\" Validates if the list contains integer values only.\n    Returns True if the input list contains integer values only, otherwise returns False.\n    \n    >>> validate_input([1, 2, \"a\", 4])\n    False\n    >>> validate_input([1, 2, 3, 4])\n    True\n    \"\"\"\n    for item in input:\n        if not isinstance(item, int):\n            return False\n    return True\nfrom typing import List\n\ndef rearrange(numbers: List[int]) -> List[int]:\n    \"\"\" Rearrange the elements in the given list `numbers' to have all even numbers first, \n    followed by all odd numbers. Keep the order within odd or even numbers the same\n    \n    The function should return the rearranged list. If the input list contains non-integer values,\n    the function should return an empty list.\n    \n    >>> rearrange([1, 2, 3, 4])\n    [2, 4, 1, 3]\n    >>> rearrange([1, 2, \"a\", 4])\n    []\n    \"\"\"\n    if not validate_input(numbers):\n        return []\n    even_numbers = []\n    odd_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    return even_numbers + odd_numbers", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/51": [{"task_id": "EvoEval/51", "solution": "def is_special_char(char):\n    \"\"\"\n    is_special_char is a helper function that takes a character and checks if it is a special character.\n\n    >>> is_special_char('a')\n    False\n    >>> is_special_char('!')\n    True\n    >>> is_special_char('1')\n    False\n    >>> is_special_char('&')\n    True\n    \"\"\"\n    special_chars = \"!@#$%^&*()-_=+[]{};:'\\\",.<>/?\"\n    return char in special_chars\n\n\ndef is_digit(char):\n    \"\"\"\n    is_digit is a helper function that takes a character and checks if it is a digit.\n\n    >>> is_digit('a')\n    False\n    >>> is_digit('1')\n    True\n    >>> is_digit('9')\n    True\n    >>> is_digit('&')\n    False\n    \"\"\"\n    return char.isdigit()\ndef encrypt_text(text, shift):\n    \"\"\"\n    encrypt_text is a function that performs a Caesar Cipher encryption on the input string. It takes a string and an integer shift value,\n    and returns a new string where each letter is shifted by the shift value. The function keeps the special characters (\"!@#$%^&*()-_=+[]{};:'\",.<>/?\") and digit characters intact.\n\n    Note: A Caesar Cipher works by shifting the letters in the alphabet by a certain amount. For example, with a shift of 1, 'a' becomes 'b', 'b' becomes 'c', etc.\n    'z' would wrap around to become 'a'. The same applies for uppercase letters. \n\n    >>> encrypt_text('', 3)\n    ''\n    >>> encrypt_text('abcd', 1)\n    'bcde'\n    >>> encrypt_text('xyz', 2)\n    'zab'\n    >>> encrypt_text('Hello, World!', 5)\n    'Mjqqt, Btwqi!'\n    >>> encrypt_text('123abc!', 3)\n    '123def!'\n    \"\"\"\n    encrypted_text = ''\n    for char in text:\n        if char.isalpha():\n            if char.isupper():\n                encrypted_text += chr((ord(char) - 65 + shift) % 26 + 65)\n            else:\n                encrypted_text += chr((ord(char) - 97 + shift) % 26 + 97)\n        elif is_digit(char):\n            encrypted_text += char\n        elif is_special_char(char):\n            encrypted_text += char\n    return encrypted_text", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Hello, World!", 5]], "plus_fail_tests": []}], "EvoEval/69": [{"task_id": "EvoEval/69", "solution": "def classify_score(score):\n    '''\n    Given a score, classify it into one of four categories.\n    \n    \"Poor\" if score is between 0 to 50 (exclusive)\n    \"Average\" if score is between 50 to 70 (exclusive)\n    \"Good\" if score is between 70 to 90 (exclusive)\n    \"Excellent\" if score is between 90 to 100 (inclusive)\n    \n    Example:\n        classify_score(35) == \"Poor\"\n        classify_score(55) == \"Average\"\n        classify_score(75) == \"Good\"\n        classify_score(95) == \"Excellent\"\n    '''\n\n    if score < 50:\n        return \"Poor\"\n    elif score < 70:\n        return \"Average\"\n    elif score < 90:\n        return \"Good\"\n    else:\n        return \"Excellent\"\ndef classify_scores(scores):\n    \"\"\"\n    Given a list of students' scores ranging from 0 to 100, classify the number of students into four categories: \"Poor\", \"Average\", \"Good\", \"Excellent\".\n    \n    \"Poor\" if score is between 0 to 50 (exclusive)\n    \"Average\" if score is between 50 to 70 (exclusive)\n    \"Good\" if score is between 70 to 90 (exclusive)\n    \"Excellent\" if score is between 90 to 100 (inclusive)\n    \n    Return a dictionary with keys being the categories and values being the number of students in each category.\n    \n    Example:\n        classify_scores([35, 55, 75, 95, 60, 80, 100]) == {\"Poor\": 1, \"Average\": 2, \"Good\": 2, \"Excellent\": 2}\n    \"\"\"\n    result = {'Poor': 0, 'Average': 0, 'Good': 0, 'Excellent': 0}\n    for score in scores:\n        category = classify_score(score)\n        result[category] += 1\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/36": [{"task_id": "EvoEval/36", "solution": "def count_capital_letters(s: str) -> int:\n    \"\"\"Helper function to count the number of capital letters in a string.\n    \"\"\"\n    return sum(1 for c in s if c.isupper())\n\n\ndef check_alphanumeric(s: str) -> bool:\n    \"\"\"Helper function to check if a string is alphanumeric.\n    \"\"\"\n    return s.isalnum()\ndef evaluate_string(s: str):\n    \"\"\"Determine the number of words in a string that are purely alphanumeric and have at least one capital letter.\n    \n    A word is defined as a series of alphanumeric characters surrounded by spaces or at the start/end of the string.\n\n    >>> evaluate_string(\"Hello World!\")\n    1\n    >>> evaluate_string(\"This Is A test String 123.\")\n    3\n    >>> evaluate_string(\"no Capital letter here\")\n    1\n    \"\"\"\n    words = s.split()\n    count = 0\n    for word in words:\n        if check_alphanumeric(word) and count_capital_letters(word) > 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/7": [{"task_id": "EvoEval/7", "solution": "def is_leap_year(year: int) -> bool:\n    \"\"\" Returns True if the year is a leap year, False otherwise. \"\"\"\n    if year % 4 != 0:\n        return False\n    elif year % 100 != 0:\n        return True\n    elif year % 400 != 0:\n        return False\n    else:\n        return True\n\n\ndef get_days_in_month(month: int, year: int) -> int:\n    \"\"\" Returns the number of days in a month for a given year. \"\"\"\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif month == 2:\n        return 29 if is_leap_year(year) else 28\n    else:\n        return 30\nfrom typing import List\n\ndef filter_by_valid_dates(dates: List[str]) -> List[str]:\n    \"\"\" Filters an input list of strings and returns only those that are valid dates in the format 'YYYY-MM-DD'.\n    >>> filter_by_valid_dates(['2020-02-30', '2020-02-29', '2019-02-29', '2019-12-31'])\n    ['2020-02-29', '2019-12-31']\n    \"\"\"\n    valid_dates = []\n    for date in dates:\n        try:\n            (year, month, day) = map(int, date.split('-'))\n            if 1 <= month <= 12 and 1 <= day <= get_days_in_month(month, year):\n                valid_dates.append(date)\n        except ValueError:\n            pass\n    return valid_dates", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/79": [{"task_id": "EvoEval/79", "solution": "def is_valid_coordinate(coord: str) -> bool:\n    \"\"\"\n    Helper function to determine if a given string is a valid coordinate.\n    A valid coordinate is defined as a string of the format 'x,y' where\n    x and y are both integers. If the coordinate is valid, the function\n    should return True, else False.\n    >>> is_valid_coordinate('1,2')\n    True\n    >>> is_valid_coordinate('1.2,3.4')\n    False\n    >>> is_valid_coordinate('10,20')\n    True\n    >>> is_valid_coordinate('X,Y')\n    False\n    \"\"\"\n    parts = coord.split(',')\n    if len(parts) != 2:\n        return False\n    try:\n        x = int(parts[0])\n        y = int(parts[1])\n    except ValueError:\n        return False\n    return True\ndef closest_point(points: list[str], target: str) -> str:\n    \"\"\"\n    Given a list of points and a target point, return the point from the list\n    that is closest to the target point. Distance is calculated using the\n    Euclidean distance (i.e., sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)). \n    All points including target point should be a coordinate of integer values\n    in string format like 'x,y'.\n    If there are multiple points at the same closest distance, return one\n    with the smallest first value. If the list of points is empty, return an empty string. If any\n    points are not valid coordinates format, or the target is not a valid\n    coordinate, return an error message: 'Invalid input'\n    >>> closest_point(['1,2','3,4','5,6'],'4,4')\n    '3,4'\n    >>> closest_point(['1,1','2,2','3,3'],'2,2')\n    '2,2'\n    >>> closest_point(['-1,-1','0,0','1,1'],'3,3')\n    '1,1'\n    >>> closest_point(['12,12','1,1','5,6'],'4,4')\n    '5,6'\n    >>> closest_point(['1.1,1.1','2,2','3,3'],'2,2')\n    'Invalid input'\n    >>> closest_point(['1,1', '2,2', '3,3'], 'two,two')\n    'Invalid input'\n    \"\"\"\n    if not is_valid_coordinate(target) or not all((is_valid_coordinate(point) for point in points)):\n        return 'Invalid input'\n    if not points:\n        return ''\n    (target_x, target_y) = map(int, target.split(','))\n    min_distance = float('inf')\n    closest_point = ''\n    for point in points:\n        (x, y) = map(int, point.split(','))\n        distance = ((target_x - x) ** 2 + (target_y - y) ** 2) ** 0.5\n        if distance < min_distance or (distance == min_distance and x < int(closest_point.split(',')[0])):\n            min_distance = distance\n            closest_point = point\n    return closest_point", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/86": [{"task_id": "EvoEval/86", "solution": "def check_credit_card_format(credit_card_number):\n    \"\"\"This helper function checks if the input credit card number is in the correct format.\n    \n    A correct format for this function would be exactly 16 digits. Dashes, spaces, or any\n    other characters are not considered valid.\n\n    Args:\n        credit_card_number (str): A string representing a credit card number.\n\n    Returns:\n        bool: True if the input credit card number is in the correct format, False otherwise.\n    \"\"\"\n    \n    if len(credit_card_number) != 16:\n        return False\n\n    if not credit_card_number.isdigit():\n        return False\n\n    return True\ndef process_payments(payment_data):\n    \"\"\"This function processes a list of payments. Each payment is a dictionary with two keys: 'credit_card_number' \n    and 'amount'. \n\n    The function should output a list of tuples. Each tuple contains two elements, the credit card number \n    and a string representing the status of the payment. If the credit card number is valid and the amount is \n    higher than zero, the status should be 'Processed'. If the credit card number is not valid (A correct format would be exactly 16 digits) or the amount is \n    not higher than zero, the status should be 'Failed'.\n\n    Example:\n    process_payments([{'credit_card_number': '1234567812345678', 'amount': 100}, {'credit_card_number': '1234', 'amount': 0}])\n    ==> [('1234567812345678', 'Processed'), ('1234', 'Failed')]\n\n    Args:\n        payment_data (List[Dict[str, Union[str, int]]]): A list of dictionaries. Each dictionary represents a payment and \n        contains two keys: 'credit_card_number' (str) and 'amount' (int).\n\n    Returns:\n        List[Tuple[str, str]]: A list of tuples. Each tuple represents a payment and contains the credit card number and \n        the status of the payment.\n    \"\"\"\n    result = []\n    for payment in payment_data:\n        credit_card_number = payment['credit_card_number']\n        amount = payment['amount']\n        if check_credit_card_format(credit_card_number) and amount > 0:\n            result.append((credit_card_number, 'Processed'))\n        else:\n            result.append((credit_card_number, 'Failed'))\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/72": [{"task_id": "EvoEval/72", "solution": "def check_divisibility(n1, n2):\n    '''\n    Helper function to check if the first number (n1) is divisible by the second number (n2).\n    Returns True if n1 is divisible by n2, False otherwise.\n    '''\n    if n1 % n2 == 0:\n        return True\n    else:\n        return False\ndef is_strong(n):\n    \"\"\"\n    Write a function that returns True if the number n is strong, and False otherwise.\n    A number is considered strong if it is divisible by every digit in the number.\n\n    Example:\n    is_strong(128) \u279e True \n    # 128 is divisible by 1, 2, and 8.\n\n    is_strong(12) \u279e True \n    # 12 is divisible by 1 and 2.\n\n    is_strong(111) \u279e True\n    # 111 is divisible by 1.\n\n    is_strong(10) \u279e False\n    # 10 is not divisible by 0 (division by zero is undefined).\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    for digit in digits:\n        if not check_divisibility(n, digit):\n            return False\n    return True", "base_status": "fail", "plus_status": null, "base_fail_tests": [[10]], "plus_fail_tests": []}], "EvoEval/4": [{"task_id": "EvoEval/4", "solution": "from typing import List\n\ndef is_valid_input(numbers: List[float]) -> bool:\n    \"\"\" Check if the input list is not empty and contains only numbers\n    Args:\n    numbers : List[float] - A list of float numbers\n    Returns:\n    bool - True if the list is not empty and contains only numbers, False otherwise\n    \"\"\"\n    if not numbers:\n        return False\n    for num in numbers:\n        if not isinstance(num, (int, float)):\n            return False\n    return True\n\ndef has_positive_values(numbers: List[float]) -> bool:\n    \"\"\" Check if the input list contains at least one positive number\n    Args:\n    numbers : List[float] - A list of float numbers\n    Returns:\n    bool - True if the list contains at least one positive number, False otherwise\n    \"\"\"\n    for num in numbers:\n        if num > 0:\n            return True\n    return False\n\ndef calculate_geometric_mean(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate the geometric mean.\n    The geometric mean is the nth root of the product of n numbers, \n    and is used when comparing different items\u2014 like growth rates \u2014so that \n    some numbers do not disproportionately affect the result.\n    If the product of the numbers is too large for your computer's processor, \n    you should use a logarithmic method to calculate the geometric mean.\n    \n    Args:\n    numbers : List[float] - A list of float numbers\n\n    Returns:\n    float - The Geomorphic mean of the list of numbers\n\n    Raises:\n    ValueError: If the list is empty, contains non-numeric values or does not have any positive numbers\n    \n    Round final answer to two decimal places\n    \n    >>> calculate_geometric_mean([1.0, 2.0, 3.0, 4.0])\n    2.21\n    \"\"\"\n    if not is_valid_input(numbers):\n        raise ValueError('Invalid input list')\n    if not has_positive_values(numbers):\n        raise ValueError('Input list does not contain any positive numbers')\n    product = 1.0\n    for num in numbers:\n        product *= num\n    if product > 10 ** 100:\n        log_sum = sum((math.log(num) for num in numbers))\n        geometric_mean = math.exp(log_sum / len(numbers))\n    else:\n        geometric_mean = product ** (1 / len(numbers))\n    return round(geometric_mean, 2)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[0.0, 2.0, 10.0, 12.0]]], "plus_fail_tests": []}], "EvoEval/48": [{"task_id": "EvoEval/48", "solution": "def is_valid_email(email: str) -> bool:\n    \"\"\"Check if the given string is a valid email address.\n    >>> is_valid_email('example@example.com')\n    True\n    >>> is_valid_email('example.com')\n    False\n    \"\"\"\n    if '@' in email and '.' in email:\n        return True\n    else:\n        return False\n\ndef normalize_email(email: str) -> str:\n    \"\"\"Normalize the given email address by making it lower case.\n    >>> normalize_email('Example@Example.Com')\n    'example@example.com'\n    \"\"\"\n    return email.lower()\ndef email_to_username(email_list: list) -> dict:\n    \"\"\"Return a dictionary where each key is a valid (contains both '@' and '.'), normalized email address (lower case) from the email_list\n    and each value is a username extracted from the email (the part before '@'). \n    If an email is not valid, it should be ignored.\n\n    >>> email_to_username(['Example@Example.Com', 'test@domain.com', 'invalid.email'])\n    {'example@example.com': 'Example', 'test@domain.com': 'test'}\n    \"\"\"\n    result = {}\n    for email in email_list:\n        if is_valid_email(email):\n            normalized_email = normalize_email(email)\n            username = email.split('@')[0]\n            result[normalized_email] = username\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/45": [{"task_id": "EvoEval/45", "solution": "def valid_input(string):\n    \"\"\"Check if a string only contains digits and returns True if valid, False otherwise.\n    Args:\n        string: a string\n    Returns:\n        True if the string only contains digits, False otherwise.\n    \"\"\"\n    return string.isdigit()\ndef from_string_to_list(digit_string):\n    \"\"\"Given a string of digits, return a list of integers.\n    If the string contains non-digit characters, return an empty list.\n    >>> from_string_to_list('12345')\n    [1, 2, 3, 4, 5]\n    >>> from_string_to_list('12a45')\n    []\n    \"\"\"\n    if not valid_input(digit_string):\n        return []\n    return [int(digit) for digit in digit_string]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/58": [{"task_id": "EvoEval/58", "solution": "def is_valid_location(board: list[list[str]], row: int, col: int) -> bool:\n    \"\"\" Checks if a cell [row, col] is valid on the board.\n    >>> is_valid_location([['','',''],['','',''],['','','']], 1, 1)\n    True\n    >>> is_valid_location([['','',''],['','',''],['','','']], 3, 3)\n    False\n    \"\"\"\n    if row < 0 or row >= len(board) or col < 0 or col >= len(board[0]):\n        return False\n    return True\ndef place_queen(board: list[list[str]], row: int, col: int) -> bool:\n    \"\"\"Places a queen ('Q') at the cell board[row][col] if it's a valid location and not attacked by any other queen.\n    If placement is successful, it should return True, else False.\n    \"\"\"\n    if is_valid_location(board, row, col) and (not is_attacked(board, row, col)):\n        board[row][col] = 'Q'\n        return True\n    return False", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[["", "", ""], ["", "", ""], ["", "", ""]], 2, 2]], "plus_fail_tests": []}], "EvoEval/6": [{"task_id": "EvoEval/6", "solution": "from typing import List, Tuple\n\ndef helper_function1(s: str) -> Tuple[str, int]:\n    \"\"\" \n    Process a string and return a tuple containing the string in reverse order and its length.\n\n    :param s: input string\n    :return: a tuple of the reversed string and string length\n\n    >>> helper_function1('hello')\n    ('olleh', 5)\n    \"\"\"\n    return s[::-1], len(s)\n\n\ndef helper_function2(s: str) -> bool:\n    \"\"\" \n    Check if a string is a palindrome.\n\n    :param s: input string\n    :return: True if the string is a palindrome, False otherwise\n\n    >>> helper_function2('radar')\n    True\n\n    >>> helper_function2('hello')\n    False\n    \"\"\"\n    return s == s[::-1]\ndef process_strings(string_list: List[str]) -> List[Tuple[str, int, bool]]:\n    \"\"\" \n    The function takes in a list of strings. \n    \n    It returns a list of tuples. Each tuple contains the original string in string_list, its reverse, its \n    length and a boolean indicating whether the reversed string is a palindrome or not.\n\n    >>> process_strings(['hello', 'radar', 'world'])\n    [('hello', 'olleh', 5, False), ('radar', 'radar', 5, True), ('world', 'dlrow', 5, False)]\n    \"\"\"\n    result = []\n    for s in string_list:\n        (reverse_s, length_s) = helper_function1(s)\n        is_palindrome = helper_function2(s)\n        result.append((s, reverse_s, length_s, is_palindrome))\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/53": [{"task_id": "EvoEval/53", "solution": "def is_valid_date(date: str) -> bool:\n    \"\"\"\n    Check if the given date string is valid.\n    \"\"\"\n    # split the date string into day, month, year parts\n    day, month, year = date.split('/')\n\n    # check if day, month, year are all digit strings\n    if not (day.isdigit() and month.isdigit() and year.isdigit()):\n        return False\n\n    # convert day, month, year to integers\n    day = int(day)\n    month = int(month)\n    year = int(year)\n\n    # check if month is in valid range\n    if not 1 <= month <= 12:\n        return False\n\n    # check if day is in valid range\n    if not 1 <= day <= 31:\n        return False\n\n    # check if year is in valid range\n    if not 1900 <= year <= 2100:\n        return False\n\n    return True\ndef birthday_on_a_weekday(birthdate: str, year: int) -> str:\n    \"\"\"\n    Given a birthdate (in the format DD/MM/YYYY) and a year (e.g. 2022),\n    return the day of the week the birthday falls on in the specified year.\n    A valid birth year should be in the range 1900 to 2100 (inclusive).\n    If the birthdate or year is not valid, return 'Invalid date or year'.\n    \"\"\"\n    if not is_valid_date(birthdate) or not 1900 <= year <= 2100:\n        return 'Invalid date or year'\n    try:\n        birthdate_obj = datetime.datetime.strptime(birthdate, '%d/%m/%Y')\n        birthdate_obj = birthdate_obj.replace(year=year)\n        return birthdate_obj.strftime('%A')\n    except ValueError:\n        return 'Invalid date or year'", "base_status": "fail", "plus_status": null, "base_fail_tests": [["02/02/2000", 2022]], "plus_fail_tests": []}], "EvoEval/18": [{"task_id": "EvoEval/18", "solution": "def get_hours(minutes: int) -> int:\n    return minutes // 60\n\ndef get_minutes(minutes: int) -> int:\n    return minutes % 60\ndef format_duration(minutes: int) -> str:\n    hours = get_hours(minutes)\n    mins = get_minutes(minutes)\n    if hours == 0 and mins == 0:\n        return '0 minute'\n    elif hours == 0:\n        return f\"{mins} minute{('s' if mins != 1 else '')}\"\n    elif mins == 0:\n        return f\"{hours} hour{('s' if hours != 1 else '')}\"\n    else:\n        return f\"{hours} hour{('s' if hours != 1 else '')}, {mins} minute{('s' if mins != 1 else '')}\"", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/12": [{"task_id": "EvoEval/12", "solution": "def valid_moves(board, player):\n    \"\"\"This function determines the valid moves a player can make on a given tic-tac-toe board.\n       A valid move is defined as one where the chosen cell of the board is not already occupied.\n\n       Params:\n       board - A 2D list of strings representing the game state.\n       player - A string representing the current player (\"X\" or \"O\").\n       \n       Returns:\n       A list of tuples, where each tuple represents the coordinates (i, j) of a valid move.\"\n    \"\"\"\n    valid_moves = []\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == ' ':\n                valid_moves.append((i,j))\n    return valid_moves\ndef count_winning_moves(board, player):\n    \"\"\"Create a function count_winning_moves that takes as input the current state of a tic-tac-toe\n       board and the current player (\"X\" or \"O\") and returns the number of winning moves available \n       to the current player. In order to count as a winning move, placing the player's symbol (\"X\" or \"O\")\n       on a designated cell would result in that player winning the game.\n       \n       A winning condition in tic-tac-toe is defined as any row, column, or diagonal filled \n       exclusively with the player's symbol.\n       \n       If the board is already winning for the player, return -1\n       \n       The tic-tac-toe board is a 2D list of strings where each string is either \"X\", \"O\", or \" \".\n\n       For example:\n       count_winning_moves([\n                               [\"X\", \" \", \" \"],\n                               [\" \", \"X\", \" \"],\n                               [\" \", \" \", \"X\"]\n                           ], \"X\") \n       returns -1\n       count_winning_moves([\n                               [\"O\", \" \", \" \"],\n                               [\" \", \"X\", \" \"],\n                               [\" \", \" \", \"X\"]\n                           ], \"X\") \n       returns 0\n       count_winning_moves([\n                               [\"X\", \"O\", \"X\"],\n                               [\"O\", \"X\", \"O\"],\n                               [\" \", \" \", \" \"]\n                           ], \"X\") \n       returns 2\n    \"\"\"\n    winning_moves = 0\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == ' ':\n                board[i][j] = player\n                if check_winner(board, player):\n                    winning_moves += 1\n                board[i][j] = ' '\n    if check_winner(board, player):\n        return -1\n    return winning_moves", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[["X", " ", " "], [" ", "X", " "], [" ", " ", "X"]], "X"]], "plus_fail_tests": []}], "EvoEval/80": [{"task_id": "EvoEval/80", "solution": "def read_items(items_str):\n    \"\"\"Converts the string representation of a list of items into a Python list.\n    \n    The string representation of a list follows the format:\n    '{first_item,second_item,third_item,...,last_item}'\n    \"\"\"\n    items_str = items_str.strip('{}')\n    return items_str.split(',')\n\n\ndef validate_item(items):\n    \"\"\"Validates the items of a Python list.\n    \n    Each valid item is a string of digits that represents a positive integer.\n    An item is invalid if it consists of non-digit characters or if it represents a non-positive integer.\n    This function checks each item in the list and removes invalid items.\n    \"\"\"\n    return [item for item in items if item.isdigit() and int(item) > 0]\ndef add_items(items_str):\n    \"\"\"\n    This function takes a string representation of a list of items and returns their sum.\n    Each item is separated by a ','. \n\n    The string starts and ends with a '{' and '}' respectively.\n    If input does not follow the format, return \"Invalid\"\n\n    For each item, if it's not a positive integer, ignore it.\n\n    Finally, return the sum of all the individual digits in the valid items. If no valid items found, return 0.\n\n    Examples:\n    add_items('{1,2,3,4,5}')  # returns 15\n    add_items('{a,b,3,d,e}')  # returns 3\n    add_items('{10,a,20,b,30}')  # returns 6\n    add_items('{}')  # returns 0\n    \"\"\"\n    items = read_items(items_str)\n    valid_items = validate_item(items)\n    if len(items) != len(valid_items):\n        return 'Invalid'\n    return sum((int(item) for item in valid_items))", "base_status": "fail", "plus_status": null, "base_fail_tests": [["{a,b,3,d,e}"]], "plus_fail_tests": []}], "EvoEval/66": [{"task_id": "EvoEval/66", "solution": "def is_upper(c):\n    \"\"\"Helper Function: Check if the given character is uppercase.\n    \n    Args:\n        c (str): Single character string to be checked.\n    \n    Returns:\n        bool: True if the character is uppercase, False otherwise.\n    \"\"\"\n    return c.isupper()\n\ndef is_lower(c):\n    \"\"\"Helper Function: Check if the given character is lowercase.\n    \n    Args:\n        c (str): Single character string to be checked.\n    \n    Returns:\n        bool: True if the character is lowercase, False otherwise.\n    \"\"\"\n    return c.islower()\n\ndef char_to_ascii(c):\n    \"\"\"Helper Function: Convert a character to its ASCII value.\n    \n    Args:\n        c (str): Single character string to be converted.\n    \n    Returns:\n        int: ASCII value of the character.\n    \"\"\"\n    return ord(c)\ndef stringParse(s):\n    \"\"\"Task\n    Write a function that takes a string as input, parses the string and returns a tuple.\n    The first element of the tuple is the sum of the ASCII codes of the uppercase characters.\n    The second element of the tuple is the sum of the ASCII codes of the lowercase characters. \n\n    Examples: \n        stringParse(\"\") => (0, 0)\n        stringParse(\"abAB\") => (131, 195)\n        stringParse(\"abcCd\") => (67, 394)\n        stringParse(\"helloE\") => (69, 532)\n        stringParse(\"woArBld\") => (131, 552)\n        stringParse(\"aAaaaXa\") => (153, 485)\n    \"\"\"\n    upper_sum = 0\n    lower_sum = 0\n    for char in s:\n        if is_upper(char):\n            upper_sum += char_to_ascii(char)\n        elif is_lower(char):\n            lower_sum += char_to_ascii(char)\n    return (upper_sum, lower_sum)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/70": [{"task_id": "EvoEval/70", "solution": "def check_data(data):\n    \"\"\"\n    Check if the input data is a list and if all elements of the list are integers.\n\n    :param data: list of elements\n    :return: boolean - True if the input is a list of integers, False otherwise.\n    \"\"\"\n\n    if not isinstance(data, list):\n        return False\n\n    for element in data:\n        if not isinstance(element, int):\n            return False\n\n    return True\n\ndef custom_list_parser(lst):\n    \"\"\"\n    Given a list of integers, return a new list where elements are replaced as per the following rules:\n    - If an element is positive, replace the element with its square.\n    - If an element is negative, replace the element with its absolute value.\n\n    If the input is not a valid list of integers, the function should return None.\n\n    Examples:\n    custom_list_parser([1, 2, -3, 4]) == [1, 4, 3, 16]\n    custom_list_parser([-5, -4, -3, 2]) == [5, 4, 3, 4]\n    custom_list_parser([]) == []\n    \"\"\"\n    if not check_data(lst):\n        return None\n    new_lst = []\n    for element in lst:\n        if element > 0:\n            new_lst.append(element ** 2)\n        else:\n            new_lst.append(abs(element))\n    return new_lst", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/44": [{"task_id": "EvoEval/44", "solution": "def check_validity(input_string: str) -> bool:\n    \"\"\"Check if the input string is a valid binary representation.\n\n    A valid binary representation contains only the digits 0 and 1.\n    Returns True if the string is valid and False otherwise.\n\n    >>> check_validity('0101')\n    True\n    >>> check_validity('1234')\n    False\n    >>> check_validity('ABCD')\n    False\n    \"\"\"\n    valid_digits = {'0', '1'}\n    return set(input_string) <= valid_digits\ndef binary_to_decimal(binary_string: str) -> int:\n    \"\"\"Convert a binary string to a decimal number.\n\n    The string must represent a valid binary number, \n    i.e., it should contain only the digits 0 and 1.\n    If the string is not valid, return -1.\n    If the string is empty, return None.\n\n    >>> binary_to_decimal('1101')\n    13\n    >>> binary_to_decimal('1000')\n    8\n    >>> binary_to_decimal('')\n    None\n    >>> binary_to_decimal('1234')\n    -1\n    \"\"\"\n    if not check_validity(binary_string):\n        return -1\n    if binary_string == '':\n        return None\n    decimal = 0\n    power = len(binary_string) - 1\n    for digit in binary_string:\n        decimal += int(digit) * 2 ** power\n        power -= 1\n    return decimal", "base_status": "fail", "plus_status": null, "base_fail_testsplus_fail_tests": []}], "EvoEval/0": [{"task_id": "EvoEval/0", "solution": "def get_digit_count(n: int) -> int:\n    return len(str(n))\nfrom typing import List, Tuple\n\ndef distribute_candies(candies: List[int], n: int) -> List[int]:\n    result = [0] * n\n    i = 0\n    while candies:\n        for j in range(n):\n            if not candies:\n                break\n            count = get_digit_count(i + 1)\n            if candies[0] >= count:\n                result[j] += count\n                candies[0] -= count\n                if candies[0] == 0:\n                    candies.pop(0)\n            else:\n                result[j] += candies[0]\n                candies[0] = 0\n        i += 1\n    return result", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[100, 200, 300, 400, 500], 3]], "plus_fail_tests": []}]}}