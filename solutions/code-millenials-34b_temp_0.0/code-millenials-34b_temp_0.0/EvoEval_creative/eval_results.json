{"eval": {"EvoEval/91": [{"task_id": "EvoEval/91", "solution": "def spaceship_trajectory(spaceship_data):\n    status = 'On Ground'\n    for (action, distance) in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                pass\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n    return status", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/21": [{"task_id": "EvoEval/21", "solution": "def crossword_validator(grid, words):\n\n    def search(word, grid, i, j, dx, dy):\n        for k in range(len(word)):\n            if grid[i + k * dy][j + k * dx] != word[k]:\n                return False\n        return True\n\n    def find_word(word, grid):\n        n = len(grid)\n        for i in range(n):\n            for j in range(n):\n                if search(word, grid, i, j, 1, 0) or search(word, grid, i, j, 0, 1) or search(word, grid, i, j, -1, 0) or search(word, grid, i, j, 0, -1):\n                    return True\n        return False\n    return all((find_word(word, grid) for word in words))", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[["c", "a", "t"], ["d", "o", "g"], ["d", "o", "p"]], ["cat", "dog", "pop"]]], "plus_fail_tests": []}], "EvoEval/92": [{"task_id": "EvoEval/92", "solution": "def paint_fountain(n):\n    alphabet = [chr(i) for i in range(65, 91)]\n    layers = []\n    for i in range(n):\n        layer = ''\n        width = 2 * min(i, n - 1 - i) + 1\n        offset = abs(i - n + 1)\n        for j in range(width):\n            if j < offset or j >= width - offset:\n                layer += ' '\n            else:\n                layer += alphabet[(i + j - offset) % 26]\n        layers.append(layer.center(2 * n - 1))\n    return '\\n'.join(layers)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[3]], "plus_fail_tests": []}], "EvoEval/2": [{"task_id": "EvoEval/2", "solution": "from typing import List, Union\n\ndef encrypt_message(words: List[str], key: Union[str, int]) -> List[str]:\n\n    def ascii_sum(s: str) -> int:\n        return sum((ord(c) for c in s))\n\n    def caesar_cipher(word: str, key: int) -> str:\n        result = ''\n        for c in word:\n            if not c.isalpha():\n                result += c\n            else:\n                start = ord('a') if c.islower() else ord('A')\n                result += chr((ord(c) - start + key) % 26 + start)\n        return result\n    if isinstance(key, str):\n        key = ascii_sum(key)\n    return [caesar_cipher(word.lower(), key) for word in words]", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["ant", "bat", "cat", "dog", "elephant"], -1]], "plus_fail_tests": []}], "EvoEval/65": [{"task_id": "EvoEval/65", "solution": "def food_order(menu, order):\n    if not order:\n        return menu\n    final_order = menu.copy()\n    for (food, customizations) in order.items():\n        if food in final_order:\n            if 'remove' in customizations:\n                for ingredient in customizations['remove']:\n                    if ingredient in final_order[food]:\n                        final_order[food].remove(ingredient)\n            if 'add' in customizations:\n                final_order[food].extend(customizations['add'])\n    return final_order", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/26": [{"task_id": "EvoEval/26", "solution": "def pathfinder(maze, start, end):\n    if start == end:\n        return []\n    num_rows = len(maze)\n    num_cols = len(maze[0])\n    visited = [[False for _ in range(num_cols)] for _ in range(num_rows)]\n    queue = [(start, [])]\n    directions = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n    while queue:\n        (current, path) = queue.pop(0)\n        if current == end:\n            return path\n        visited[current[0]][current[1]] = True\n        for (direction, (dy, dx)) in directions.items():\n            (new_x, new_y) = (current[0] + dy, current[1] + dx)\n            if 0 <= new_x < num_rows and 0 <= new_y < num_cols and (not visited[new_x][new_y]) and (maze[new_x][new_y] == 0):\n                queue.append(((new_x, new_y), path + [direction]))\n    return []", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/32": [{"task_id": "EvoEval/32", "solution": "def playlist_shuffle(playlist: list, seed: int):\n    playlist_length = len(playlist)\n    playlist_copy = playlist.copy()\n    playlist_copy.sort()\n    for i in range(playlist_length):\n        seed = seed * 16807 % 2147483647\n        j = seed % playlist_length\n        if 'Rock' not in playlist_copy[i]:\n            (playlist_copy[i], playlist_copy[j]) = (playlist_copy[j], playlist_copy[i])\n    return playlist_copy", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["One More Time", "Around the World", "Harder Better Faster Stronger"], 7]], "plus_fail_tests": []}], "EvoEval/30": [{"task_id": "EvoEval/30", "solution": "from typing import List, Tuple\n\ndef find_path(maze: List[List[int]], start: Tuple[int], end: Tuple[int]):\n    (rows, cols) = (len(maze), len(maze[0]))\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    queue = deque([(start, [start])])\n    visited = set()\n    while queue:\n        ((x, y), path) = queue.popleft()\n        if (x, y) == end:\n            return path\n        for (dx, dy) in directions:\n            (new_x, new_y) = (x + dx, y + dy)\n            if 0 <= new_x < rows and 0 <= new_y < cols and (maze[new_x][new_y] == 1) and ((new_x, new_y) not in visited):\n                queue.append(((new_x, new_y), path + [(new_x, new_y)]))\n                visited.add((new_x, new_y))\n    return []", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[[1, 0, 1, 1, 1], [1, 0, 1, 0, 1], [1, 1, 1, 0, 1], [1, 0, 0, 0, 1], [1, 1, 1, 1, 1]], [0, 0], [4, 4]]], "plus_fail_tests": []}], "EvoEval/74": [{"task_id": "EvoEval/74", "solution": "def cipher_mapping(s, cipher):\n    result = ''\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/78": [{"task_id": "EvoEval/78", "solution": "def find_pattern(mat):\n    n = len(mat)\n    result = []\n    for i in range(n):\n        result.append(mat[i][i])\n        result.append(mat[i][n - i - 1])\n    return result[1:] + result[:1]", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]], "plus_fail_tests": []}], "EvoEval/90": [{"task_id": "EvoEval/90", "solution": "def magical_multiply(s1, s2):\n    num1 = int(s1)\n    num2 = int(s2)\n    combinations = []\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            combinations.append(int(s1[i]) * int(s2[j]))\n    return sum(combinations)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["24", "13"]], "plus_fail_tests": []}], "EvoEval/82": [{"task_id": "EvoEval/82", "solution": "def zodiac_element(birthdays):\n    if not birthdays:\n        return None\n    elements = {'Fire': ['03-21', '04-19', '07-23', '08-23', '11-23', '12-22'], 'Water': ['06-21', '07-23', '02-19', '03-20'], 'Air': ['05-21', '06-21', '09-23', '10-23', '11-22', '01-20'], 'Earth': ['04-20', '05-21', '08-22', '09-22', '10-22', '11-21']}\n    result = {}\n    for birthday in birthdays:\n        (month, day) = birthday.split('-')\n        for (element, dates) in elements.items():\n            if day + '-' + month in dates:\n                result[element] = result.get(element, 0) + 1\n    return result", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["2000-03-21", "2001-05-21", "2002-08-23", "2003-02-19"]]], "plus_fail_tests": []}], "EvoEval/81": [{"task_id": "EvoEval/81", "solution": "def alien_language(word_list, alien_dictionary):\n    if not word_list:\n        return 'CORRECT'\n    alien_order = {char: idx for (idx, char) in enumerate(alien_dictionary)}\n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        min_len = min(len(word1), len(word2))\n        if word1[:min_len] > word2[:min_len]:\n            return 'INCORRECT'\n        if len(word1) > len(word2):\n            return 'INCORRECT'\n        for (char1, char2) in zip(word1, word2):\n            if alien_order[char1] > alien_order[char2]:\n                return 'INCORRECT'\n    return 'CORRECT'", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["cat", "dog", "elephant"], "abcdefghijklmnopqrstuvwxyz"]], "plus_fail_tests": []}], "EvoEval/40": [{"task_id": "EvoEval/40", "solution": "def potion_mixing(potions, target):\n    potions.sort(key=lambda x: (int(x.split()[-1]), x))\n    for i in range(len(potions)):\n        for j in range(i + 1, len(potions)):\n            if int(potions[i].split()[-1]) + int(potions[j].split()[-1]) == target:\n                return [potions[i], potions[j]]\n            elif int(potions[i].split()[-1]) + int(potions[j].split()[-1]) > target:\n                break\n    return []", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["Healing Potion 10", "Strength Potion 5", "Invisibility Potion 7"], 15]], "plus_fail_tests": []}], "EvoEval/50": [{"task_id": "EvoEval/50", "solution": "def text_to_morse(text):\n    morse_code = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': '  '}\n    morse_text = ''\n    for char in text:\n        morse_text += morse_code[char.upper()] + ' '\n    return morse_text.strip()", "base_status": "fail", "plus_status": null, "base_fail_tests": [["HELLO WORLD"]], "plus_fail_tests": []}], "EvoEval/67": [{"task_id": "EvoEval/67", "solution": "def meal_calculator(customers, meals):\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum((meal['calories'] for meal in meals[customer]))\n            result[customer] = total_calories\n        else:\n            result[customer] = 0\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/75": [{"task_id": "EvoEval/75", "solution": "def magical_string_transformer(input_str):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    digits = '0123456789'\n    output_str = ''\n    for (i, char) in enumerate(input_str):\n        if char in vowels:\n            output_str += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            output_str += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char in digits:\n            output_str += str((int(char) + 1) % 10)\n        elif char == '?':\n            if i % 2 == 0:\n                output_str += '!'\n            else:\n                output_str += '?'\n        else:\n            output_str += char\n    return output_str", "base_status": "fail", "plus_status": null, "base_fail_tests": [["?!AEIOUaeiou"]], "plus_fail_tests": []}], "EvoEval/97": [{"task_id": "EvoEval/97", "solution": "def alien_invasion(alien, humans):\n    continents = ['Asia', 'Africa', 'Europe', 'North America', 'South America']\n    order = {continent: i for (i, continent) in enumerate(continents)}\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    human_names = sorted(humans.keys(), key=lambda x: order.get(humans[x], float('inf')))\n    return human_names if human_names[0] == alien else []", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Xenomorph", {"John": "Asia", "Sarah": "Europe", "Michael": "North America", "Ana": "Africa"}]], "plus_fail_tests": []}], "EvoEval/62": [{"task_id": "EvoEval/62", "solution": "def recipe_converter(recipe, conversion_factor):\n    new_recipe = {}\n    for (ingredient, quantity) in recipe.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/44": [{"task_id": "EvoEval/44", "solution": "def fairy_tale_transport(q, w, e):\n    unicorn_capacity = w\n    dragon_griffin_capacity = e\n    total_capacity = unicorn_capacity + dragon_griffin_capacity\n    total_weight = sum(q)\n    if total_weight <= total_capacity:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/22": [{"task_id": "EvoEval/22", "solution": "def galactic_travel(t, v):\n    light_year = 9.461 * 10 ** 12\n    distance = t * v\n    distance_ly = distance / light_year\n    return round(distance_ly, 15)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[1, 300000]], "plus_fail_tests": []}], "EvoEval/20": [{"task_id": "EvoEval/20", "solution": "def generate_pattern(n: int):\n    if n <= 0:\n        return []\n    else:\n        pattern = []\n        for i in range(1, n + 1):\n            pattern.append(','.join((str(j) for j in range(1, i + 1))))\n        for i in range(n - 1, 0, -1):\n            pattern.append(','.join((str(j) for j in range(i, 0, -1))))\n        return pattern", "base_status": "fail", "plus_status": null, "base_fail_tests": [[3]], "plus_fail_tests": []}], "EvoEval/42": [{"task_id": "EvoEval/42", "solution": "def find_legendary_item(player_input):\n    legendary_acquired = False\n    second_most_valuable_item = None\n    for item in player_input:\n        if item == 5:\n            legendary_acquired = True\n        elif not legendary_acquired and (second_most_valuable_item is None or item > second_most_valuable_item):\n            second_most_valuable_item = item\n    return (legendary_acquired, second_most_valuable_item if not legendary_acquired else -1)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[1, 2, 3, 4, 5]]], "plus_fail_tests": []}], "EvoEval/33": [{"task_id": "EvoEval/33", "solution": "def magical_staircase(n: int, magic_stones: list):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i - stone >= 0:\n                dp[i] += dp[i - stone]\n    return dp[n]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/70": [{"task_id": "EvoEval/70", "solution": "def planet_path(planets, path):\n    if not path or not planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i + 1] not in planets.get(path[i], []):\n            return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/88": [{"task_id": "EvoEval/88", "solution": "def planet_population(dict_of_planets):\n    result = {}\n    for (planet, features) in dict_of_planets.items():\n        (population, size) = features\n        if population is not None and size is not None:\n            if size != 0:\n                result[planet] = round(population / size, 2)\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/84": [{"task_id": "EvoEval/84", "solution": "def tree_traversal(tree):\n\n    def dfs(tree, path, paths):\n        if not tree:\n            paths.append(path)\n            return\n        for (k, v) in tree.items():\n            dfs(v, path + [k], paths)\n    paths = []\n    dfs(tree, [], paths)\n    return paths", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/85": [{"task_id": "EvoEval/85", "solution": "def princess_rescue(coord, grid):\n    queue = [(0, 0, 0)]\n    directions = [(0, 1), (1, 0)]\n    (n, m) = (len(grid), len(grid[0]))\n    goal = coord\n    visited = [[False] * m for _ in range(n)]\n    while queue:\n        (x, y, moves) = queue.pop(0)\n        if (x, y) == goal:\n            return moves\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < m and (not visited[nx][ny]) and (grid[nx][ny] == 0):\n                visited[nx][ny] = True\n                queue.append((nx, ny, moves + 1))\n    return -1", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/31": [{"task_id": "EvoEval/31", "solution": "def unique_paths(m: int, n: int):\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[m - 1][n - 1]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/37": [{"task_id": "EvoEval/37", "solution": "def string_transform(s):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                result += vowels[(index + 1) % len(vowels)].upper() if char.isupper() else vowels[(index + 1) % len(vowels)]\n            else:\n                index = consonants.index(char.lower())\n                result += consonants[(index + 1) % len(consonants)].upper() if char.isupper() else consonants[(index + 1) % len(consonants)]\n        else:\n            result += char\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/83": [{"task_id": "EvoEval/83", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    (i, j) = (0, len(s) - 1)\n    arr = list(s)\n    while i < j:\n        if arr[i] not in vowels:\n            i += 1\n        elif arr[j] not in vowels:\n            j -= 1\n        else:\n            (arr[i], arr[j]) = (arr[j], arr[i])\n            (i, j) = (i + 1, j - 1)\n    return ''.join(arr)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/96": [{"task_id": "EvoEval/96", "solution": "def get_magic_indices(lst):\n    magic_indices = []\n    for i in range(len(lst)):\n        val = lst[i]\n        if val == 0:\n            if i == 0:\n                magic_indices.append(i)\n        elif val > 0 and val % i == 0:\n            if val == 1 or val == -1:\n                if i == 0:\n                    magic_indices.append(i)\n            else:\n                product = 1\n                while val > 0:\n                    digit = val % 10\n                    product *= digit\n                    val //= 10\n                if product == i:\n                    magic_indices.append(i)\n    return magic_indices", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 20]]], "plus_fail_tests": []}], "EvoEval/55": [{"task_id": "EvoEval/55", "solution": "def treasure_map(message, shift):\n    result = ''\n    for i in range(len(message)):\n        char = message[i]\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + i + shift) % 26 + ascii_offset)\n        else:\n            result += char\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/98": [{"task_id": "EvoEval/98", "solution": "def nature_sequence_generator(n, a, b):\n\n    def is_prime(num):\n        if num > 1:\n            for i in range(2, num):\n                if num % i == 0:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i - 1] + sequence[i - 2] + 1\n        sequence.append(next_num)\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n    return sequence", "base_status": "fail", "plus_status": null, "base_fail_tests": [[5, 1, 2]], "plus_fail_tests": []}], "EvoEval/61": [{"task_id": "EvoEval/61", "solution": "def transform_string(s):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_s = ''\n    for i in range(len(s)):\n        if s[i] == ' ':\n            new_s += ' '\n        else:\n            if i % 2 != 0:\n                new_s += s[i].swapcase()\n            else:\n                new_s += s[i]\n            if new_s[-1].lower() in vowels:\n                new_s = new_s[:-1] + vowels[(vowels.index(new_s[-1].lower()) + 1) % len(vowels)]\n            elif new_s[-1].lower() in consonants:\n                new_s = new_s[:-1] + consonants[(consonants.index(new_s[-1].lower()) - 1) % len(consonants)]\n    return new_s", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Hello World"]], "plus_fail_tests": []}], "EvoEval/63": [{"task_id": "EvoEval/63", "solution": "def create_pyramid(p):\n    pyramid = [p]\n    while p > 2:\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        pyramid.append(p)\n    return pyramid", "base_status": "fail", "plus_status": null, "base_fail_tests": [[0]], "plus_fail_tests": []}], "EvoEval/24": [{"task_id": "EvoEval/24", "solution": "def alien_language_translator(english_word: str):\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    alien_word = ''\n    for char in english_word:\n        if char.isalpha():\n            alien_word += alien_dict[char.lower()]\n        else:\n            alien_word += char\n    return alien_word", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/19": [{"task_id": "EvoEval/19", "solution": "def vampires_in_matrix(m: list):\n    humans_in_danger = 0\n    vampire_rows = [0] * len(m)\n    vampire_cols = [0] * len(m[0])\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            if m[i][j] == 1:\n                if vampire_rows[i] == 1 or vampire_cols[j] == 1:\n                    humans_in_danger += 1\n            elif m[i][j] == 2:\n                vampire_rows[i] = 1\n                vampire_cols[j] = 1\n    return humans_in_danger", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[[1], [2, 1], [1, 1]]]], "plus_fail_tests": []}], "EvoEval/25": [{"task_id": "EvoEval/25", "solution": "def word_frequency_analysis(text: str, word: str):\n    sentences = text.split('. ')\n    max_freq = 0\n    max_sentence = ''\n    for sentence in sentences:\n        freq = sentence.count(word)\n        if freq > max_freq:\n            max_freq = freq\n            max_sentence = sentence\n    return (max_freq, max_sentence) if max_freq > 0 else (0, '')", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Hello world. I love this world.", "world"]], "plus_fail_tests": []}], "EvoEval/57": [{"task_id": "EvoEval/57", "solution": "def magical_cafe(menu, magic_spell):\n    new_menu = {}\n    spell_length = len(magic_spell)\n    for (i, (dish, price)) in enumerate(menu.items()):\n        new_dish = ''\n        for (j, char) in enumerate(dish):\n            new_dish += magic_spell[j % spell_length]\n        new_menu[new_dish] = price\n    return new_menu", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/94": [{"task_id": "EvoEval/94", "solution": "def spell_casting(strings):\n    result = []\n    for spell in strings:\n        words = spell.split()\n        words.sort(key=len)\n        result.append(' '.join(words))\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/76": [{"task_id": "EvoEval/76", "solution": "def create_pyramid(lst):\n    if not lst:\n        return []\n    pyramid = []\n    current_level = lst[0]\n    while current_level > 0:\n        level_string = '#' * current_level\n        pyramid.append(level_string)\n        current_level -= lst.pop(0)\n    return pyramid", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[3, 2, 1]]], "plus_fail_tests": []}], "EvoEval/13": [{"task_id": "EvoEval/13", "solution": "\nfrom typing import List\n\ndef find_rarest_element(elems: List[str]) -> str:\n    if not elems:\n        return None\n    counter = Counter(elems)\n    rarest_element = min(counter, key=counter.get)\n    return rarest_element", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["apple", "apple", "apple", "banana", "banana", "orange", "orange"]]], "plus_fail_tests": []}], "EvoEval/15": [{"task_id": "EvoEval/15", "solution": "def evaluate_poker_hand(hand: list):\n    values = [card[:-1] for card in hand]\n    counts = [values.count(value) for value in set(values)]\n    score = 0\n    for count in counts:\n        if count == 2:\n            score += int(hand[values.index(values[counts.index(count)])][:-1])\n        elif count == 3:\n            score += 2 * int(hand[values.index(values[counts.index(count)])][:-1])\n        elif count == 4:\n            score += 3 * int(hand[values.index(values[counts.index(count)])][:-1])\n        elif count == 5:\n            score += 4 * int(hand[values.index(values[counts.index(count)])][:-1])\n    return score", "base_status": "fail", "plus_status": null, "base_fail_tests": [[["5H", "5D", "5S", "9C", "9D"]]], "plus_fail_tests": []}], "EvoEval/14": [{"task_id": "EvoEval/14", "solution": "def create_alias(name: str) -> str:\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_name = ''\n    for char in name:\n        if char.lower() in vowels:\n            index = vowels.find(char.lower())\n            new_char = vowels[(index + 1) % 5] if char.islower() else vowels[(index + 1) % 5].upper()\n            new_name += new_char\n        elif char.lower() in consonants:\n            index = consonants.find(char.lower())\n            new_char = consonants[(index + 1) % 21] if char.islower() else consonants[(index + 1) % 21].upper()\n            new_name += new_char\n        else:\n            new_name += char\n    return new_name", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/35": [{"task_id": "EvoEval/35", "solution": "def validate_email_structure(email: str):\n    if email[0] == '@' or email[-1] == '@' or '@' not in email:\n        return False\n    else:\n        split_email = email.split('@')\n        if len(split_email) != 2 or '.' not in split_email[1]:\n            return False\n    return True", "base_status": "fail", "plus_status": null, "base_fail_tests": [[""]], "plus_fail_tests": []}], "EvoEval/68": [{"task_id": "EvoEval/68", "solution": "def magical_sorting(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inversions += 1\n    return inversions % 2 == 0", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[3, 5, 4, 1, 2]]], "plus_fail_tests": []}], "EvoEval/59": [{"task_id": "EvoEval/59", "solution": "def cooking_challenge(ingredient_dict):\n    sorted_dict = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_dict", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/89": [{"task_id": "EvoEval/89", "solution": "def space_invaders(aliens, ray):\n    remaining_aliens = []\n    for alien in aliens:\n        if alien < ray - 1 or alien > ray + 1:\n            remaining_aliens.append(alien)\n    return remaining_aliens", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[1, 2, 4, 5, 6], 4]], "plus_fail_tests": []}], "EvoEval/10": [{"task_id": "EvoEval/10", "solution": "from typing import List\n\ndef count_animals(animal_string: str) -> List[int]:\n    sound_dict = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\n    sound_list = animal_string.split()\n    count_list = []\n    count = 0\n    for sound in sound_list:\n        animal = sound[0]\n        if animal in sound_dict and animal_dict[animal] < 2 and (count < 5):\n            sound_count = sound.count('|')\n            count_list.append(sound_count)\n            animal_dict[animal] += 1\n            count += 1\n    return count_list", "base_status": "fail", "plus_status": null, "base_fail_tests": [["C||| D|| B| C| K||| B|||"]], "plus_fail_tests": []}], "EvoEval/52": [{"task_id": "EvoEval/52", "solution": "def magic_cookie_baker(n, m, orders):\n    orders.sort()\n    fulfilled_orders = 0\n    current_batch = 0\n    for order in orders:\n        if current_batch + order <= n:\n            current_batch += order\n        elif current_batch > 0:\n            fulfilled_orders += 1\n            current_batch = order\n        else:\n            continue\n        if fulfilled_orders == m:\n            break\n    return fulfilled_orders", "base_status": "fail", "plus_status": null, "base_fail_tests": [[2, 4, [2, 4, 6, 8, 10]]], "plus_fail_tests": []}], "EvoEval/34": [{"task_id": "EvoEval/34", "solution": "def werewolf_transformation(n: int, m: int):\n    percentages = [0] * n\n    if m > 0:\n        for i in range(1, m):\n            percentages[i] = percentages[i - 1] + 10\n        percentages[m - 1] = percentages[m - 2] * 2\n        for i in range(m, n):\n            percentages[i] = max(0, percentages[i - 1] - 10)\n    return percentages", "base_status": "fail", "plus_status": null, "base_fail_tests": [[30, 13]], "plus_fail_tests": []}], "EvoEval/16": [{"task_id": "EvoEval/16", "solution": "def fibonacci_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        (a, b) = (0, 1)\n        total_sum = 1\n        for _ in range(2, n):\n            (a, b) = (b, a + b)\n            total_sum += b\n        return total_sum", "base_status": "fail", "plus_status": null, "base_fail_tests": [[1]], "plus_fail_tests": []}], "EvoEval/47": [{"task_id": "EvoEval/47", "solution": "def recipe_ingredients(recipe, available):\n    for (ingredient, quantity) in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/38": [{"task_id": "EvoEval/38", "solution": "def translate_emoticons(sentence):\n    emoticons = {':)': '\ud83d\ude0a', ':(': '\u2639\ufe0f', ':D': '\ud83d\ude00', ';)': '\ud83d\ude09'}\n    for (emoticon, unicode_emoji) in emoticons.items():\n        sentence = sentence.replace(emoticon, unicode_emoji)\n    return sentence", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/71": [{"task_id": "EvoEval/71", "solution": "def letter_shift_cipher(s, n):\n    vowels = 'aeiou'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted += alphabet[(alphabet.index(char) + n) % 26]\n            else:\n                encrypted += alphabet[(alphabet.index(char.lower()) + n) % 26].upper()\n            if char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted += char\n    return (encrypted, vowel_count)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["hello", 1]], "plus_fail_tests": []}], "EvoEval/46": [{"task_id": "EvoEval/46", "solution": "def hidden_message(test_cases):\n    secret_messages = []\n    for test_case in test_cases:\n        message = ''\n        for word in test_case:\n            message += word[0]\n        if message == 'Take the cannoli':\n            secret_messages.append('Take the cannoli.')\n        else:\n            secret_messages.append(message.lower())\n    return secret_messages", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[["apple"], ["Banana", "grape", "kiwi", "melon"]]]], "plus_fail_tests": []}], "EvoEval/3": [{"task_id": "EvoEval/3", "solution": "from typing import List\n\ndef magical_alphabet(input_string: str) -> List[str]:\n    alphabet = {'1': 'a', '2': 'b', '3': 'c', '4': 'd', '5': 'e', '6': 'f', '7': 'g', '8': 'h', '9': 'i', '10': 'j', '11': 'k', '12': 'l', '13': 'm', '14': 'n', '15': 'o', '16': 'p', '17': 'q', '18': 'r', '19': 's', '20': 't', '21': 'u', '22': 'v', '23': 'w', '24': 'x', '25': 'y', '26': 'z'}\n\n    def backtrack(combination, next_digits):\n        if len(next_digits) == 0:\n            combinations.append(combination)\n        else:\n            for i in range(1, len(next_digits) + 1):\n                curr_str = next_digits[:i]\n                if curr_str in alphabet:\n                    backtrack(combination + alphabet[curr_str], next_digits[i:])\n    combinations = []\n    backtrack('', input_string)\n    return combinations", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/27": [{"task_id": "EvoEval/27", "solution": "def split_strings(s: str, n: int):\n    return [s[i:i + n] for i in range(0, len(s), n)]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/8": [{"task_id": "EvoEval/8", "solution": "def transform_canvas(canvas: str) -> str:\n    start_index = canvas.find('P')\n    if start_index == -1:\n        return canvas\n    if canvas.count('P') > 1 or canvas.count('-') % 2 == 1:\n        return 'Invalid canvas'\n    new_canvas = list(canvas)\n    for i in range(start_index, len(canvas)):\n        if new_canvas[i] == '-':\n            new_canvas[i] = '*'\n        else:\n            break\n    return ''.join(new_canvas)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["P----#-----#-----#-----"]], "plus_fail_tests": []}], "EvoEval/11": [{"task_id": "EvoEval/11", "solution": "from typing import List\n\ndef fruity_messages(fruits: List[str], location: str) -> str:\n    if len(fruits) == 1:\n        return f'Oh, are those {fruits[0]} from {location}? Marvelous!'\n    elif len(fruits) == 2:\n        return f'Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!'\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/99": [{"task_id": "EvoEval/99", "solution": "def musical_chairs(n, rounds, music):\n    players = list(range(1, n + 1))\n    position = 0\n    for round_time in rounds:\n        for _ in range(round_time):\n            position = (position + music) % len(players)\n            del players[position]\n    return players", "base_status": "fail", "plus_status": null, "base_fail_tests": [[5, [2, 3, 4], 1]], "plus_fail_tests": []}], "EvoEval/95": [{"task_id": "EvoEval/95", "solution": "def matrixMystery(m):\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    first_diagonal_sum = sum((m[i][i] for i in range(len(m))))\n    second_diagonal_sum = sum((m[i][len(m) - i - 1] for i in range(len(m))))\n    return abs(first_diagonal_sum - second_diagonal_sum)", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/1": [{"task_id": "EvoEval/1", "solution": "from typing import List, Union\n\ndef calculate_shipping_cost(items: List[Union[str, float]], location: str) -> float:\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            total_cost += 5.0\n            if location in ['National', 'International']:\n                total_cost += 10.0\n        elif isinstance(item, float) and item > 5.0:\n            total_cost += 5.0\n            total_cost += 10.0\n        else:\n            total_cost += 5.0\n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[3.0, "Book", 7.0], "National"]], "plus_fail_tests": []}], "EvoEval/43": [{"task_id": "EvoEval/43", "solution": "def space_travel(distance, speed, fuel, planet_gravity, spaceship_weight):\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    trip_duration = distance / speed\n    if fuel < trip_duration:\n        return 'Insufficient fuel'\n    else:\n        remaining_fuel = fuel - trip_duration\n        return round(remaining_fuel, 2)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[4.22, 0.5, 10, 9.8, 100]], "plus_fail_tests": []}], "EvoEval/6": [{"task_id": "EvoEval/6", "solution": "from typing import List, Tuple\n\ndef minesweeper_clicked(grid: List[List[int]], position: Tuple[int, int]) -> List[List[int]]:\n    (x, y) = position\n    if x < 0 or y < 0 or x >= len(grid) or (y >= len(grid[0])):\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    elif grid[x][y] == 0:\n        return grid\n    else:\n        grid[x][y] = 0\n        for i in range(max(0, x - 1), min(len(grid), x + 2)):\n            for j in range(max(0, y - 1), min(len(grid[0]), y + 2)):\n                if grid[i][j] == -1:\n                    grid[i][j] = 0\n        return grid", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/39": [{"task_id": "EvoEval/39", "solution": "def asciiArt(n, s):\n    art = [['*' for _ in range(len(s) * n + 2)] for _ in range(n + 2)]\n    for i in range(1, n + 1):\n        for j in range(1, len(s) * n + 1):\n            if (j - 1) // n < len(s):\n                art[i][j] = s[(j - 1) // n]\n    art_str = '\\n'.join([''.join(row) for row in art])\n    return art_str", "base_status": "fail", "plus_status": null, "base_fail_tests": [[1, "abc"]], "plus_fail_tests": []}], "EvoEval/56": [{"task_id": "EvoEval/56", "solution": "def str_to_morse_code(s):\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    words = s.split(' ')\n    morse_code = ''\n    for word in words:\n        for char in word:\n            morse_code += morse_code_dict[char] + ' '\n        morse_code = morse_code[:-1] + '/ '\n    return morse_code[:-2]", "base_status": "fail", "plus_status": null, "base_fail_tests": [["hello world"]], "plus_fail_tests": []}], "EvoEval/93": [{"task_id": "EvoEval/93", "solution": "def secret_code(message, n_values):\n    encoded_message = ''\n    n_len = len(n_values)\n    for i in range(len(message)):\n        if message[i].isalpha():\n            is_upper = message[i].isupper()\n            message_char = ord(message[i].lower())\n            n_index = i % n_len\n            shift = n_values[n_index]\n            new_char = chr((message_char - 97 + shift) % 26 + 97)\n            if is_upper:\n                encoded_message += new_char.upper()\n            else:\n                encoded_message += new_char\n        else:\n            encoded_message += message[i]\n    return encoded_message", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/49": [{"task_id": "EvoEval/49", "solution": "def morse_decoder(msg):\n    morse_code = {'01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3', '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8', '11110': '9', '11111': '0'}\n    words = msg.split('/')\n    decoded_msg = ''\n    for word in words:\n        letters = word.split(' ')\n        for letter in letters:\n            decoded_msg += morse_code.get(letter, '')\n        decoded_msg += ' '\n    return decoded_msg.strip()", "base_status": "fail", "plus_status": null, "base_fail_tests": [["010101/01 1010 0 110 0"]], "plus_fail_tests": []}], "EvoEval/9": [{"task_id": "EvoEval/9", "solution": "\ndef calculate_word_frequency(string: str) -> dict:\n    string = re.sub('[^\\\\w\\\\s]', '', string).lower()\n    words = string.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Hello, World! Hello Again."]], "plus_fail_tests": []}], "EvoEval/29": [{"task_id": "EvoEval/29", "solution": "def find_palindrome_substrings(s: str):\n\n    def is_palindrome(s: str):\n        return s == s[::-1]\n    n = len(s)\n    palindromes = set()\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if is_palindrome(s[i:j]):\n                palindromes.add(s[i:j])\n    return sorted(list(palindromes))", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/77": [{"task_id": "EvoEval/77", "solution": "def magical_sequence(sequence, k):\n    result = []\n    for num in sequence:\n        points = 0\n        while num >= k:\n            points += 1\n            num = num // k\n        result.append(points)\n    return result", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[8, 5, 3], 2]], "plus_fail_tests": []}], "EvoEval/7": [{"task_id": "EvoEval/7", "solution": "def find_shangri_la(code_sequence: list[int]) -> str:\n    (x, y) = (0, 0)\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[]]], "plus_fail_tests": []}], "EvoEval/73": [{"task_id": "EvoEval/73", "solution": "def treasure_hunt(grid, bag_capacity):\n    import math\n    rows = len(grid)\n    cols = len(grid[0])\n    total_chests = sum((sum(row) for row in grid))\n    if bag_capacity < total_chests:\n        return total_chests * 2\n    else:\n        return rows + cols", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2]], "plus_fail_tests": []}], "EvoEval/64": [{"task_id": "EvoEval/64", "solution": "def magical_sequence(start, end, divisor):\n    result = []\n    for i in range(start, end + 1):\n        if i % divisor == 0 and is_prime(i):\n            result.append(i)\n    return result", "base_status": "fail", "plus_status": null, "base_fail_tests": [[10, 20, 2]], "plus_fail_tests": []}], "EvoEval/60": [{"task_id": "EvoEval/60", "solution": "def happy_ants(path_length, sugar_locations, ant_positions):\n    sugar = [0] * path_length\n    for loc in sugar_locations:\n        sugar[loc] = 1\n    ant_count = len(ant_positions)\n    happy_ant_count = 0\n    for i in range(ant_count):\n        (pos, direction) = ant_positions[i]\n        if direction == 'left':\n            for j in range(pos, -1, -1):\n                if sugar[j] == 1:\n                    happy_ant_count += 1\n                    sugar[j] = 0\n                    break\n        else:\n            for j in range(pos, path_length):\n                if sugar[j] == 1:\n                    happy_ant_count += 1\n                    sugar[j] = 0\n                    break\n    return happy_ant_count", "base_status": "fail", "plus_status": null, "base_fail_tests": [[3, [2], [[0, "right"], [1, "right"], [2, "left"]]]], "plus_fail_tests": []}], "EvoEval/87": [{"task_id": "EvoEval/87", "solution": "def word_spiral(arr):\n\n    def spiral(arr):\n        res = []\n        while arr:\n            res += arr.pop(0)\n            arr = list(zip(*arr))[::-1]\n        return res\n    return ''.join(spiral(arr))", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[["t", "h", "i", "s", "f", "u", "n", "c", "t", "i", "o", "n", "t", "e", "s", "t"], ["a", "n", "i", "s", "r", "e", "a", "l", "l", "y", "g", "o", "o", "d", "o", "n"], ["t", "i", "m", "e", "t", "o", "s", "e", "e", "i", "f", "i", "t", "p", "a", "s", "s"], ["e", "s", "t", "r", "t", "h", "i", "s", "p", "r", "o", "g", "r", "a", "m", "m", "e"]]]], "plus_fail_tests": []}], "EvoEval/5": [{"task_id": "EvoEval/5", "solution": "from typing import List, Tuple\n\n\ndef zigzag_traversal(matrix: List[List[int]]) -> List[int]:\n    result = []\n    for (direction, row) in enumerate(matrix):\n        if direction % 2 == 0:\n            result.extend(row)\n        else:\n            result.extend(row[::-1])\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/17": [{"task_id": "EvoEval/17", "solution": "def wizard_battle(dragon_hp: int, wizards: list) -> str:\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/28": [{"task_id": "EvoEval/28", "solution": "def calculate_progressive_tax(income: float, deductions=0) -> float:\n    tax_brackets = [10000, 35000, 80000, float('inf')]\n    tax_rates = [0.0, 0.15, 0.25, 0.3]\n    deduction_brackets = [1000, 3000, float('inf')]\n    deduction_ratios = [1, 2, 3]\n    taxable_income = income - deductions\n    tax = 0.0\n    for i in range(len(tax_brackets)):\n        if taxable_income > tax_brackets[i]:\n            tax += tax_rates[i] * (taxable_income - tax_brackets[i - 1])\n            taxable_income -= tax_brackets[i]\n        else:\n            tax += tax_rates[i] * taxable_income\n            break\n    return tax", "base_status": "fail", "plus_status": null, "base_fail_tests": [[12000, 500]], "plus_fail_tests": []}], "EvoEval/69": [{"task_id": "EvoEval/69", "solution": "def magicTrick(cards, magicNumber):\n    card_dict = {}\n    for (i, num) in enumerate(cards):\n        if magicNumber / num in card_dict:\n            return (card_dict[magicNumber / num], i)\n        card_dict[num] = i\n    return 'No magic today'", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/51": [{"task_id": "EvoEval/51", "solution": "def alien_encoding(string, list_of_alphabets):\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    encoded_string = ''\n    for i in range(len(string)):\n        encoded_string += list_of_alphabets[i % len(list_of_alphabets)]\n    return encoded_string", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/36": [{"task_id": "EvoEval/36", "solution": "def calculate_integral_coefficients(xs: list):\n    integral_coefficients = [0.0]\n    for i in range(len(xs)):\n        integral_coefficients.append(xs[i] / (i + 1))\n    return integral_coefficients", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[3, 2, 1]]], "plus_fail_tests": []}], "EvoEval/79": [{"task_id": "EvoEval/79", "solution": "def find_fruitful_days(prices, days):\n    max_profit = 0\n    min_price = prices[0]\n    for i in range(1, days):\n        if prices[i] > min_price:\n            if prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n        else:\n            min_price = prices[i]\n    return max_profit", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/86": [{"task_id": "EvoEval/86", "solution": "def sort_movies_by_ratings_and_release_date(movies_dict):\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]", "base_status": "fail", "plus_status": null, "base_fail_tests": [[{"Inception": [8.8, "2010"]}]], "plus_fail_tests": []}], "EvoEval/72": [{"task_id": "EvoEval/72", "solution": "def string_fairy_tale(lst):\n    result = []\n    for (i, s) in enumerate(lst):\n        name = s.split('1234567890')[0]\n        digit_count = sum((c.isdigit() for c in s))\n        story = \"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{0}' who was known for telling {1} tales a day\".format(s, digit_count)\n        result.append(story)\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/48": [{"task_id": "EvoEval/48", "solution": "def wizard_inventory(inventory_logs):\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n        if inventory[item] <= 0:\n            del inventory[item]\n    return inventory", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/4": [{"task_id": "EvoEval/4", "solution": "from typing import List\n\n\ndef candles_relight(candles: List[int]) -> int:\n    if not candles:\n        return 0\n    lit_candles = 1\n    max_height = candles[0]\n    for height in candles[1:]:\n        if height > max_height:\n            lit_candles += 1\n            max_height = height\n    return lit_candles", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/66": [{"task_id": "EvoEval/66", "solution": "def prime_anagram_pairs(n):\n    prime_numbers = [i for i in range(2, n) if is_prime(i)]\n    anagram_pairs = []\n    for i in range(len(prime_numbers)):\n        for j in range(i + 1, len(prime_numbers)):\n            if sorted(str(prime_numbers[i])) == sorted(str(prime_numbers[j])):\n                anagram_pairs.append((min(prime_numbers[i], prime_numbers[j]), max(prime_numbers[i], prime_numbers[j])))\n    return sorted(anagram_pairs)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[13]], "plus_fail_tests": []}], "EvoEval/45": [{"task_id": "EvoEval/45", "solution": "def find_castle(arr):\n    n = len(arr)\n    left_max = [0] * n\n    right_max = [0] * n\n    left_max[0] = 1\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            left_max[i] = left_max[i - 1] + 1\n        else:\n            left_max[i] = left_max[i - 1]\n    right_max[n - 1] = 1\n    for i in range(n - 2, -1, -1):\n        if arr[i] < arr[i + 1]:\n            right_max[i] = right_max[i + 1] + 1\n        else:\n            right_max[i] = right_max[i + 1]\n    max_hills = 0\n    for i in range(n):\n        max_hills = max(max_hills, left_max[i] + right_max[i])\n    return max_hills", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[1, 2, 3, 2, 5, 3, 6, 4, 8, 2, 7]]], "plus_fail_tests": []}], "EvoEval/58": [{"task_id": "EvoEval/58", "solution": "def interstellar_translator(earth_phrase):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translation = ''\n    words = earth_phrase.split(' ')\n    for word in words:\n        first_letter = word[0]\n        new_word = ''\n        for letter in word:\n            if letter in vowels:\n                index = vowels.find(letter)\n                if index == len(vowels) - 1:\n                    new_word += vowels[0]\n                else:\n                    new_word += vowels[index + 1]\n            elif letter in consonants:\n                index = consonants.find(letter)\n                if index == len(consonants) - 1:\n                    new_word += consonants[0]\n                else:\n                    new_word += consonants[index + 1]\n            elif letter == ' ':\n                new_word += '@'\n            elif letter == 'z':\n                new_word += 'b'\n        if first_letter in vowels:\n            new_word += 'xy'\n        else:\n            new_word += 'yz'\n        translation += new_word.capitalize() + '@'\n    return translation[:-1]", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/53": [{"task_id": "EvoEval/53", "solution": "def magical_transformation(s):\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    VOWELS = vowels.upper()\n    CONSONANTS = consonants.upper()\n    transformed = ''\n    for (i, c) in enumerate(s):\n        if c in vowels:\n            transformed += vowels[(vowels.index(c) + 1) % len(vowels)]\n        elif c in consonants:\n            transformed += consonants[(consonants.index(c) + 1) % len(consonants)]\n        elif c == 'y':\n            transformed += 'z'\n        elif c == 'z':\n            transformed += 'b'\n        elif c == '?':\n            if i % 2 == 0:\n                transformed += '!'\n            else:\n                transformed += '?'\n        else:\n            transformed += c\n    return transformed", "base_status": "fail", "plus_status": null, "base_fail_tests": [["Hello World???"]], "plus_fail_tests": []}], "EvoEval/80": [{"task_id": "EvoEval/80", "solution": "def adventure_game(map, instructions):\n    for i in range(len(map)):\n        if 'S' in map[i]:\n            (start_row, start_column) = (i, map[i].index('S'))\n            break\n    path = [(start_row, start_column)]\n    movements = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n    for instruction in instructions:\n        new_row = start_row + movements[instruction][0]\n        new_column = start_column + movements[instruction][1]\n        if 0 <= new_row < len(map) and 0 <= new_column < len(map[0]) and (map[new_row][new_column] != 'X'):\n            (start_row, start_column) = (new_row, new_column)\n            path.append((start_row, start_column))\n        if map[start_row][start_column] == 'E':\n            return path\n    return path", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[[".", ".", "S"], [".", "X", "X"], ["E", "X", "."]], ["left", "left", "up"]]], "plus_fail_tests": []}], "EvoEval/0": [{"task_id": "EvoEval/0", "solution": "from typing import List, Union\n\ndef calculate_shipping_cost(items: List[Union[str, float]], location: str) -> float:\n    total_cost = 0.0\n    additional_charge = 0.0\n    weight_multiplier = 1.0\n    for item in items:\n        if isinstance(item, str):\n            weight_multiplier *= 1.5\n        else:\n            total_cost += 5.0\n            if item > 5.0:\n                additional_charge += 10.0\n    total_cost += additional_charge\n    if location == 'Local':\n        pass\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    else:\n        weight_multiplier *= 1.5\n    total_cost *= weight_multiplier\n    return round(total_cost, 2)", "base_status": "fail", "plus_status": null, "base_fail_tests": [["cipher", 2]], "plus_fail_tests": []}], "EvoEval/12": [{"task_id": "EvoEval/12", "solution": "from typing import List\n\ndef teleporter_energy_signature(flux_values: List[int]) -> int:\n    max_count = max(Counter(flux_values).values())\n    most_occurred = min([num for (num, freq) in Counter(flux_values).items() if freq == max_count])\n    total_sum = sum(flux_values)\n    return total_sum * most_occurred", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[1, 2, 3, 2, 1, 2, 5, 1, 6]]], "plus_fail_tests": []}], "EvoEval/54": [{"task_id": "EvoEval/54", "solution": "def find_star_map(lst, star):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/18": [{"task_id": "EvoEval/18", "solution": "def magical_seven(n: int):\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if num % 7 == 0:\n            digits_sum = sum((int(digit) for digit in str(num)))\n            if digits_sum == 7:\n                count += 1\n    return num", "base_status": "pass", "plus_status": null, "base_fail_tests": [], "plus_fail_tests": []}], "EvoEval/23": [{"task_id": "EvoEval/23", "solution": "def prime_cipher(s: str):\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        count = 0\n        num = 2\n        while True:\n            if is_prime(num):\n                count += 1\n                if count == n:\n                    return num\n            num += 1\n    primes = {chr(97 + i): nth_prime(i) for i in range(26)}\n    return ''.join((str(primes[ch]) if ch in primes else ch for ch in s))", "base_status": "fail", "plus_status": null, "base_fail_tests": [["hello"]], "plus_fail_tests": []}], "EvoEval/41": [{"task_id": "EvoEval/41", "solution": "def spider_web_jump(arr):\n    (rows, cols) = (len(arr), len(arr[0]))\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def is_valid(x, y):\n        return 0 <= x < rows and 0 <= y < cols\n\n    def dfs(x, y, energy):\n        if not is_valid(x, y) or arr[x][y] >= 100:\n            return float('inf')\n        if arr[x][y] == 0:\n            return energy\n        temp = arr[x][y]\n        arr[x][y] = 100\n        res = min([dfs(x + dx, y + dy, energy + temp) for (dx, dy) in directions if is_valid(x + dx, y + dy)])\n        arr[x][y] = temp\n        return res\n    return dfs(0, 0, 0)", "base_status": "fail", "plus_status": null, "base_fail_tests": [[[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 0]]]], "plus_fail_tests": []}]}}