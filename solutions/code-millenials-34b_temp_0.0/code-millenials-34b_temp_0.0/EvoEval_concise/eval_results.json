{"eval": {"HumanEval/68": [{"task_id": "HumanEval/68", "solution": "\ndef pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = 0\n    for (i, num) in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_index = i\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, smallest_index]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/124": [{"task_id": "HumanEval/124", "solution": "\ndef valid_date(date):\n    \"\"\"\n    This function checks if a given date string is valid or not. The function returns True for a valid date and False otherwise. \n    Validity is based on the following:\n    1. The string is not empty.\n    2. Day value ranges between 1 and 31 for months 1,3,5,7,8,10,12; 1 to 30 for months 4,6,9,11; and 1 to 29 for month 2.\n    3. Month value ranges between 1 and 12.\n    4. The date format should be in 'mm-dd-yyyy'.\n    \"\"\"\n    if not date:\n        return False\n    regex = '^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$'\n    match = re.search(regex, date)\n    if match:\n        day = int(match.group(2))\n        month = int(match.group(1))\n        year = int(match.group(3))\n        if month < 1 or month > 12:\n            return False\n        elif month in [4, 6, 9, 11] and day > 30:\n            return False\n        elif month == 2 and (day > 29 or (day == 29 and year % 4 != 0)):\n            return False\n        elif day > 31:\n            return False\n        else:\n            return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["03-11-2000"]], "plus_fail_tests": [["12-31-1999"]]}], "HumanEval/105": [{"task_id": "HumanEval/105", "solution": "\ndef by_length(arr):\n    arr = [i for i in arr if 1 <= i <= 9]\n    arr.sort(reverse=True)\n    arr = [['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'][i - 1] for i in arr]\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/72": [{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q, w):\n    if q != q[::-1]:\n        return False\n    if sum(q) <= w:\n        return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/119": [{"task_id": "HumanEval/119", "solution": "\ndef match_parens(lst):\n    s = ''.join(lst)\n    count = 0\n    for char in s:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count < 0:\n                return 'No'\n    return 'Yes' if count == 0 else 'No'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[")())", "(()()("]]], "plus_fail_tests": [[[")()()()(()()))", "(("]]]}], "HumanEval/71": [{"task_id": "HumanEval/71", "solution": "\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/47": [{"task_id": "HumanEval/47", "solution": "\n\ndef median(l: list):\n    \"\"\"\n    Calculate and return the median of list 'l'.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length // 2 - 1] + l[length // 2]) / 2\n    else:\n        return l[length // 2]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/104": [{"task_id": "HumanEval/104", "solution": "\ndef unique_digits(x):\n    \"\"\"Returns a sorted list of integers from the input list x that do not contain any even digits.\n\n    The list is sorted in ascending order.\n    \n    Example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if all((int(digit) % 2 != 0 for digit in str(num))):\n            result.append(num)\n    return sorted(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/4": [{"task_id": "HumanEval/4", "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" Calculate the Mean Absolute Deviation (MAD) of the list.\n    MAD is the average absolute deviation from the mean:\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    abs_diffs = [abs(x - mean) for x in numbers]\n    mad = sum(abs_diffs) / len(abs_diffs)\n    return mad", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/75": [{"task_id": "HumanEval/75", "solution": "\ndef is_multiply_prime(a):\n    prime_factors = []\n    for i in range(2, a + 1):\n        while a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n            a //= i\n            if a == 1:\n                break\n    return len(prime_factors) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[33]]}], "HumanEval/101": [{"task_id": "HumanEval/101", "solution": "\ndef words_string(s):\n    s = s.replace(',', ' ')\n    words = s.split()\n    return words", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/87": [{"task_id": "HumanEval/87", "solution": "\ndef get_row(lst, x):\n    result = []\n    for (i, sublist) in enumerate(lst):\n        for j in range(len(sublist) - 1, -1, -1):\n            if sublist[j] == x:\n                result.append((i, j))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/107": [{"task_id": "HumanEval/107", "solution": "\ndef even_odd_palindrome(n):\n\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/82": [{"task_id": "HumanEval/82", "solution": "\ndef prime_length(string):\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/93": [{"task_id": "HumanEval/93", "solution": "\ndef encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                encoded_message += chr(ord('a') + (ord(char) - ord('a') + 2) % 26)\n            else:\n                encoded_message += chr(ord('A') + (ord(char) - ord('A') + 2) % 26)\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["TEST"]], "plus_fail_tests": [["abcdefghijklmnopqrstuvwxyz"]]}], "HumanEval/66": [{"task_id": "HumanEval/66", "solution": "\ndef digitSum(s):\n    return sum((ord(ch) for ch in s if ch.isupper()))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/156": [{"task_id": "HumanEval/156", "solution": "\ndef int_to_mini_roman(number):\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/102": [{"task_id": "HumanEval/102", "solution": "\ndef choose_num(x, y):\n    if y % 2 == 0:\n        return y\n    elif x % 2 == 0:\n        return x\n    else:\n        return -1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12, 15]], "plus_fail_tests": [[3, 5]]}], "HumanEval/125": [{"task_id": "HumanEval/125", "solution": "\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((1 for c in txt if ord(c) % 2 == 1))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aaabb"]], "plus_fail_tests": [["Hello?"]]}], "HumanEval/103": [{"task_id": "HumanEval/103", "solution": "\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/86": [{"task_id": "HumanEval/86", "solution": "\ndef anti_shuffle(s):\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/44": [{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    \"\"\"Converts integer x to a different numerical base.\n    Returns the conversion as a string.\n    The base is less than 10.\n\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0:\n        return '-' + change_base(-x, base)\n    elif x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/14": [{"task_id": "HumanEval/14", "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Generates a list of prefixes for the input string in ascending length order.\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/120": [{"task_id": "HumanEval/120", "solution": "\ndef maximum(arr, k):\n    pq = arr[:k]\n    pq.sort()\n    for num in arr[k:]:\n        if num > pq[0]:\n            pq.remove(min(pq))\n            pq.append(num)\n            pq.sort()\n    return pq", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, -23, 243, -400, 0], 0]], "plus_fail_tests": [[[1], 0]]}], "HumanEval/97": [{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/88": [{"task_id": "HumanEval/88", "solution": "\ndef sort_array(array):\n    if len(array) < 2:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/23": [{"task_id": "HumanEval/23", "solution": "\n\ndef strlen(string: str) -> int:\n    return len(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/84": [{"task_id": "HumanEval/84", "solution": "\ndef solve(N):\n    binary_representation = bin(N)[2:]\n    sum_of_digits = sum((int(digit) for digit in binary_representation))\n    return bin(sum_of_digits)[2:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1000]], "plus_fail_tests": [[10]]}], "HumanEval/35": [{"task_id": "HumanEval/35", "solution": "\n\ndef max_element(l: list):\n    return max(l)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/13": [{"task_id": "HumanEval/13", "solution": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        (a, b) = (b, a % b)\n    return abs(a)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/157": [{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    longest = max(a, b, c)\n    sum_squares = a ** 2 + b ** 2 + c ** 2 - longest ** 2\n    return longest ** 2 == sum_squares", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/31": [{"task_id": "HumanEval/31", "solution": "\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/43": [{"task_id": "HumanEval/43", "solution": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    Takes a list of integers (l) as input. Returns True if a pair of distinct elements sum to zero; otherwise, returns False.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/95": [{"task_id": "HumanEval/95", "solution": "\ndef check_dict_case(dict):\n    if not dict:\n        return True\n    all_upper = all((k.isupper() for k in dict.keys()))\n    all_lower = all((k.islower() for k in dict.keys()))\n    return all_upper or all_lower", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{}]], "plus_fail_tests": [[{}]]}], "HumanEval/110": [{"task_id": "HumanEval/110", "solution": "\ndef exchange(lst1, lst2):\n    even_count = 0\n    odd_count = 0\n    for num1 in lst1:\n        if num1 % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    for num2 in lst2:\n        if num2 % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if odd_count > even_count:\n        return 'NO'\n    else:\n        return 'YES'", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 4, 6], [1, 3, 5, 7]]]}], "HumanEval/98": [{"task_id": "HumanEval/98", "solution": "\ndef count_upper(s):\n    \"\"\"\n    Returns the count of uppercase vowels at even indices in string s.\n    \n    Example:\n    count_upper('aBCdEf') -> 1\n    count_upper('abcdefg') -> 0\n    count_upper('dBBE') -> 0\n    \"\"\"\n    upper_vowels = 'AEIOU'\n    return sum((1 for i in range(len(s)) if i % 2 == 0 and s[i] in upper_vowels))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/73": [{"task_id": "HumanEval/73", "solution": "\ndef smallest_change(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    for gap in range(n):\n        for j in range(gap, n):\n            i = j - gap\n            if gap == 0:\n                dp[i][j] = 0\n            elif gap == 1:\n                dp[i][j] = 0 if arr[i] == arr[j] else 1\n            elif arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i][j - 1], dp[i + 1][j]) + 1\n    return dp[0][n - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 5, 4, 7, 9, 6]]], "plus_fail_tests": [[[1, 2, 3, 4, 5]]]}], "HumanEval/81": [{"task_id": "HumanEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/108": [{"task_id": "HumanEval/108", "solution": "\ndef count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum((int(d) for d in str(abs(num)))) > 0:\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -2, 0]]], "plus_fail_tests": [[[-1, 0, 1]]]}], "HumanEval/147": [{"task_id": "HumanEval/147", "solution": "\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(n)]\n    count = 0\n    mod_count = [0] * 3\n    for num in a:\n        mod_count[num % 3] += 1\n    count += mod_count[0] * (mod_count[0] - 1) * (mod_count[0] - 2) // 6\n    count += mod_count[1] * mod_count[2]\n    count += mod_count[0] * (mod_count[1] - 1) // 2 * mod_count[2]\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[1]]}], "HumanEval/146": [{"task_id": "HumanEval/146", "solution": "\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))\n            if len(str_num) > 1 and str_num[0] in '13579' and (str_num[-1] in '13579'):\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/144": [{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    (x_num, x_den) = map(int, x.split('/'))\n    (n_num, n_den) = map(int, n.split('/'))\n    new_num = x_num * n_num\n    new_den = x_den * n_den\n    return new_num % new_den == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/20": [{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" Returns the pair of numbers from the input list that are nearest to each other, sorted in ascending order.\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/26": [{"task_id": "HumanEval/26", "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Removes duplicate integers from a given list preserving the original order.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 4, 3, 5]]], "plus_fail_tests": [[[1, 1, 2, 2, 3, 3, 4, 4]]]}], "HumanEval/6": [{"task_id": "HumanEval/6", "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n\n    def max_depth(parens):\n        max_count = 0\n        count = 0\n        for char in parens:\n            if char == '(':\n                count += 1\n                max_count = max(max_count, count)\n            elif char == ')':\n                count -= 1\n        return max_count\n    return [max_depth(parens) for parens in paren_string.split()]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/51": [{"task_id": "HumanEval/51", "solution": "\n\ndef remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/45": [{"task_id": "HumanEval/45", "solution": "\n\ndef triangle_area(a, h):\n    \"\"\"Returns the area of a triangle with given side length 'a' and height 'h'.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/60": [{"task_id": "HumanEval/60", "solution": "\n\ndef sum_to_n(n: int):\n    return sum(range(1, n + 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/36": [{"task_id": "HumanEval/36", "solution": "\n\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/55": [{"task_id": "HumanEval/55", "solution": "\n\ndef fib(n: int):\n    if n <= 0:\n        return 'Input should be a positive integer.'\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        (a, b) = (0, 1)\n        for _ in range(2, n):\n            (a, b) = (b, a + b)\n        return b", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[0]]}], "HumanEval/89": [{"task_id": "HumanEval/89", "solution": "\ndef encrypt(s):\n    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            shift = 4\n            if char.isupper():\n                encrypted_char = chr((ord(char) - 65 + shift) % 26 + 65)\n            else:\n                encrypted_char = chr((ord(char) - 97 + shift) % 26 + 97)\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/114": [{"task_id": "HumanEval/114", "solution": "import math\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Return the minimum sum of any non-empty sub-array from an array of integers.\n    \n    Example:\n    minSubArraySum([2, 3, 4, 1, 2, 4]) returns 1\n    minSubArraySum([-1, -2, -3]) returns -6\n    \"\"\"\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/77": [{"task_id": "HumanEval/77", "solution": "\ndef iscube(a):\n    \"\"\"\n    Determines if an integer is a perfect cube.\n    \n    Accepts an integer and returns True if it's a perfect cube, else False.\n    Input will always be valid.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    return a == 0 or round(a ** (1.0 / 3)) ** 3 == a", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[-1]], "plus_fail_tests": [[-8]]}], "HumanEval/46": [{"task_id": "HumanEval/46", "solution": "\n\ndef fib4(n: int):\n    if n in {0, 1, 3}:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib = [0, 0, 2, 0] + [0] * (n - 3)\n        for i in range(4, n + 1):\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4]\n        return fib[n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/92": [{"task_id": "HumanEval/92", "solution": "\ndef any_int(x, y, z):\n    if all((isinstance(i, int) for i in [x, y, z])):\n        return any([x + y == z, x + z == y, y + z == x])\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/141": [{"task_id": "HumanEval/141", "solution": "\ndef file_name_check(file_name):\n    if len(re.findall('\\\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not re.match('[a-zA-Z]', file_name.split('.')[0]):\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["example.txt"]], "plus_fail_tests": [["example.py"]]}], "HumanEval/7": [{"task_id": "HumanEval/7", "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Returns list of input strings containing the specified substring.\n\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/16": [{"task_id": "HumanEval/16", "solution": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Returns the count of unique case-insensitive characters in a given string.\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    string_lower = string.lower()\n    return len(set(string_lower))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/67": [{"task_id": "HumanEval/67", "solution": "\ndef fruit_distribution(s, n):\n    apples = int(s.split(' apples')[0])\n    oranges = int(s.split(' oranges')[0].split(' and ')[1])\n    mangoes = n - (apples + oranges)\n    return mangoes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/54": [{"task_id": "HumanEval/54", "solution": "\n\ndef same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/129": [{"task_id": "HumanEval/129", "solution": "\ndef minPath(grid, k):\n    n = len(grid)\n    visited = set()\n    ans = [float('inf')] * k\n    path = []\n\n    def dfs(x, y, k, path):\n        if k == 0:\n            ans.append(min(path))\n            return\n        for (dx, dy) in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < n and 0 <= ny < n and (grid[nx][ny] not in visited):\n                visited.add(grid[nx][ny])\n                path.append(grid[nx][ny])\n                dfs(nx, ny, k - 1, path)\n                path.pop()\n                visited.remove(grid[nx][ny])\n    for i in range(n):\n        for j in range(n):\n            visited.add(grid[i][j])\n            path.append(grid[i][j])\n            dfs(i, j, k - 1, path)\n            path.pop()\n            visited.remove(grid[i][j])\n    return ans[1:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1]]}], "HumanEval/29": [{"task_id": "HumanEval/29", "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Return strings from input list that start with specified prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/145": [{"task_id": "HumanEval/145", "solution": "\ndef order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum((int(digit) for digit in str(abs(x)))), nums.index(x)))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 11, -1, -11, -12]]], "plus_fail_tests": [[[-5, -12, 9, 15]]]}], "HumanEval/59": [{"task_id": "HumanEval/59", "solution": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Finds n's largest non-prime factor. Assumes n > 1 and n is non-prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n    while factor * factor <= n:\n        if n % factor:\n            factor += 1\n        else:\n            n //= factor\n    return n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/153": [{"task_id": "HumanEval/153", "solution": "\ndef Strongest_Extension(class_name, extensions):\n    strongest_extension = extensions[0]\n    strongest_strength = sum([1 for c in extensions[0] if c.isupper()]) - sum([1 for c in extensions[0] if c.islower()])\n    for extension in extensions[1:]:\n        strength = sum([1 for c in extension if c.isupper()]) - sum([1 for c in extension if c.islower()])\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return f'{class_name}.{strongest_extension}'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/78": [{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    prime_hexes = set('2357BD')\n    count = 0\n    for char in num:\n        if char in prime_hexes:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/122": [{"task_id": "HumanEval/122", "solution": "\ndef add_elements(arr, k):\n    sum = 0\n    count = 0\n    for i in range(k):\n        if arr[i] < 100:\n            sum += arr[i]\n            count += 1\n    return sum", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-100, -89, -77, -55, 900, -44, -22, -11], 7]]}], "HumanEval/69": [{"task_id": "HumanEval/69", "solution": "\ndef search(lst):\n    \"\"\"\n    Given a non-empty list of positive integers, return the highest integer that exceeds zero, whose frequency in the list is at least equal to its value. If no such integer exists, return -1.\n    The frequency of an integer is its count in the list.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    from collections import Counter\n    counter = Counter(lst)\n    for i in sorted(counter.keys(), reverse=True):\n        if i > 0 and i <= counter[i]:\n            return i\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/11": [{"task_id": "HumanEval/11", "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Perform binary XOR on two binary strings a and b, and return result as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    result = ''\n    if len(a) < len(b):\n        a = a.zfill(len(b))\n    elif len(b) < len(a):\n        b = b.zfill(len(a))\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/2": [{"task_id": "HumanEval/2", "solution": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"\n    Decomposes a positive float into its integer and decimal parts,\n    then returns the decimal part.\n    \n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/100": [{"task_id": "HumanEval/100", "solution": "\ndef make_a_pile(n):\n    pile = []\n    for i in range(n):\n        if n % 2 == 0:\n            pile.append(n + 2 * i)\n        else:\n            pile.append(n + 2 * i)\n    return pile", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/138": [{"task_id": "HumanEval/138", "solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Check if the input number n can be expressed as the sum of exactly 4 positive even numbers.\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 10:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[8]], "plus_fail_tests": [[8]]}], "HumanEval/5": [{"task_id": "HumanEval/5", "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in numbers:\n        result += [i, delimeter]\n    return result[:-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/161": [{"task_id": "HumanEval/161", "solution": "\ndef solve(s):\n    has_alpha = any((c.isalpha() for c in s))\n    if has_alpha:\n        return ''.join((c.upper() if c.islower() else c.lower() for c in s))\n    else:\n        return s[::-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/61": [{"task_id": "HumanEval/61", "solution": "\n\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/127": [{"task_id": "HumanEval/127", "solution": "\ndef intersection(interval1, interval2):\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n    if intersection_start > intersection_end:\n        return 'NO'\n    intersection_length = intersection_end - intersection_start + 1\n    if intersection_length < 2:\n        return 'NO'\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return 'NO'\n    return 'YES'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 1], [0, 4]]], "plus_fail_tests": [[[10, 20], [15, 25]]]}], "HumanEval/160": [{"task_id": "HumanEval/160", "solution": "\ndef do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += ' ' + operator[i] + ' ' + str(operand[i + 1])\n    return eval(expression)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/30": [{"task_id": "HumanEval/30", "solution": "\n\ndef get_positive(l: list):\n    \"\"\"Returns positive integers from input list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i in l if i > 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/27": [{"task_id": "HumanEval/27", "solution": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" Switches the case of each character in the given string.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/151": [{"task_id": "HumanEval/151", "solution": "\ndef double_the_difference(lst):\n    sum = 0\n    for i in lst:\n        if i > 0 and i % 2 != 0:\n            sum += i * i\n    return sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0.1, 0.2, 0.3]]], "plus_fail_tests": [[[1.0, 3.5, -4.6]]]}], "HumanEval/85": [{"task_id": "HumanEval/85", "solution": "\ndef add(lst):\n    \"\"\"Sum the even numbers at odd indices in a non-empty list of integers, lst.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    total_sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total_sum += lst[i]\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/134": [{"task_id": "HumanEval/134", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt.split()[-1][-1]\n    return last_char.isalpha()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["apple"]], "plus_fail_tests": [["pUMPKIN PIE"]]}], "HumanEval/142": [{"task_id": "HumanEval/142", "solution": "\n\n\ndef sum_squares(lst):\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/113": [{"task_id": "HumanEval/113", "solution": "\ndef odd_count(lst):\n    result = []\n    for (i, s) in enumerate(lst):\n        count = sum((1 for c in s if int(c) % 2 != 0))\n        result.append('the number of odd elements {}n the str{}ng {} of the {}nput.'.format(count, count, count, count))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/28": [{"task_id": "HumanEval/28", "solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Join list of strings into one string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/38": [{"task_id": "HumanEval/38", "solution": "\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n    \ndef decode_cyclic(s: str):\n    \"\"\"\n    Decodes an input string encoded with encode_cyclic function.\n    \"\"\"\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/12": [{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/96": [{"task_id": "HumanEval/96", "solution": "\ndef count_up_to(n):\n    primes = []\n    for possiblePrime in range(2, n):\n        isPrime = True\n        for num in range(2, possiblePrime):\n            if possiblePrime % num == 0:\n                isPrime = False\n        if isPrime:\n            primes.append(possiblePrime)\n    return primes", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[10000]]}], "HumanEval/42": [{"task_id": "HumanEval/42", "solution": "\n\ndef incr_list(l: list):\n    return [x + 1 for x in l]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/18": [{"task_id": "HumanEval/18", "solution": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/111": [{"task_id": "HumanEval/111", "solution": "\ndef histogram(test):\n    frequency = {}\n    for letter in test:\n        if letter != ' ':\n            if letter in frequency:\n                frequency[letter] += 1\n            else:\n                frequency[letter] = 1\n    max_freq = max(frequency.values()) if frequency else 0\n    return {key: value for (key, value) in frequency.items() if value == max_freq}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/53": [{"task_id": "HumanEval/53", "solution": "\n\ndef add(x: int, y: int):\n    \"\"\"Calculate the sum of x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/139": [{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    if n < 0:\n        raise ValueError('n should be a positive integer')\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": [[2]]}], "HumanEval/106": [{"task_id": "HumanEval/106", "solution": "\ndef f(n):\n\n    def factorial(x):\n        if x == 1 or x == 0:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    def sum_to_i(x):\n        return x * (x + 1) // 2\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_i(i))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/32": [{"task_id": "HumanEval/32", "solution": "\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" Takes a list xs of even number of coefficients for a polynomial, where the largest coefficient is non zero. Returns a zero value of the polynomial.\n    Note: Only returns one zero point even when multiple exist.\n\n    >>> round(find_zero([1, 2]), 2)\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2)\n    1.0\n    \"\"\"\n    x = 0\n    while abs(poly(xs, x)) > 1e-06:\n        deriv = [i * coeff for (i, coeff) in enumerate(xs)][1:]\n        deriv_x = poly(deriv, x)\n        x = x - poly(xs, x) / deriv_x\n    return x", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-10, -2]]], "plus_fail_tests": [[[5, 10, -3, 1]]]}], "HumanEval/143": [{"task_id": "HumanEval/143", "solution": "\ndef words_in_sentence(sentence):\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/91": [{"task_id": "HumanEval/91", "solution": "\ndef is_bored(S):\n    sentences = S.replace('!', '.').replace('?', '.').split('.')\n    count = sum((1 for sentence in sentences if sentence.strip().startswith('I')))\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Is the sky blue?"]], "plus_fail_tests": [["In the morning, I like to have a cup of coffee to start my day off right. How about you?"]]}], "HumanEval/24": [{"task_id": "HumanEval/24", "solution": "\n\ndef largest_divisor(n: int) -> int:\n    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/121": [{"task_id": "HumanEval/121", "solution": "\ndef solution(lst):\n    return sum((value for (index, value) in enumerate(lst) if index % 2 == 0 and value % 2 == 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/9": [{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/49": [{"task_id": "HumanEval/49", "solution": "\n\ndef modp(n: int, p: int):\n    \"\"\"\n    Computes 2^n modulo p.\n    \n    Examples:\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/22": [{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Returns a list of integers from the provided list.\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if type(value) == int]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/136": [{"task_id": "HumanEval/136", "solution": "\ndef largest_smallest_integers(lst):\n    negative_nums = [i for i in lst if i < 0]\n    positive_nums = [i for i in lst if i > 0]\n    if not negative_nums and (not positive_nums):\n        return (None, None)\n    elif not negative_nums:\n        return (None, min(positive_nums))\n    elif not positive_nums:\n        return (max(negative_nums), None)\n    else:\n        return (max(negative_nums), min(positive_nums))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/21": [{"task_id": "HumanEval/21", "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/0": [{"task_id": "HumanEval/0", "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Determines if any two elements in the provided list of numbers are closer than the specified threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/80": [{"task_id": "HumanEval/80", "solution": "\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i + 3])) != 3:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/40": [{"task_id": "HumanEval/40", "solution": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    Check if there are three distinct elements in the given list of integers that sum to zero. If yes, return True, otherwise return False.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum < 0:\n                left += 1\n            elif current_sum > 0:\n                right -= 1\n            else:\n                return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/140": [{"task_id": "HumanEval/140", "solution": "\ndef fix_spaces(text):\n    text = re.sub(' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Example"]], "plus_fail_tests": [["Hello,   world!"]]}], "HumanEval/58": [{"task_id": "HumanEval/58", "solution": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Returns sorted list of unique elements common to both input lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/41": [{"task_id": "HumanEval/41", "solution": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    On an infinitely long straight road, n cars are driving from left to right, while another n cars are driving from right to left at the same speed. A collision occurs when a car moving in one direction hits a car moving in the opposite direction. Despite collisions, all cars keep moving in their original direction. The function returns the total number of such collisions.\n    \"\"\"\n    return n * n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/109": [{"task_id": "HumanEval/109", "solution": "\ndef move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        if arr[i] > arr[(i + 1) % len(arr)]:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 4, 5, 1, 2]]], "plus_fail_tests": [[[5, 6, 7, 8, 1, 2, 3, 4]]]}], "HumanEval/123": [{"task_id": "HumanEval/123", "solution": "\ndef get_odd_collatz(n):\n    collatz_sequence = []\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_collatz = list(set(collatz_sequence))\n    odd_collatz = [i for i in odd_collatz if i % 2 != 0]\n    odd_collatz.sort()\n    return odd_collatz", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[3]]}], "HumanEval/33": [{"task_id": "HumanEval/33", "solution": "\n\ndef sort_third(l: list):\n    sorted_indices = sorted(range(len(l)), key=lambda i: l[i] if i % 3 == 0 else -1)\n    return [l[i] for i in sorted_indices]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3]]], "plus_fail_tests": [[[9, 12, 15, 6, 3, 8, 10, 23, 7]]]}], "HumanEval/52": [{"task_id": "HumanEval/52", "solution": "\n\ndef below_threshold(l: list, t: int) -> bool:\n    for i in l:\n        if i >= t:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/3": [{"task_id": "HumanEval/3", "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/137": [{"task_id": "HumanEval/137", "solution": "\ndef compare_one(a, b):\n    a = float(str(a).replace(',', '.'))\n    b = float(str(b).replace(',', '.'))\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 2]], "plus_fail_tests": [["5,000", 5000]]}], "HumanEval/115": [{"task_id": "HumanEval/115", "solution": "\ndef max_fill(grid, capacity):\n    import math\n    total_wells = sum((sum(row) for row in grid))\n    return math.ceil(total_wells / capacity)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 1, 1, 1], [1, 1, 1, 1]], 9]], "plus_fail_tests": [[[[1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 1, 1]], 2]]}], "HumanEval/112": [{"task_id": "HumanEval/112", "solution": "\ndef reverse_delete(s, c):\n    for char in c:\n        s = s.replace(char, '')\n    is_palindrome = s == s[::-1]\n    return (s, is_palindrome)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/1": [{"task_id": "HumanEval/1", "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    count = 0\n    start = 0\n    for (index, char) in enumerate(paren_string):\n        if char == '(':\n            if count == 0:\n                start = index\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count == 0:\n                result.append(paren_string[start:index + 1])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/62": [{"task_id": "HumanEval/62", "solution": "\n\ndef derivative(xs: list):\n    \"\"\" \n    Returns the derivative of a polynomial represented by list 'xs', where each element corresponds to a coefficient. \n    The list index represents the power of x (i.e., xs[i]*x^i).\n    \n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    derivative_list = []\n    for i in range(1, len(xs)):\n        derivative_list.append(i * xs[i])\n    return derivative_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/131": [{"task_id": "HumanEval/131", "solution": "\ndef digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2468]], "plus_fail_tests": [[246]]}], "HumanEval/65": [{"task_id": "HumanEval/65", "solution": "\ndef circular_shift(x, shift):\n    \"\"\"Performs a circular right shift on the digits of x as per shift value and returns the result in string format.\n    Returns reversed digits if shift exceeds number of digits.\n\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    str_x = str(x)\n    if shift > len(str_x):\n        return str_x[::-1]\n    else:\n        return str_x[-shift:] + str_x[:-shift]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/57": [{"task_id": "HumanEval/57", "solution": "\n\ndef monotonic(l: list):\n    if len(l) < 2:\n        return True\n    increasing = None\n    for i in range(len(l) - 1):\n        diff = l[i + 1] - l[i]\n        if diff == 0:\n            continue\n        if increasing is None:\n            increasing = diff > 0\n        elif (diff > 0) != increasing:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/148": [{"task_id": "HumanEval/148", "solution": "\ndef bf(planet1, planet2):\n    planets_order = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n    planet1_index = planets_order.index(planet1)\n    planet2_index = planets_order.index(planet2)\n    if planet1_index < planet2_index:\n        return tuple(planets_order[planet1_index + 1:planet2_index])\n    else:\n        return tuple(planets_order[planet2_index + 1:planet1_index])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/116": [{"task_id": "HumanEval/116", "solution": "\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/118": [{"task_id": "HumanEval/118", "solution": "\ndef get_closest_vowel(word):\n    vowels = 'AEIOUaeiou'\n    candidate_vowels = []\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            candidate_vowels.append(word[i])\n    if not candidate_vowels:\n        return ''\n    else:\n        return candidate_vowels[-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/162": [{"task_id": "HumanEval/162", "solution": "\ndef string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        hash_object = hashlib.md5(text.encode())\n        return hash_object.hexdigest()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hello world"]], "plus_fail_tests": [["5873hajsdklh"]]}], "HumanEval/34": [{"task_id": "HumanEval/34", "solution": "\n\ndef unique(l: list):\n    \"\"\"Sorts and removes duplicates from a list\"\"\"\n    return sorted(set(l))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/79": [{"task_id": "HumanEval/79", "solution": "\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/128": [{"task_id": "HumanEval/128", "solution": "\ndef prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    else:\n        result = 0\n        for num in arr:\n            if num > 0:\n                result += num * 1\n            elif num < 0:\n                result += abs(num) * -1\n            else:\n                result += abs(num) * 0\n        return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 2, -4]]], "plus_fail_tests": [[[-1, -2, -2, -4]]]}], "HumanEval/50": [{"task_id": "HumanEval/50", "solution": "\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    Decodes a string encoded with encode_shift function.\n    \"\"\"\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/64": [{"task_id": "HumanEval/64", "solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    count = 0\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            count += 1\n            if s[i].lower() == 'y' and i != len(s) - 1:\n                count -= 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["key"]], "plus_fail_tests": [["candy"]]}], "HumanEval/83": [{"task_id": "HumanEval/83", "solution": "\ndef starts_one_ends(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    else:\n        return 2 * 10 ** (n - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1]], "plus_fail_tests": [[6]]}], "HumanEval/158": [{"task_id": "HumanEval/158", "solution": "\ndef find_max(words):\n    max_unique_chars = 0\n    max_word = ''\n    for word in words:\n        if len(set(word)) > max_unique_chars:\n            max_unique_chars = len(set(word))\n            max_word = word\n        elif len(set(word)) == max_unique_chars:\n            max_word = min(word, max_word)\n    return max_word", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/19": [{"task_id": "HumanEval/19", "solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input: A string of space-separated numerals from 'zero' to 'nine'.\n    Output: Returns the input string sorted in ascending order.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=num_map.get)\n    sorted_numbers = ' '.join(num_list)\n    return sorted_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/17": [{"task_id": "HumanEval/17", "solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    music_list = music_string.split()\n    duration_list = []\n    for note in music_list:\n        if note == 'o':\n            duration_list.append(4)\n        elif note == 'o|':\n            duration_list.append(2)\n        elif note == '.|':\n            duration_list.append(1)\n    return duration_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/155": [{"task_id": "HumanEval/155", "solution": "\ndef even_odd_count(num):\n    even = 0\n    odd = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/163": [{"task_id": "HumanEval/163", "solution": "\ndef generate_integers(a, b):\n    if a > b:\n        (a, b) = (b, a)\n    even_numbers = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 10]], "plus_fail_tests": [[6, 12]]}], "HumanEval/74": [{"task_id": "HumanEval/74", "solution": "\ndef total_match(lst1, lst2):\n    total_chars1 = sum((len(s) for s in lst1))\n    total_chars2 = sum((len(s) for s in lst2))\n    if total_chars1 <= total_chars2:\n        return lst1\n    else:\n        return lst2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/133": [{"task_id": "HumanEval/133", "solution": "\n\ndef sum_squares(lst):\n    return sum((int(i + 0.5) ** 2 for i in lst))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1.4, 4.2, 0]]], "plus_fail_tests": [[[-3, 4, 5, 6, 7]]]}], "HumanEval/149": [{"task_id": "HumanEval/149", "solution": "\ndef sorted_list_sum(lst):\n    lst = [s for s in lst if len(s) % 2 == 0]\n    lst.sort(key=lambda s: (len(s), s))\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/154": [{"task_id": "HumanEval/154", "solution": "\ndef cycpattern_check(a, b):\n    \"\"\"Check if any rotation of the second word is a substring of the first word. Return True if so, else return False.\"\"\"\n    for i in range(len(b)):\n        if b in a * 2:\n            return True\n        else:\n            b = b[-1] + b[:-1]\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["xyzw", "xyw"]], "plus_fail_tests": [["banana", "nab"]]}], "HumanEval/135": [{"task_id": "HumanEval/135", "solution": "\ndef can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 8, 5, 7, 3]]], "plus_fail_tests": [[[5, 4, 3, 2, 1]]]}], "HumanEval/8": [{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Returns a tuple with the sum and product of a list of integers. For an empty list, sum is 0 and product is 1. \n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        total_sum = sum(numbers)\n        total_product = 1\n        for num in numbers:\n            total_product *= num\n        return (total_sum, total_product)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/152": [{"task_id": "HumanEval/152", "solution": "\ndef compare(game, guess):\n    return [abs(a - b) for (a, b) in zip(game, guess)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/39": [{"task_id": "HumanEval/39", "solution": "\n\ndef prime_fib(n):\n    i = 1\n    while True:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            if n == 1:\n                return fib_num\n            n -= 1\n        i += 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1]], "plus_fail_tests": [[11]]}], "HumanEval/48": [{"task_id": "HumanEval/48", "solution": "\n\ndef is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/130": [{"task_id": "HumanEval/130", "solution": "\ndef tri(n):\n    if n == 0:\n        return [3]\n    elif n % 2 == 0:\n        return [1 + i / 2 for i in range(1, n + 2)]\n    else:\n        sequence = [1, 3]\n        for i in range(2, n + 1):\n            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n        return sequence", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[2]]}], "HumanEval/99": [{"task_id": "HumanEval/99", "solution": "\ndef closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/132": [{"task_id": "HumanEval/132", "solution": "\ndef is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["[][]"]], "plus_fail_tests": [["[[]]]"]]}], "HumanEval/10": [{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Creates the shortest possible palindrome starting with the given string.\n    \n    The algorithm identifies the longest suffix palindrome in the substring and reverses any preceding text to append at the end of the string.\n    \n    Examples: \n    make_palindrome(''): returns ''\n    make_palindrome('cat'): returns 'catac'\n    make_palindrome('cata'): returns 'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["xyz"]], "plus_fail_tests": [["race"]]}], "HumanEval/37": [{"task_id": "HumanEval/37", "solution": "\n\ndef sort_even(l: list):\n    even_list = [l[i] for i in range(0, len(l), 2)]\n    even_list.sort()\n    new_l = l.copy()\n    for i in range(0, len(l), 2):\n        new_l[i] = even_list.pop(0)\n    return new_l", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/159": [{"task_id": "HumanEval/159", "solution": "\ndef eat(number, need, remaining):\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/56": [{"task_id": "HumanEval/56", "solution": "\n\ndef correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        else:\n            if len(stack) == 0 or stack[-1] != '<':\n                return False\n            stack.pop()\n    return len(stack) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/126": [{"task_id": "HumanEval/126", "solution": "\ndef is_sorted(lst):\n    if len(lst) == 1:\n        return True\n    elif len(lst) == 2:\n        return lst[0] < lst[1]\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                return False\n        return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 2, 2, 3, 4]]], "plus_fail_tests": [[[1, 2, 2, 2, 2, 3, 4]]]}], "HumanEval/70": [{"task_id": "HumanEval/70", "solution": "\ndef strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/117": [{"task_id": "HumanEval/117", "solution": "\ndef select_words(s, n):\n    if s == '':\n        return []\n    else:\n        words = s.split()\n        selected_words = []\n        for word in words:\n            consonants = 0\n            for letter in word:\n                if letter.lower() not in 'aeiou':\n                    consonants += 1\n            if consonants == n:\n                selected_words.append(word)\n        return selected_words", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/150": [{"task_id": "HumanEval/150", "solution": "\ndef x_or_y(n, x, y):\n    \"\"\"Returns x if n is prime, otherwise returns y.\n\n    Examples:\n    x_or_y(7, 34, 12) returns 34\n    x_or_y(15, 8, 5) returns 5\n    \"\"\"\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return y\n        else:\n            return x\n    else:\n        return y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/90": [{"task_id": "HumanEval/90", "solution": "\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        lst = sorted(lst)\n        return lst[1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1]]], "plus_fail_tests": [[[2, 2, 2, 2, 2, 2, 3, 3, 3, 3]]]}], "HumanEval/15": [{"task_id": "HumanEval/15", "solution": "\n\ndef string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/63": [{"task_id": "HumanEval/63", "solution": "\n\ndef fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[57]]}], "HumanEval/76": [{"task_id": "HumanEval/76", "solution": "\ndef is_simple_power(x, n):\n    \"\"\"Returns true if x is an integer power of n, false otherwise.\n    \n    A number x is an integer power of n if there exists some integer i such that n**i = x\n    \n    Examples:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    i = 1\n    while n ** i <= x:\n        if n ** i == x:\n            return True\n        i += 1\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 12]], "plus_fail_tests": [[82, 1]]}], "HumanEval/25": [{"task_id": "HumanEval/25", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1 if divisor == 2 else 2\n    return factors", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[123456791]]}], "HumanEval/94": [{"task_id": "HumanEval/94", "solution": "\n\ndef skjkasdkd(lst):\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    prime_numbers = [i for i in lst if is_prime(i)]\n    if not prime_numbers:\n        return 0\n    largest_prime = max(prime_numbers)\n    return sum((int(digit) for digit in str(largest_prime)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}