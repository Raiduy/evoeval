
def max_fill(grid, capacity):
    import math
    "\n    This function is given a rectangular grid that represents a set of wells, where each row of the grid corresponds to a single well. In each row, the number '1' signifies a single unit of water while '0' signifies empty space.\n\n    Along with the grid, you are also provided with a bucket that can be used to extract water from the wells. Every well has one such corresponding bucket. It is also important to note that all buckets have an identical capacity, which is provided as an input to the function.\n\n    The goal of this function is to empty all the wells of water using these buckets. The function should calculate and output the total number of times the buckets need to be lowered into the wells to completely drain them of water. During each lowering, a bucket can extract a volume of water up to its capacity.\n\n    Here are a few examples:\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        In this case, there are 6 units of water in total, and the capacity of the bucket is 1. Hence, you need to lower the bucket 6 times to empty all the wells.\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Here, there are 9 units of water, and the bucket capacity is 2. You can extract 2 units of water in the first 4 lowerings, and in the final lowering, you can extract the remaining 1 unit of water.\n        Output: 5\n\n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        In this case, there is no water in any of the wells, hence no need to lower the bucket.\n        Output: 0\n\n    Constraints:\n        * All wells (i.e., rows in the grid) are of the same length.\n        * The grid's length (i.e., the number of wells) ranges from 1 to 10^2.\n        * 1 <= grid[:,1].length <= 10^2\n        * 1 <= capacity <= 10\n        "
    total_water = sum((sum(row) for row in grid))
    return math.ceil(total_water / capacity)