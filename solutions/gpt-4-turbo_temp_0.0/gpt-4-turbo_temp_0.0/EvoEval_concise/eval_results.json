{"eval": {"HumanEval/47": [{"task_id": "HumanEval/47", "solution": "\n\ndef median(l: list):\n    \"\"\"\n    Calculate and return the median of list 'l'.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 1:\n        return sorted_list[n // 2]\n    else:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/68": [{"task_id": "HumanEval/68", "solution": "\ndef pluck(arr):\n    smallest_even = float('inf')\n    index_of_smallest_even = -1\n    for (i, value) in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            index_of_smallest_even = i\n    if smallest_even == float('inf'):\n        return []\n    return [smallest_even, index_of_smallest_even]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/4": [{"task_id": "HumanEval/4", "solution": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" Calculate the Mean Absolute Deviation (MAD) of the list.\n    MAD is the average absolute deviation from the mean:\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n    return mad", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/71": [{"task_id": "HumanEval/71", "solution": "\ndef triangle_area(a, b, c):\n    \"\"\"\n    Returns area of a triangle (rounded to 2 decimals) given the lengths of its \n    three sides, if they form a valid triangle. If not, returns -1. A valid triangle \n    is one where the sum of any two sides is greater than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/119": [{"task_id": "HumanEval/119", "solution": "\ndef match_parens(lst):\n    open_count = 0\n    close_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            elif open_count > 0:\n                open_count -= 1\n            else:\n                close_count += 1\n    if open_count == 0 and close_count == 0:\n        return 'Yes'\n    else:\n        return 'No'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[")())", "(()()("]]], "plus_fail_tests": [[[")()()()(()()))", "(("]]]}], "HumanEval/101": [{"task_id": "HumanEval/101", "solution": "\ndef words_string(s):\n    \"\"\"\n    Given a string of words divided by commas or spaces, split the string into individual words. \n    Return an array containing these words.\n    \n    Example:\n    words_string(\"Hi, my name is John\") => [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words = re.split('[, ]+', s)\n    words = [word for word in words if word]\n    return words", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hi, my name is John"]], "plus_fail_tests": [[",,,,"]]}], "HumanEval/72": [{"task_id": "HumanEval/72", "solution": "\ndef will_it_fly(q, w):\n    is_palindromic = q == q[::-1]\n    sum_within_limit = sum(q) <= w\n    return is_palindromic and sum_within_limit", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/124": [{"task_id": "HumanEval/124", "solution": "\ndef valid_date(date):\n    if not date:\n        return False\n    try:\n        (month, day, year) = map(int, date.split('-'))\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_day = 31\n    elif month in [4, 6, 9, 11]:\n        max_day = 30\n    else:\n        max_day = 29\n    if day < 1 or day > max_day:\n        return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["06-04-202"]]}], "HumanEval/96": [{"task_id": "HumanEval/96", "solution": "\ndef count_up_to(n):\n    \"\"\"Create a function that takes a non-negative integer n and returns a list of prime numbers less than n.\"\"\"\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[3]]}], "HumanEval/104": [{"task_id": "HumanEval/104", "solution": "\ndef unique_digits(x):\n    \"\"\"Returns a sorted list of integers from the input list x that do not contain any even digits.\n\n    The list is sorted in ascending order.\n    \n    Example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n\n    def has_even_digit(num):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                return True\n        return False\n    filtered_numbers = [num for num in x if not has_even_digit(num)]\n    return sorted(filtered_numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/105": [{"task_id": "HumanEval/105", "solution": "\ndef by_length(arr):\n    \"\"\"\n    This function takes an array of integers and performs a series of operations. It first filters out numbers \n    that are not between 1 and 9 inclusive. Then, it sorts the resulting array in ascending order, reverses it, \n    and replaces each digit with its corresponding English word \n    (\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\").\n\n    Example:\n      For input array [2, 1, 1, 4, 5, 8, 2, 3], the function returns [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"].\n      For an empty array, it returns an empty array.\n      For an array with integers outside the 1-9 range, such as [1, -1 , 55], the function ignores those numbers and returns ['One'].\n    \"\"\"\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    num_to_word = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    result = [num_to_word[num] for num in reversed_arr]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/75": [{"task_id": "HumanEval/75", "solution": "\ndef is_multiply_prime(a):\n    \"\"\"Check if a number is a product of 3 prime numbers.\"\"\"\n    factors = prime_factors(a)\n    return len(factors) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[33]]}], "HumanEval/107": [{"task_id": "HumanEval/107", "solution": "\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/87": [{"task_id": "HumanEval/87", "solution": "\ndef get_row(lst, x):\n    \"\"\"\n    Given a jagged 2D list 'lst' and an integer 'x', this function finds all occurrences of 'x' in the list. It returns a list of tuples where each tuple represents the coordinates (row, column) of 'x' in the list. The rows start from 0 and are sorted in ascending order. If 'x' occurs multiple times in the same row, the columns are sorted in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    occurrences = []\n    for (i, row) in enumerate(lst):\n        for (j, value) in enumerate(row):\n            if value == x:\n                occurrences.append((i, j))\n    occurrences.sort(key=lambda coord: (coord[0], -coord[1]))\n    return occurrences", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/82": [{"task_id": "HumanEval/82", "solution": "\ndef prime_length(string):\n    \"\"\"Return True if the length of the input string is a prime number, False otherwise.\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    n = len(string)\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/66": [{"task_id": "HumanEval/66", "solution": "\ndef digitSum(s):\n    \"\"\"\n    Given a string 's', the function returns the sum of the ASCII values of the uppercase characters in 's'.\n    \n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum_of_digits = 0\n    for char in s:\n        if char.isupper():\n            sum_of_digits += ord(char)\n    return sum_of_digits", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/156": [{"task_id": "HumanEval/156", "solution": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Converts a positive integer (1 <= num <= 1000) into its lowercase roman numeral string equivalent.\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = [(1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'), (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'), (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')]\n    roman_string = ''\n    for (value, symbol) in roman_numerals:\n        while number >= value:\n            roman_string += symbol\n            number -= value\n    return roman_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/93": [{"task_id": "HumanEval/93", "solution": "\ndef encode(message):\n    \"\"\"\n    Swap case of all letters in the given message. Additionally, replace all vowels with the letter that's 2 places \n    ahead in the alphabet. Assume input contains only letters.\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowel_replacement = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    encoded_message = ''\n    for char in message:\n        if char in vowel_replacement:\n            encoded_char = vowel_replacement[char]\n        else:\n            encoded_char = char\n        encoded_message += encoded_char.swapcase()\n    return encoded_message", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/102": [{"task_id": "HumanEval/102", "solution": "\ndef choose_num(x, y):\n    \"\"\"Returns the largest even integer within the inclusive range [x, y]. \n    If no even number exists, return -1.\n\n    Example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/86": [{"task_id": "HumanEval/86", "solution": "\ndef anti_shuffle(s):\n    parts = re.findall('\\\\b\\\\w+\\\\b|[^\\\\w\\\\s]|\\\\s+', s)\n    sorted_parts = [''.join(sorted(part)) if part.isalpha() else part for part in parts]\n    return ''.join(sorted_parts)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hi"]], "plus_fail_tests": [["12345"]]}], "HumanEval/103": [{"task_id": "HumanEval/103", "solution": "\ndef rounded_avg(n, m):\n    \"\"\"Given two positive integers n and m, calculate the average of all integers from n to m (inclusive),\n    rounded to the nearest integer, then converted to binary. If n > m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    avg = round((n + m) * (m - n + 1) / 2 / (m - n + 1))\n    return bin(avg)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/125": [{"task_id": "HumanEval/125", "solution": "\ndef split_words(txt):\n    words_by_space = txt.split()\n    if len(words_by_space) > 1:\n        return words_by_space\n    words_by_comma = txt.split(',')\n    if len(words_by_comma) > 1:\n        return words_by_comma\n    odd_position_count = 0\n    for char in txt:\n        if char.islower():\n            if (ord(char) - ord('a')) % 2 == 1:\n                odd_position_count += 1\n    return odd_position_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/44": [{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"Converts integer x to a different numerical base.\n    Returns the conversion as a string.\n    The base is less than 10.\n\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/14": [{"task_id": "HumanEval/14", "solution": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Generates a list of prefixes for the input string in ascending length order.\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i + 1] for i in range(len(string))]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/97": [{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    \"\"\"\n    Returns the product of the unit digits of two integers.\n    Examples:\n    multiply(148, 412) -> 16\n    multiply(19, 28) -> 72\n    multiply(2020, 1851) -> 0\n    multiply(14,-15) -> 20\n    \"\"\"\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    return unit_a * unit_b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/120": [{"task_id": "HumanEval/120", "solution": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array of integers 'arr' and a positive integer 'k', this function returns a sorted list of the top 'k' integers in 'arr'.\n    \"\"\"\n    sorted_arr = sorted(arr, reverse=True)\n    top_k_elements = sorted_arr[:k]\n    return sorted(top_k_elements)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/88": [{"task_id": "HumanEval/88", "solution": "\ndef sort_array(array):\n    \"\"\"\n    Returns a sorted copy of the input array with non-negative integers. If the sum of the first and last elements is odd, sorts the array in ascending order. \n    If the sum is even, sorts the array in descending order. The original array remains unchanged.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if len(array) < 2:\n        return array.copy()\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/23": [{"task_id": "HumanEval/23", "solution": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Calculates and returns the length of input string.\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/84": [{"task_id": "HumanEval/84", "solution": "\ndef solve(N):\n    binary_representation = bin(N)[2:]\n    sum_of_digits = sum((int(digit) for digit in binary_representation))\n    binary_sum = bin(sum_of_digits)[2:]\n    return binary_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1000]], "plus_fail_tests": [[10]]}], "HumanEval/35": [{"task_id": "HumanEval/35", "solution": "\n\ndef max_element(l: list):\n    \"\"\"Finds and returns the largest number in a list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_num = l[0]\n    for num in l[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/13": [{"task_id": "HumanEval/13", "solution": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Returns the highest common divisor of integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        (a, b) = (b, a % b)\n    return a", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/31": [{"task_id": "HumanEval/31", "solution": "\n\ndef is_prime(n):\n    \"\"\"\n    Checks if the input number is prime.\n    Returns true for prime numbers, false for non-prime numbers.\n    \n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/157": [{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    \"\"\"\n    Determine if the lengths of the three sides of a triangle form a right-angled triangle.\n    A triangle has a right angle if the square of the longest side equals the sum of the squares of the other two sides.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/43": [{"task_id": "HumanEval/43", "solution": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    Takes a list of integers (l) as input. Returns True if a pair of distinct elements sum to zero; otherwise, returns False.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    elements_set = set(l)\n    for element in l:\n        if -element in elements_set:\n            if element == 0:\n                if l.count(0) >= 2:\n                    return True\n            else:\n                return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/95": [{"task_id": "HumanEval/95", "solution": "\ndef check_dict_case(dict):\n    \"\"\"\n    Returns True if all keys in the input dictionary are either all lower case or all upper case strings. \n    If the dictionary is empty or if the keys are a mix of upper and lower case strings, the function returns False.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) returns True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) returns False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) returns False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) returns False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) returns True.\n    \"\"\"\n    if not dict:\n        return False\n    all_lower = all_upper = None\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if all_lower is None and all_upper is None:\n            all_lower = key.islower()\n            all_upper = key.isupper()\n        else:\n            if all_lower and (not key.islower()):\n                return False\n            if all_upper and (not key.isupper()):\n                return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"Name": "John", "Age": "36", "City": "Houston"}]], "plus_fail_tests": [[{"firstName": "John", "LASTNAME": "DOE", "Age": 35, "cItY": "new york", "Income": "$50,000"}]]}], "HumanEval/110": [{"task_id": "HumanEval/110", "solution": "\ndef exchange(lst1, lst2):\n    \"\"\"Create a function that checks if it's possible to exchange elements between two input lists of numbers,\n    lst1 and lst2, to transform lst1 into a list of only even numbers. The exchange of elements is unlimited. \n    If the conversion is feasible, the function returns \"YES\". If it's not, it returns \"NO\". \n    The input lists will always be non-empty.\n    Example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    \"\"\"\n    even_count_lst1 = sum((1 for x in lst1 if x % 2 == 0))\n    even_count_lst2 = sum((1 for x in lst2 if x % 2 == 0))\n    odd_count_lst1 = len(lst1) - even_count_lst1\n    if odd_count_lst1 == 0 or even_count_lst2 >= odd_count_lst1:\n        return 'YES'\n    else:\n        return 'NO'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/98": [{"task_id": "HumanEval/98", "solution": "\ndef count_upper(s):\n    \"\"\"\n    Returns the count of uppercase vowels at even indices in string s.\n    \n    Example:\n    count_upper('aBCdEf') -> 1\n    count_upper('abcdefg') -> 0\n    count_upper('dBBE') -> 0\n    \"\"\"\n    uppercase_vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/73": [{"task_id": "HumanEval/73", "solution": "\ndef smallest_change(arr):\n    \"\"\"\n    Calculate the minimum number of changes required to transform the input array, arr, into a palindrome. A palindrome\n    array reads the same forwards and backwards. One change involves substituting an element with any other element.\n\n    Example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    min_changes = 0\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        if arr[start] != arr[end]:\n            min_changes += 1\n        start += 1\n        end -= 1\n    return min_changes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/108": [{"task_id": "HumanEval/108", "solution": "\ndef count_nums(arr):\n    \"\"\"\n    Define a function count_nums that takes an array of integers and returns the count of elements \n    with their sum of signed digits greater than 0. For negative numbers, the first digit is negative.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def sum_of_signed_digits(num):\n        num_str = str(num)\n        sum_digits = 0\n        if num_str[0] == '-':\n            sum_digits -= int(num_str[1])\n            for digit in num_str[2:]:\n                sum_digits += int(digit)\n        else:\n            for digit in num_str:\n                sum_digits += int(digit)\n        return sum_digits\n    count = 0\n    for num in arr:\n        if sum_of_signed_digits(num) > 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/81": [{"task_id": "HumanEval/81", "solution": "\ndef numerical_letter_grade(grades):\n    \"\"\"Convert a list of GPA scores into equivalent letter grades according to the predetermined grading system.\"\"\"\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/146": [{"task_id": "HumanEval/146", "solution": "\ndef specialFilter(nums):\n    \"\"\"\n    Returns the count of numbers from the given list that are greater than 10 and have both first and last digits odd.\n    \n    Example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/60": [{"task_id": "HumanEval/60", "solution": "\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"\n    Calculates the sum of integers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/147": [{"task_id": "HumanEval/147", "solution": "\ndef get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1]]}], "HumanEval/144": [{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    \"\"\"Implements a function that checks if the multiplication of two fractions results in a whole number.\n    \n    Both fractions x and n are represented as strings in the format '<numerator>/<denominator>'. \n    The numerator and denominator are positive integers. \n    \n    Returns True if the multiplication results in a whole number, False otherwise.\n    \"\"\"\n    (num1, den1) = map(int, x.split('/'))\n    (num2, den2) = map(int, n.split('/'))\n    result_num = num1 * num2\n    result_den = den1 * den2\n    return result_num % result_den == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/26": [{"task_id": "HumanEval/26", "solution": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" Removes duplicate integers from a given list preserving the original order.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 2, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 4, 3, 5]]], "plus_fail_tests": [[[1, 1, 2, 2, 3, 3, 4, 4]]]}], "HumanEval/6": [{"task_id": "HumanEval/6", "solution": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Takes a string representing groups of nested parentheses separated by spaces.\n    Returns a list representing the deepest level of nesting in each group.\n    \n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        current_depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/20": [{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" Returns the pair of numbers from the input list that are nearest to each other, sorted in ascending order.\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    sorted_numbers = sorted(numbers)\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    smallest_diff = abs(sorted_numbers[1] - sorted_numbers[0])\n    for i in range(1, len(sorted_numbers) - 1):\n        current_diff = abs(sorted_numbers[i + 1] - sorted_numbers[i])\n        if current_diff < smallest_diff:\n            smallest_diff = current_diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    return closest_pair", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/51": [{"task_id": "HumanEval/51", "solution": "\n\ndef remove_vowels(text):\n    \"\"\"\n    Function to eliminate vowels from a given string.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\nghijklm\")\n    'bcdf\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/45": [{"task_id": "HumanEval/45", "solution": "\n\ndef triangle_area(a, h):\n    \"\"\"Returns the area of a triangle with given side length 'a' and height 'h'.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/89": [{"task_id": "HumanEval/89", "solution": "\ndef encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            base = ord('A') if char.isupper() else ord('a')\n            rotated_char = chr(base + (ord(char) - base + 4) % 26)\n            result += rotated_char\n        else:\n            result += char\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/114": [{"task_id": "HumanEval/114", "solution": "import math\n\ndef minSubArraySum(nums):\n    \"\"\"\n    Return the minimum sum of any non-empty sub-array from an array of integers.\n    \n    Example:\n    minSubArraySum([2, 3, 4, 1, 2, 4]) returns 1\n    minSubArraySum([-1, -2, -3]) returns -6\n    \"\"\"\n    min_sum = math.inf\n    current_sum = 0\n    for num in nums:\n        if current_sum > 0:\n            current_sum = num\n        else:\n            current_sum += num\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/55": [{"task_id": "HumanEval/55", "solution": "\n\ndef fib(n: int) -> int:\n    \"\"\"\n    Returns the n-th Fibonacci number.\n    :param n: Index of the Fibonacci sequence.\n    :return: The n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        (a, b) = (0, 1)\n        for _ in range(2, n + 1):\n            (a, b) = (b, a + b)\n        return b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/77": [{"task_id": "HumanEval/77", "solution": "\ndef iscube(a):\n    \"\"\"\n    Determines if an integer is a perfect cube.\n    \n    Accepts an integer and returns True if it's a perfect cube, else False.\n    Input will always be valid.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    cube_root = abs(a) ** (1 / 3)\n    return round(cube_root) ** 3 == abs(a) and (a >= 0 or round(cube_root) ** 3 == -a)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/92": [{"task_id": "HumanEval/92", "solution": "\ndef any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 integer numbers.\n    Returns true if any number is the sum of the other two.\n    Returns false otherwise or if any of the numbers is not an integer.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n\n    \"\"\"\n    if not all((isinstance(i, int) for i in [x, y, z])):\n        return False\n    return x == y + z or y == x + z or z == x + y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/46": [{"task_id": "HumanEval/46", "solution": "\n\ndef fib4(n: int) -> int:\n    \"\"\"Calculates the n-th element of the Fib4 sequence, defined as:\n    fib4(n) -> 0 for n in {0, 1, 3}, 2 for n = 2, and fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) for n > 3.\n    Uses an efficient non-recursive approach.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n in {0, 1, 3}:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        (a, b, c, d) = (0, 0, 2, 0)\n        for _ in range(4, n + 1):\n            temp = a + b + c + d\n            (a, b, c, d) = (b, c, d, temp)\n        return d", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/7": [{"task_id": "HumanEval/7", "solution": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Returns list of input strings containing the specified substring.\n\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/16": [{"task_id": "HumanEval/16", "solution": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Returns the count of unique case-insensitive characters in a given string.\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    lower_case_string = string.lower()\n    unique_characters = set(lower_case_string)\n    return len(unique_characters)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/141": [{"task_id": "HumanEval/141", "solution": "\ndef file_name_check(file_name):\n    \"\"\"\n    Checks a file name's validity based on specific conditions, and returns 'Yes' if valid and 'No' if not valid. The conditions are as follows:\n    - No more than three digits ('0'-'9') in the file name.\n    - Exactly one dot '.' in the file name.\n    - The substring before the dot should begin with a latin alphabet letter ('a'-'z' or 'A'-'Z') and should not be empty.\n    - The substring after the dot should be 'txt', 'exe', or 'dll'.\n    \n    Example:\n    file_name_check(\"example.txt\") returns 'Yes'\n    file_name_check(\"1example.dll\") returns 'No' (file name doesn't start with a latin alphabet letter)\n    \"\"\"\n    if file_name.count('.') != 1:\n        return 'No'\n    (name, extension) = file_name.split('.')\n    if not name[0].isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    digit_count = sum((c.isdigit() for c in file_name))\n    if digit_count > 3:\n        return 'No'\n    return 'Yes'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[".txt"]], "plus_fail_tests": [[".exe"]]}], "HumanEval/67": [{"task_id": "HumanEval/67", "solution": "\ndef fruit_distribution(s, n):\n    \"\"\"\n    Given a string representing the number of apples and oranges, and an integer representing the total\n    number of fruits in a basket, this function returns the number of mango fruits in the basket.\n    The string format is \"{number of apples} apples and {number of oranges} oranges\". The function computes \n    the number of mango fruits by subtracting the number of apples and oranges from the total number of fruits.\n    Examples:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 19\n    \"\"\"\n    parts = s.split()\n    num_apples = int(parts[0])\n    num_oranges = int(parts[3])\n    num_mangoes = n - (num_apples + num_oranges)\n    return num_mangoes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/29": [{"task_id": "HumanEval/29", "solution": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Return strings from input list that start with specified prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/54": [{"task_id": "HumanEval/54", "solution": "\n\ndef same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Determines whether two strings share the same unique characters, irrespective of count or order.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    return set_s0 == set_s1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/129": [{"task_id": "HumanEval/129", "solution": "\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    if not grid or k <= 0:\n        return []\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    min_path = [float('inf')]\n\n    def dfs(x, y, path, steps):\n        nonlocal min_path\n        if steps == k:\n            if path < min_path:\n                min_path = path.copy()\n            return\n        for (dx, dy) in directions:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < N and 0 <= ny < N:\n                path.append(grid[nx][ny])\n                dfs(nx, ny, path, steps + 1)\n                path.pop()\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]], 1)\n    return min_path", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/36": [{"task_id": "HumanEval/36", "solution": "\n\ndef fizz_buzz(n: int) -> int:\n    \"\"\"Returns count of digit '7' in numbers less than 'n' that are multiples of 11 or 13.\"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/145": [{"task_id": "HumanEval/145", "solution": "\ndef order_by_points(nums):\n    \"\"\"\n    Sort a list of integers in ascending order by the sum of their digits. \n    In case of ties, maintain original order. \n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_of_digits(n):\n        return sum((int(digit) for digit in str(abs(n))))\n    return [num for (_, num) in sorted(enumerate(nums), key=lambda x: (sum_of_digits(x[1]), x[0]))]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 11, -1, -11, -12]]], "plus_fail_tests": [[[-5, -12, 9, 15]]]}], "HumanEval/59": [{"task_id": "HumanEval/59", "solution": "\n\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Finds n's largest prime factor. Assumes n > 1.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = -1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 2:\n        largest_factor = n\n    return largest_factor", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/78": [{"task_id": "HumanEval/78", "solution": "\ndef hex_key(num):\n    \"\"\"This function receives a hexadecimal number as a string and \n    counts the number of hexadecimal digits that are prime numbers.\n    The prime numbers in hexadecimal digits are 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    It's assumed the input is always correct or an empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    prime_count = 0\n    for char in num:\n        if char in prime_hex_digits:\n            prime_count += 1\n    return prime_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/153": [{"task_id": "HumanEval/153", "solution": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Given a class name (string) and a list of extensions, this function loads the strongest extension to the class. \n    The strength of an extension is defined as the difference between the count of uppercase letters (CAP) and the \n    count of lowercase letters (SM) in its name. In case of a tie, the first extension in the list wins. The function \n    returns a string in the format 'ClassName.StrongestExtensionName'.\n    \n    Example:\n    Strongest_Extension('my_class', ['AA', 'Be', 'CC']) returns 'my_class.AA'\n    \"\"\"\n    strongest_extension = ''\n    highest_strength = float('-inf')\n    for extension in extensions:\n        strength = sum((1 for char in extension if char.isupper())) - sum((1 for char in extension if char.islower()))\n        if strength > highest_strength:\n            strongest_extension = extension\n            highest_strength = strength\n    return f'{class_name}.{strongest_extension}'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/69": [{"task_id": "HumanEval/69", "solution": "\ndef search(lst):\n    \"\"\"\n    Given a non-empty list of positive integers, return the highest integer that exceeds zero, whose frequency in the list is at least equal to its value. If no such integer exists, return -1.\n    The frequency of an integer is its count in the list.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frequency_dict = {}\n    for num in lst:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n    result = -1\n    for (num, freq) in frequency_dict.items():\n        if num <= freq:\n            result = max(result, num)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/122": [{"task_id": "HumanEval/122", "solution": "\ndef add_elements(arr, k):\n    \"\"\"\n    This function takes an array (arr) of integers and another integer (k). Its task is to return \n    the sum of the elements in the first k elements of arr that have at most two digits.\n\n    Example:\n        arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        should return: 24  # 21 + 3\n\n    Constraints:\n        1. The length of arr is between 1 and 100.\n        2. k is between 1 and the length of arr.\n    \"\"\"\n    sum_of_elements = 0\n    for i in range(k):\n        if arr[i] < 100:\n            sum_of_elements += arr[i]\n    return sum_of_elements", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-100, -89, -77, -55, 900, -44, -22, -11], 7]]}], "HumanEval/11": [{"task_id": "HumanEval/11", "solution": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Perform binary XOR on two binary strings a and b, and return result as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    a_int = int(a, 2)\n    b_int = int(b, 2)\n    result_int = a_int ^ b_int\n    result_str = bin(result_int)[2:]\n    return result_str", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["111000", "101010"]], "plus_fail_tests": [["000", "000"]]}], "HumanEval/2": [{"task_id": "HumanEval/2", "solution": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"\n    Decomposes a positive float into its integer and decimal parts,\n    then returns the decimal part.\n    \n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/138": [{"task_id": "HumanEval/138", "solution": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Check if the input number n can be expressed as the sum of exactly 4 positive even numbers.\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n < 8 or n % 2 != 0:\n        return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/5": [{"task_id": "HumanEval/5", "solution": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert 'delimeter' between each pair of elements in `numbers'.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/100": [{"task_id": "HumanEval/100", "solution": "\ndef make_a_pile(n):\n    \"\"\"\n    Constructs a pile with 'n' levels of stones where the first level consists of 'n' stones. For each subsequent level,\n    if 'n' is even, add the next even number of stones, if 'n' is odd, add the next odd number of stones.\n    Returns a list, where each index represents the level (index+1) and its value represents the number of stones in that level.\n\n    Example:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = []\n    for i in range(n):\n        pile.append(n + 2 * i)\n    return pile", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/61": [{"task_id": "HumanEval/61", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" \n    Checks if every opening bracket in the input string 'brackets' has a corresponding closing bracket. \n    Returns True if so, otherwise False.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/161": [{"task_id": "HumanEval/161", "solution": "\ndef solve(s):\n    \"\"\"\n    Given a string 's', if 's' contains alphabetic characters, flip their case. If 's' contains no alphabetic characters, reverse 's'. \n    Return the modified string.\n    Examples:\n    solve(\"1234\") -> \"4321\"\n    solve(\"ab\") -> \"AB\"\n    solve(\"#a@C\") -> \"#A@c\"\n    \"\"\"\n    if any((c.isalpha() for c in s)):\n        return ''.join((c.lower() if c.isupper() else c.upper() for c in s))\n    else:\n        return s[::-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/127": [{"task_id": "HumanEval/127", "solution": "\ndef intersection(interval1, interval2):\n    \"\"\"\n    Given two closed intervals of integers, determine whether the length of their intersection is a prime number. \n    Closed intervals include both start and end, and start is always less or equal to end. \n    If the intersection's length is prime, return \"YES\". If not or if the intervals don't intersect, return \"NO\".\n    \"\"\"\n    start_max = max(interval1[0], interval2[0])\n    end_min = min(interval1[1], interval2[1])\n    intersection_length = end_min - start_max + 1\n    if intersection_length > 0 and is_prime(intersection_length):\n        return 'YES'\n    else:\n        return 'NO'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2], [2, 3]]], "plus_fail_tests": [[[0, 0], [0, 1]]]}], "HumanEval/27": [{"task_id": "HumanEval/27", "solution": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" Switches the case of each character in the given string.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = [char.lower() if char.isupper() else char.upper() for char in string]\n    return ''.join(flipped_string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/30": [{"task_id": "HumanEval/30", "solution": "\n\ndef get_positive(l: list):\n    \"\"\"Returns positive integers from input list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/85": [{"task_id": "HumanEval/85", "solution": "\ndef add(lst):\n    \"\"\"Sum the even numbers at odd indices in a non-empty list of integers, lst.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum_even_odd_index = 0\n    for (index, number) in enumerate(lst):\n        if index % 2 != 0 and number % 2 == 0:\n            sum_even_odd_index += number\n    return sum_even_odd_index", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/151": [{"task_id": "HumanEval/151", "solution": "\n", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/113": [{"task_id": "HumanEval/113", "solution": "\ndef odd_count(lst):\n    \"\"\"Given a list of digit-only strings, this function returns a new list. Each element i of the new list is a string describing the count of odd digits in the i'th input string.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for s in lst:\n        odd_count = sum((1 for char in s if int(char) % 2 != 0))\n        result_str = f'the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.'\n        result_str = result_str.replace('4', 'a')\n        result.append(result_str)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["1234567"]]], "plus_fail_tests": [[["11224466558888", "55555", "1234567"]]]}], "HumanEval/142": [{"task_id": "HumanEval/142", "solution": "\n\n\ndef sum_squares(lst):\n    \"\"\"\n    This function receives a list of integers and modifies it based on the index of each entry. If the index is a multiple of 3, \n    the entry is squared. If the index is a multiple of 4 but not 3, the entry is cubed. Other entries remain unchanged. \n    The function returns the sum of all entries.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    for i in range(len(lst)):\n        if i % 3 == 0 and i != 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -1, -1, -1, -1, -1, -1, -1, -1]]], "plus_fail_tests": [[[2, 4, 6, 8, 10, 12]]]}], "HumanEval/134": [{"task_id": "HumanEval/134", "solution": "\ndef check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Construct a function that returns True if the last character of the\n    input string is an alphabetical character that is not part of a word,\n    otherwise it returns False. A \"word\" is defined as a group of characters\n    separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    \"\"\"\n    if not txt or txt.endswith(' '):\n        return False\n    if txt[-1].isalpha():\n        if len(txt) == 1 or txt[-2] == ' ':\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/28": [{"task_id": "HumanEval/28", "solution": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Join list of strings into one string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/160": [{"task_id": "HumanEval/160", "solution": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Takes two lists: 'operator', containing basic algebra operations, and 'operand', containing integers. Constructs an algebraic expression using these lists and returns its evaluation.\n\n    Basic algebra operations include:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    Resulting expression: 2 + 3 * 4 - 5\n    Output: 9\n\n    Constraints:\n    - The length of 'operator' is one less than the length of 'operand'.\n    - 'operand' contains non-negative integers only.\n    - Both lists are non-empty, with 'operand' containing at least two numbers.\n    \"\"\"\n    expression = str(operand[0])\n    for (op, num) in zip(operator, operand[1:]):\n        expression += f' {op} {num}'\n    result = eval(expression)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/38": [{"task_id": "HumanEval/38", "solution": "\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n    \ndef decode_cyclic(s: str):\n    \"\"\"\n    Decodes an input string encoded with encode_cyclic function.\n    \"\"\"\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/42": [{"task_id": "HumanEval/42", "solution": "\n\ndef incr_list(l: list):\n    \"\"\"Increments each element in a list by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/12": [{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Returns the longest string from a list, or the first one in case of a tie. If list is empty, returns None.\n    >>> longest([])\n    \n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    max_length = len(strings[0])\n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n    return longest_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/18": [{"task_id": "HumanEval/18", "solution": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Returns the count of the occurrences of the substring in the string, including overlaps.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/53": [{"task_id": "HumanEval/53", "solution": "\n\ndef add(x: int, y: int) -> int:\n    \"\"\"Calculate the sum of x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/111": [{"task_id": "HumanEval/111", "solution": "\ndef histogram(test):\n    \"\"\"Return a dictionary with keys as letters from a given string of space separated lowercase letters and values being their counts. If multiple letters have the same maximum frequency, include them all.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    letters = [letter for letter in test.split(' ') if letter]\n    letter_counts = {}\n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    max_freq = max(letter_counts.values(), default=0)\n    max_freq_letters = {letter: count for (letter, count) in letter_counts.items() if count == max_freq}\n    return max_freq_letters", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/106": [{"task_id": "HumanEval/106", "solution": "\ndef f(n):\n\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    def sum_up_to(x):\n        return x * (x + 1) // 2\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_up_to(i))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/24": [{"task_id": "HumanEval/24", "solution": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"Find the largest number smaller than n which divides n evenly.\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/32": [{"task_id": "HumanEval/32", "solution": "\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" Takes a list xs of even number of coefficients for a polynomial, where the largest coefficient is non zero. Returns a zero value of the polynomial.\n    Note: Only returns one zero point even when multiple exist.\n\n    >>> round(find_zero([1, 2]), 2)\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2)\n    1.0\n    \"\"\"\n    x = 0\n    step = 0.01\n    max_iterations = 10000\n    tolerance = 1e-06\n    for _ in range(max_iterations):\n        value = poly(xs, x)\n        if abs(value) < tolerance:\n            return x\n        x += step\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-10, -2]]], "plus_fail_tests": [[[5, 10, -3, 1]]]}], "HumanEval/143": [{"task_id": "HumanEval/143", "solution": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    Given a sentence as a string, return a string of words from the input sentence that have prime number lengths. \n    Keep the order of words intact. Each word is separated by a space. \n    \"\"\"\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["This is a test"]], "plus_fail_tests": [["cats and dogs"]]}], "HumanEval/121": [{"task_id": "HumanEval/121", "solution": "\ndef solution(lst):\n    \"\"\"\n    Calculates the sum of odd numbers at even-indexed positions in a given integer list.\n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    sum_odd_even_index = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum_odd_even_index += lst[i]\n    return sum_odd_even_index", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/91": [{"task_id": "HumanEval/91", "solution": "\ndef is_bored(S):\n    \"\"\"\n    Given a string of sentences, this function counts the number of sentences starting with \"I\". \n    Sentences are separated by '.', '?' or '!'.\n    \n    Example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    sentences = []\n    temp_sentence = ''\n    for char in S:\n        if char in '.?!':\n            if temp_sentence:\n                sentences.append(temp_sentence.strip())\n                temp_sentence = ''\n        else:\n            temp_sentence += char\n    if temp_sentence:\n        sentences.append(temp_sentence.strip())\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I '):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/9": [{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" Generates a list with the maximum element found till that index in the given list of integers.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n    max_list = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    return max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/49": [{"task_id": "HumanEval/49", "solution": "\n\ndef modp(n: int, p: int) -> int:\n    \"\"\"\n    Computes 2^n modulo p.\n    \n    Examples:\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    half_power = modp(n // 2, p)\n    if n % 2 == 0:\n        return half_power * half_power % p\n    else:\n        return 2 * (half_power * half_power) % p % p", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0, 1]]}], "HumanEval/21": [{"task_id": "HumanEval/21", "solution": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Transforms a list of numbers by rescaling values between 0 and 1 \n    where smallest becomes 0 and largest becomes 1.\n\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if not numbers:\n        return []\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    rescaled_numbers = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return rescaled_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/136": [{"task_id": "HumanEval/136", "solution": "\ndef largest_smallest_integers(lst):\n    max_negative = None\n    min_positive = None\n    for num in lst:\n        if num < 0 and (max_negative is None or num > max_negative):\n            max_negative = num\n        elif num > 0 and (min_positive is None or num < min_positive):\n            min_positive = num\n    return (max_negative, min_positive)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/80": [{"task_id": "HumanEval/80", "solution": "\ndef is_happy(s):\n    \"\"\"\n    Determine if the string 's' is 'happy'. A 'happy' string has a length of at least 3 and all 3 consecutive letters are unique. \n    Example: \n    is_happy('a') => False\n    is_happy('aa') => False\n    is_happy('abcd') => True\n    is_happy('aabb') => False\n    is_happy('adb') => True\n    is_happy('xyy') => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i + 3])) != 3:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/0": [{"task_id": "HumanEval/0", "solution": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Determines if any two elements in the provided list of numbers are closer than the specified threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/40": [{"task_id": "HumanEval/40", "solution": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    Check if there are three distinct elements in the given list of integers that sum to zero. If yes, return True, otherwise return False.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        (left, right) = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/140": [{"task_id": "HumanEval/140", "solution": "\ndef fix_spaces(text):\n    text = re.sub(' {3,}', '-', text)\n    text = re.sub(' ', '_', text)\n    return text", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Example"]], "plus_fail_tests": [["Hello,   world!"]]}], "HumanEval/58": [{"task_id": "HumanEval/58", "solution": "\n\ndef common(l1: list, l2: list) -> list:\n    \"\"\"Returns sorted list of unique elements common to both input lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    common_elements = set(l1) & set(l2)\n    return sorted(list(common_elements))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/109": [{"task_id": "HumanEval/109", "solution": "\ndef move_one_ball(arr):\n    if len(arr) <= 1:\n        return True\n    break_count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[(i + 1) % len(arr)]:\n            break_count += 1\n        if break_count > 1:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/41": [{"task_id": "HumanEval/41", "solution": "\n\ndef car_race_collision(n: int) -> int:\n    \"\"\"\n    On an infinitely long straight road, n cars are driving from left to right, while another n cars are driving from right to left at the same speed. A collision occurs when a car moving in one direction hits a car moving in the opposite direction. Despite collisions, all cars keep moving in their original direction. The function returns the total number of such collisions.\n    \n    :param n: Number of cars moving in each direction\n    :return: Total number of collisions\n    \"\"\"\n    return n * n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/123": [{"task_id": "HumanEval/123", "solution": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, this function returns a sorted list of the odd numbers in the Collatz sequence.\n    \n    Collatz sequence starts with a positive integer n. Each subsequent term is derived from the previous term: \n    - If the previous term is even, the next term is half of the previous term.\n    - If the previous term is odd, the next term is 3 times the previous term plus 1.\n    The sequence always concludes at 1, regardless of the initial n.\n\n    Note: \n        1. Collatz(1) returns [1].\n        2. The returned list is sorted in ascending order.\n\n    Example:\n    get_odd_collatz(5) returns [1, 5] # The Collatz sequence for 5 is [5, 16, 8, 4, 2, 1], hence the odd numbers are 1 and 5.\n    \"\"\"\n    odd_numbers = set()\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.add(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.add(1)\n    return sorted(odd_numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/52": [{"task_id": "HumanEval/52", "solution": "\n\ndef below_threshold(l: list, t: int) -> bool:\n    \"\"\"Checks if all elements in list l are less than threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for element in l:\n        if element >= t:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/22": [{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Returns a list of integers from the provided list.\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[true, false, null, 0, -10, "test", [], {}, 3.14]]]}], "HumanEval/33": [{"task_id": "HumanEval/33", "solution": "\n\ndef sort_third(l: list):\n    \"\"\"Takes a list 'l' and returns a new list with l's elements at indices divisible by three sorted, while other elements remain the same.\n\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    elements_to_sort = [l[i] for i in range(len(l)) if i % 3 == 0]\n    elements_to_sort.sort()\n    result = l[:]\n    sorted_index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = elements_to_sort[sorted_index]\n            sorted_index += 1\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/3": [{"task_id": "HumanEval/3", "solution": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" Determine if the account balance drops below zero at any point given a list of deposit and withdrawal operations. \n    The function should return True if it does, otherwise return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/137": [{"task_id": "HumanEval/137", "solution": "\ndef compare_one(a, b):\n    \"\"\"\n    Returns the greater of two inputs, each of which may be an integer, float, or string representing a real number. \n    If a number is expressed as a string, it could contain either '.' or ',' as the decimal point. \n    If inputs are equal, the function returns None.\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    def to_float(val):\n        if isinstance(val, str):\n            val = val.replace(',', '.')\n        return float(val)\n    a_float = to_float(a)\n    b_float = to_float(b)\n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/128": [{"task_id": "HumanEval/128", "solution": "\ndef prod_signs(arr):\n    \"\"\"\n    For a given array arr of integers, return the sum of absolute values of integers multiplied by \n    the product of their signs (represented by 1, -1, or 0). If the array is empty, return None.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    sign_product = 1\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product = 0\n            break\n    result = sum((abs(num) for num in arr)) * sign_product\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/1": [{"task_id": "HumanEval/1", "solution": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" \n    Takes a string of multiple balanced and non-nested parentheses groups. Returns a list containing each group as a separate string. Spaces within the string are ignored.\n    \n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    groups = []\n    current_group = []\n    open_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            current_group.append(char)\n        elif char == ')':\n            open_count -= 1\n            current_group.append(char)\n            if open_count == 0:\n                groups.append(''.join(current_group))\n                current_group = []\n    return groups", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/115": [{"task_id": "HumanEval/115", "solution": "\ndef max_fill(grid, capacity):\n    import math\n    total_water = sum((sum(row) for row in grid))\n    bucket_lowers = math.ceil(total_water / capacity)\n    return bucket_lowers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 1, 1, 1], [1, 1, 1, 1]], 9]], "plus_fail_tests": [[[[1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 1, 1]], 2]]}], "HumanEval/62": [{"task_id": "HumanEval/62", "solution": "\n\ndef derivative(xs: list):\n    \"\"\" \n    Returns the derivative of a polynomial represented by list 'xs', where each element corresponds to a coefficient. \n    The list index represents the power of x (i.e., xs[i]*x^i).\n    \n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/112": [{"task_id": "HumanEval/112", "solution": "\ndef reverse_delete(s, c):\n    result_string = ''.join([char for char in s if char not in c])\n    is_palindrome = result_string == result_string[::-1]\n    return (result_string, is_palindrome)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/131": [{"task_id": "HumanEval/131", "solution": "\ndef digits(n):\n    \"\"\"Returns the product of the odd digits in a positive integer n, or 0 if all digits are even.\n\n    Examples:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    found_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            found_odd = True\n    if not found_odd:\n        return 0\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/57": [{"task_id": "HumanEval/57", "solution": "\n\ndef monotonic(l: list):\n    \"\"\"Checks if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    is_increasing = l[1] > l[0]\n    for i in range(1, len(l)):\n        if is_increasing and l[i] < l[i - 1]:\n            return False\n        elif not is_increasing and l[i] > l[i - 1]:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 1, 2, 3, 3, 3, 4, 5]]]}], "HumanEval/65": [{"task_id": "HumanEval/65", "solution": "\ndef circular_shift(x, shift):\n    \"\"\"Performs a circular right shift on the digits of x as per shift value and returns the result in string format.\n    Returns reversed digits if shift exceeds number of digits.\n\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x_str = str(x)\n    n = len(x_str)\n    if shift >= n:\n        return x_str[::-1]\n    shift = shift % n\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12, 2]], "plus_fail_tests": [[987654321, 9]]}], "HumanEval/148": [{"task_id": "HumanEval/148", "solution": "\ndef bf(planet1, planet2):\n    \"\"\"\n    Given two planet names (planet1 and planet2), this function returns a tuple of all planets \n    located between the orbits of planet1 and planet2, sorted by their proximity to the sun. \n    Planets considered are Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune. \n    If invalid planet names are given, the function returns an empty tuple.\n    \"\"\"\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/116": [{"task_id": "HumanEval/116", "solution": "\ndef sort_array(arr):\n    \"\"\"\n    Sort an array of integers based on the number of ones in their binary representations in ascending order.\n    If two integers have the same number of ones, sort them based on their decimal values.\n\n    Example:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n    \"\"\"\n    sorted_arr = sorted(arr, key=lambda x: (bin(x).count('1'), x))\n    return sorted_arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/79": [{"task_id": "HumanEval/79", "solution": "\ndef decimal_to_binary(decimal):\n    \"\"\"Convert a decimal number to binary format as a string enclosed by 'db'. \n    The binary number string contains only '0's and '1's.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    binary_str = bin(decimal)[2:]\n    return f'db{binary_str}db'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/118": [{"task_id": "HumanEval/118", "solution": "\ndef get_closest_vowel(word):\n    \"\"\"Find the rightmost vowel that is surrounded by consonants in a given word. \n\n    Only consider vowels that are not at the start or end of the word. If no such vowel exists, \n    return an empty string. The function is case sensitive.\n\n    The input word only contains English letters.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and (word[i + 1] not in vowels):\n            return word[i]\n    return ''", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/162": [{"task_id": "HumanEval/162", "solution": "\ndef string_to_md5(text):\n    \"\"\"\n    Converts a string 'text' to its md5 hash. Returns None for an empty string.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hello world"]], "plus_fail_tests": [["5873hajsdklh"]]}], "HumanEval/34": [{"task_id": "HumanEval/34", "solution": "\n\ndef unique(l: list):\n    \"\"\"Sorts and removes duplicates from a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/50": [{"task_id": "HumanEval/50", "solution": "\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    Decodes a string encoded with encode_shift function.\n    \"\"\"\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/64": [{"task_id": "HumanEval/64", "solution": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"This function, vowels_count, accepts a string s, representing a word and returns the number of vowels in it. \n    The vowels are 'a', 'e', 'i', 'o', 'u' and 'y' (only if it's at the end of the word).\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    s = s.lower()\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y'):\n        count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/83": [{"task_id": "HumanEval/83", "solution": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of n-digit positive integers that either begin or conclude with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        start_or_end_with_1 = 2 * 10 ** (n - 1)\n        both_start_and_end_with_1 = 10 ** (n - 2)\n        return start_or_end_with_1 - both_start_and_end_with_1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[6]]}], "HumanEval/17": [{"task_id": "HumanEval/17", "solution": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Transforms a string of musical notes (represented in a special ASCII format) into a list of integers. Each integer represents the duration of a note.\n\n    Legend:\n    'o' - whole note (4 beats)\n    'o|' - half note (2 beats)\n    '.|' - quarter note (1 beat)\n\n    Example: \n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    symbols = []\n    i = 0\n    while i < len(music_string):\n        if i + 1 < len(music_string) and music_string[i + 1] == '|':\n            symbols.append(music_string[i:i + 2])\n            i += 2\n        else:\n            symbols.append(music_string[i])\n            i += 1\n    durations = []\n    for symbol in symbols:\n        if symbol == 'o':\n            durations.append(4)\n        elif symbol == 'o|':\n            durations.append(2)\n        elif symbol == '.|':\n            durations.append(1)\n        elif symbol == ' ':\n            continue\n        else:\n            raise ValueError(f'Unknown symbol: {symbol}')\n    return durations", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/158": [{"task_id": "HumanEval/158", "solution": "\ndef find_max(words):\n    max_unique_count = -1\n    max_word = ''\n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n        if unique_count > max_unique_count or (unique_count == max_unique_count and word < max_word):\n            max_unique_count = unique_count\n            max_word = word\n    return max_word", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/19": [{"task_id": "HumanEval/19", "solution": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input: A string of space-separated numerals from 'zero' to 'nine'.\n    Output: Returns the input string sorted in ascending order.\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numeral_to_number = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numeral_words = numbers.split()\n    numeric_values = [numeral_to_number[word] for word in numeral_words]\n    sorted_numeric_values = sorted(numeric_values)\n    sorted_numeral_words = [list(numeral_to_number.keys())[list(numeral_to_number.values()).index(value)] for value in sorted_numeric_values]\n    sorted_numbers_str = ' '.join(sorted_numeral_words)\n    return sorted_numbers_str", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/155": [{"task_id": "HumanEval/155", "solution": "\ndef even_odd_count(num):\n    \"\"\"Returns a tuple with counts of even and odd digits in a given integer.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[0]], "plus_fail_tests": [[0]]}], "HumanEval/74": [{"task_id": "HumanEval/74", "solution": "\ndef total_match(lst1, lst2):\n    \"\"\"\n    A function that takes two lists of strings as input. It returns the list with the fewer total characters across all its strings. \n    If both lists have the same total number of characters, it returns the first list.\n\n    Examples\n    total_match([], []) -> []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) -> ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) -> ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) -> ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) -> ['4']\n    \"\"\"\n    total_chars_lst1 = sum((len(s) for s in lst1))\n    total_chars_lst2 = sum((len(s) for s in lst2))\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/8": [{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Returns a tuple with the sum and product of a list of integers. For an empty list, sum is 0 and product is 1. \n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/163": [{"task_id": "HumanEval/163", "solution": "\ndef generate_integers(a, b):\n    \"\"\"\n    Returns the even numbers between two positive integers a and b in ascending order, irrespective of the order of a and b. If there are no even numbers, an empty list is returned.\n    \n    Example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        (a, b) = (b, a)\n    if a % 2 != 0:\n        a += 1\n    if b % 2 != 0:\n        b -= 1\n    return list(range(a, b + 1, 2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 10]], "plus_fail_tests": [[6, 12]]}], "HumanEval/133": [{"task_id": "HumanEval/133", "solution": "\n\ndef sum_squares(lst):\n    \"\"\"Return the sum of squares of each element in the list, after rounding each element to the nearest integer towards positive infinity.\n    \n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    squared = [math.ceil(x) ** 2 for x in lst]\n    return sum(squared)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3]]], "plus_fail_tests": [[[-3, 4, 5, 6, 7]]]}], "HumanEval/149": [{"task_id": "HumanEval/149", "solution": "\ndef sorted_list_sum(lst):\n    \"\"\"This function takes a list of strings, removes strings with odd lengths,\n    and returns the sorted list. Sorting is done primarily according to string length \n    in ascending order, and secondarily alphabetically for strings of the same length. \n    The list may contain duplicates.\n\n    Example:\n    assert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n    \"\"\"\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/135": [{"task_id": "HumanEval/135", "solution": "\ndef can_arrange(arr):\n    \"\"\"Define a function that returns the highest index of a number in the array that is not equal to or greater than its preceding number. Return -1 if no such number exists. The input array does not have duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 8, 5, 7, 3]]], "plus_fail_tests": [[[5, 4, 3, 2, 1]]]}], "HumanEval/154": [{"task_id": "HumanEval/154", "solution": "\ndef cycpattern_check(a, b):\n    \"\"\"Check if any rotation of the second word is a substring of the first word. Return True if so, else return False.\"\"\"\n    a_doubled = a + a\n    return b in a_doubled", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["efef", "fee"]], "plus_fail_tests": [["banana", "nab"]]}], "HumanEval/37": [{"task_id": "HumanEval/37", "solution": "\n\ndef sort_even(l: list):\n    \"\"\"Takes a list l and returns a new list where odd-indexed elements are unchanged, while even-indexed elements are sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even_indexed_elements = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indexed_elements_sorted = sorted(even_indexed_elements)\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indexed_elements_sorted.pop(0))\n        else:\n            result.append(l[i])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/152": [{"task_id": "HumanEval/152", "solution": "\ndef compare(game, guess):\n    \"\"\"Determine the accuracy of an individual's predictions for a series of match results. \n    Provided are two lists of equal length, the 'game' containing actual scores and 'guess' containing predictions. \n    Return a list where each element is the absolute difference between the corresponding game score and guess. \n    If a guess is accurate, the difference is 0.\n    \"\"\"\n    differences = []\n    for (game_score, guess_score) in zip(game, guess):\n        differences.append(abs(game_score - guess_score))\n    return differences", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/39": [{"task_id": "HumanEval/39", "solution": "\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the n-th Fibonacci number which is also a prime number.\n    \n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    count = 0\n    fib_num = 0\n    while True:\n        fib_num += 1\n        if is_prime(fib(fib_num)):\n            count += 1\n            if count == n:\n                return fib(fib_num)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1]], "plus_fail_tests": [[11]]}], "HumanEval/48": [{"task_id": "HumanEval/48", "solution": "\n\ndef is_palindrome(text: str) -> bool:\n    \"\"\"\n    Returns True if input string is a palindrome, False otherwise\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/99": [{"task_id": "HumanEval/99", "solution": "\ndef closest_integer(value):\n    \"\"\"\n    This function takes a string of a number as an input and returns the nearest \n    integer to the provided number. If the number falls midway between two integers, \n    the function rounds away from zero.\n\n    Examples:\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    \"\"\"\n    num = float(value)\n    rounded_num = int(round(num))\n    return rounded_num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["14.5"]], "plus_fail_tests": [["-6.5"]]}], "HumanEval/130": [{"task_id": "HumanEval/130", "solution": "\ndef tri(n):\n    \"\"\"\n    This function returns the first n numbers of the Tribonacci sequence. \n    The Tribonacci sequence is defined as follows:\n    - tri(0) = 0,\n    - tri(1) = 1,\n    - tri(2) = 1,\n    - tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3) for n > 2.\n    The function's input is a non-negative integer n.\n     \n    Example:\n    tri(4) = [0, 1, 1, 2, 4]\n    \"\"\"\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    elif n == 2:\n        return [0, 1, 1]\n    sequence = [0, 1, 1]\n    for i in range(3, n + 1):\n        next_value = sequence[i - 1] + sequence[i - 2] + sequence[i - 3]\n        sequence.append(next_value)\n    return sequence", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[2]]}], "HumanEval/70": [{"task_id": "HumanEval/70", "solution": "\ndef strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/132": [{"task_id": "HumanEval/132", "solution": "\ndef is_nested(string):\n    open_brackets = 0\n    valid_nesting_found = False\n    for char in string:\n        if char == '[':\n            open_brackets += 1\n        elif char == ']':\n            if open_brackets > 0:\n                open_brackets -= 1\n                valid_nesting_found = True\n            else:\n                return False\n    return valid_nesting_found and open_brackets == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["[][]"]], "plus_fail_tests": [["[[]]]"]]}], "HumanEval/10": [{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Creates the shortest possible palindrome starting with the given string.\n    \n    The algorithm identifies the longest suffix palindrome in the substring and reverses any preceding text to append at the end of the string.\n    \n    Examples: \n    make_palindrome(''): returns ''\n    make_palindrome('cat'): returns 'catac'\n    make_palindrome('cata'): returns 'catac'\n    \"\"\"\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/159": [{"task_id": "HumanEval/159", "solution": "\ndef eat(number, need, remaining):\n    \"\"\"\n    This function represents a hungry rabbit eating carrots. It takes in the number of carrots already eaten,\n    the number of additional carrots needed, and the number of carrots remaining. The function returns an array\n    with two elements: the total number of carrots eaten and the remaining carrots after eating. If there are not \n    enough remaining carrots to meet the need, the rabbit eats all the remaining carrots, but still requires more.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Args:\n    @number (int): Number of carrots already eaten by the rabbit (0 <= number <= 1000).\n    @need (int): Additional number of carrots needed by the rabbit (0 <= need <= 1000).\n    @remaining (int): Number of carrots still available (0 <= remaining <= 1000).\n    \"\"\"\n    if need <= remaining:\n        total_eaten = number + need\n        remaining -= need\n    else:\n        total_eaten = number + remaining\n        remaining = 0\n    return [total_eaten, remaining]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/126": [{"task_id": "HumanEval/126", "solution": "\ndef is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    last_seen = lst[0]\n    current_count = 1\n    for i in range(1, len(lst)):\n        if lst[i] < last_seen:\n            return False\n        elif lst[i] == last_seen:\n            current_count += 1\n            if current_count > 2:\n                return False\n        else:\n            current_count = 1\n            last_seen = lst[i]\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/56": [{"task_id": "HumanEval/56", "solution": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"\n    Checks if each '<' has a matching '>' in the string.\n    Assumes string consists only of '<' and '>' characters.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    counter = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter += 1\n        elif bracket == '>':\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/150": [{"task_id": "HumanEval/150", "solution": "\ndef x_or_y(n, x, y):\n    \"\"\"Returns x if n is prime, otherwise returns y.\n\n    Examples:\n    x_or_y(7, 34, 12) returns 34\n    x_or_y(15, 8, 5) returns 5\n    \"\"\"\n    return x if is_prime(n) else y", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7, 34, 12]], "plus_fail_tests": [[-2, 0, 1]]}], "HumanEval/117": [{"task_id": "HumanEval/117", "solution": "\ndef select_words(s, n):\n    \"\"\"Return a list of words from string s that contain exactly n consonants, in their original order. \n    If string s is empty, return an empty list. \n    It is assumed that the input string only contains letters and spaces. \n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    words = s.split()\n    result = []\n    vowels = 'aeiouAEIOU'\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char not in vowels and char.isalpha():\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/76": [{"task_id": "HumanEval/76", "solution": "\ndef is_simple_power(x, n):\n    \"\"\"Returns true if x is an integer power of n, false otherwise.\n    \n    A number x is an integer power of n if there exists some integer i such that n**i = x\n    \n    Examples:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    if n in [0, 1]:\n        return False\n    i = 1\n    while n ** i <= x:\n        if n ** i == x:\n            return True\n        i += 1\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0, 0]]}], "HumanEval/90": [{"task_id": "HumanEval/90", "solution": "\ndef next_smallest(lst):\n    \"\"\"\n    Given a list of integers, return the second smallest element. If no such element exists, return None.\n    \n    Examples: \n    next_smallest([1, 2, 3, 4, 5]) -> 2\n    next_smallest([5, 1, 4, 3, 2]) -> 2\n    next_smallest([]) -> None\n    next_smallest([1, 1]) -> None\n    \"\"\"\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.sort()\n    return unique_lst[1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/94": [{"task_id": "HumanEval/94", "solution": "\n\ndef skjkasdkd(lst):\n    \"\"\"Given a list of integers, this function finds the largest prime number in the list and returns the sum of its digits.\"\"\"\n    largest_prime = -1\n    for number in lst:\n        if is_prime(number) and number > largest_prime:\n            largest_prime = number\n    if largest_prime == -1:\n        return 0\n    return sum_of_digits(largest_prime)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9]]]}], "HumanEval/25": [{"task_id": "HumanEval/25", "solution": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Returns the list of prime factors of 'n', sorted from smallest to largest. \n    The frequency of each factor matches its occurrence in the factorization of 'n'.\n    The product of all factors equals the input number.\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/63": [{"task_id": "HumanEval/63", "solution": "\n\ndef fibfib(n: int) -> int:\n    \"\"\"This function calculates the n-th element of the FibFib sequence.\n    The FibFib sequence is defined as:\n    fibfib(0) = 0,\n    fibfib(1) = 0,\n    fibfib(2) = 1,\n    fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    It returns the n-th element of this sequence.\n    \n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[57]]}], "HumanEval/15": [{"task_id": "HumanEval/15", "solution": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Returns a string of numbers from 0 to n inclusive, separated by spaces.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join((str(i) for i in range(n + 1)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/139": [{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    \"\"\"Computes the Brazilian factorial, a variant of factorial, calculated as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    n should be a positive integer.\n\n    Example:\n    >>> special_factorial(4)\n    288\n    \"\"\"\n\n    def factorial(x):\n        \"\"\"Helper function to compute factorial of a number.\"\"\"\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}